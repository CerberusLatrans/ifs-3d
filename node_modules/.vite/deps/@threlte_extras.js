import {
  Bt,
  K,
  Kt,
  jt
} from "./chunk-V5O3KDTZ.js";
import {
  TransformControls
} from "./chunk-IPTWQLPC.js";
import {
  TextGeometry
} from "./chunk-YZ3LPNSQ.js";
import {
  ThreePerf
} from "./chunk-MQU5NLC5.js";
import {
  TrackballControls
} from "./chunk-2NR56LTD.js";
import {
  FontLoader
} from "./chunk-ZGL7NNT2.js";
import {
  HierarchicalObject_default,
  T,
  asyncWritable,
  createRawEventDispatcher,
  currentWritable,
  forwardEventHandlers,
  injectPlugin,
  memoize,
  revision,
  useCache,
  useLoader,
  useParent,
  useStage,
  useTask,
  useThrelte,
  useThrelteUserContext,
  watch
} from "./chunk-ZKIAVKPV.js";
import "./chunk-SKZTLOIB.js";
import {
  Text,
  preloadFont
} from "./chunk-UWDAKI25.js";
import "./chunk-PQU7CLHF.js";
import {
  KTX2Loader
} from "./chunk-C7LFTFVO.js";
import {
  OrbitControls
} from "./chunk-OUBEMEDU.js";
import "./chunk-SA3VOP2B.js";
import {
  Sky
} from "./chunk-EXGE7QWM.js";
import {
  CSM
} from "./chunk-JVLI65YT.js";
import {
  MeshBVH,
  MeshBVHUniformStruct,
  SAH,
  shaderIntersectFunction,
  shaderStructs
} from "./chunk-KEZR66HL.js";
import {
  DRACOLoader
} from "./chunk-D4HIHHN5.js";
import {
  MeshoptDecoder
} from "./chunk-BXCRL7WE.js";
import {
  GLTFLoader
} from "./chunk-OHXLXT2H.js";
import {
  toCreasedNormals
} from "./chunk-7FN7SZFW.js";
import {
  VerticalBlurShader
} from "./chunk-Q3JEGZBP.js";
import {
  HorizontalBlurShader
} from "./chunk-MHKAIRRC.js";
import {
  HDRCubeTextureLoader
} from "./chunk-AIN7SL3T.js";
import {
  RGBELoader
} from "./chunk-RWBJDUBS.js";
import {
  AdditiveBlending,
  AlwaysStencilFunc,
  AnimationMixer,
  Audio,
  AudioListener,
  AudioLoader,
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  CanvasTexture,
  CapsuleGeometry,
  Color,
  CubeCamera,
  CubeReflectionMapping,
  CubeTextureLoader,
  DefaultLoadingManager,
  DepthTexture,
  DoubleSide,
  DynamicDrawUsage,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  Euler,
  FileLoader,
  FloatType,
  FrontSide,
  Group,
  HalfFloatType,
  InstancedMesh,
  KeepStencilOp,
  LinearFilter,
  LinearMipmapLinearFilter,
  LinearSRGBColorSpace,
  MathUtils,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshDepthMaterial,
  NearestFilter,
  NotEqualStencilFunc,
  Object3D,
  OrthographicCamera,
  PerspectiveCamera,
  Plane,
  PlaneGeometry,
  PositionalAudio,
  Quaternion,
  REVISION,
  RGBADepthPacking,
  Raycaster,
  RepeatWrapping,
  ReplaceStencilOp,
  SRGBColorSpace,
  Scene,
  ShaderChunk,
  ShaderMaterial,
  Shape,
  SkinnedMesh,
  Sphere,
  Spherical,
  SpriteMaterial,
  Texture,
  TextureLoader,
  Vector2,
  Vector3,
  Vector4,
  WebGLCubeRenderTarget,
  WebGLRenderTarget
} from "./chunk-DKVX6RWU.js";
import {
  derived,
  readable,
  writable
} from "./chunk-3BNTVVRL.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_flush_callback,
  add_location,
  add_render_callback,
  append_hydration_dev,
  assign,
  attr_dev,
  bind,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  component_subscribe,
  compute_rest_props,
  createEventDispatcher,
  create_bidirectional_transition,
  create_component,
  create_in_transition,
  create_out_transition,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  get_store_value,
  globals,
  group_outros,
  handle_promise,
  init,
  insert_hydration_dev,
  mount_component,
  noop,
  onDestroy,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_dynamic_element_data,
  set_store_value,
  space,
  subscribe,
  tick,
  transition_in,
  transition_out,
  update_await_block_branch,
  update_slot_base,
  validate_dynamic_element,
  validate_slots,
  validate_store,
  validate_void_dynamic_element
} from "./chunk-O2P34IH6.js";
import "./chunk-EKIRE5YT.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@threlte/extras/dist/hooks/useCursor.js
var useCursor = (onPointerOver = "pointer", onPointerOut = "auto", target = void 0) => {
  let hovering = false;
  const hoveringStore = writable(false);
  const onPointerEnter = () => {
    hoveringStore.set(true);
  };
  const onPointerLeave = () => {
    hoveringStore.set(false);
  };
  if (typeof window === "undefined") {
    return {
      hovering: hoveringStore,
      onPointerEnter,
      onPointerLeave
    };
  }
  const el = target ?? document.body;
  let onPointerOverValue = typeof onPointerOver === "string" ? onPointerOver : get_store_value(onPointerOver);
  if (typeof onPointerOver !== "string") {
    const unsubscribeOnPointerOver = onPointerOver.subscribe((cursorStyle) => {
      onPointerOverValue = cursorStyle;
      if (hovering) {
        el.style.cursor = cursorStyle;
      }
    });
    onDestroy(unsubscribeOnPointerOver);
  }
  let onPointerOutValue = typeof onPointerOut === "string" ? onPointerOut : get_store_value(onPointerOut);
  if (typeof onPointerOut !== "string") {
    const unsubscribeOnPointerOut = onPointerOut.subscribe((cursorStyle) => {
      onPointerOutValue = cursorStyle;
      if (!hovering) {
        el.style.cursor = cursorStyle;
      }
    });
    onDestroy(unsubscribeOnPointerOut);
  }
  const unsubscribeHovering = hoveringStore.subscribe((isHovering) => {
    hovering = isHovering;
    if (isHovering) {
      el.style.cursor = onPointerOverValue;
    } else {
      el.style.cursor = onPointerOutValue;
    }
  });
  onDestroy(unsubscribeHovering);
  onDestroy(() => {
    el.style.cursor = onPointerOutValue;
  });
  return {
    hovering: hoveringStore,
    onPointerEnter,
    onPointerLeave
  };
};

// node_modules/@threlte/extras/dist/lib/buildSceneGraph.js
var buildSceneGraph = (object) => {
  const data = { nodes: {}, materials: {} };
  if (object) {
    object.traverse((obj) => {
      if (obj.name)
        data.nodes[obj.name] = obj;
      if (obj.material && !data.materials[obj.material.name])
        data.materials[obj.material.name] = obj.material;
    });
  }
  return data;
};

// node_modules/@threlte/extras/dist/hooks/useGltf.js
var defaultDracoLoaderInstances = {};
function useGltf(urlOrOptions, options) {
  const { renderer } = useThrelte();
  const opts = typeof urlOrOptions === "string" ? options : urlOrOptions;
  const loader = useLoader(GLTFLoader, {
    extend(loader2) {
      if (opts?.useDraco) {
        if (typeof opts.useDraco === "string" || typeof opts.useDraco === "boolean") {
          const path = typeof opts.useDraco === "string" ? opts.useDraco : "https://www.gstatic.com/draco/versioned/decoders/1.4.3/";
          if (!defaultDracoLoaderInstances[path]) {
            defaultDracoLoaderInstances[path] = new DRACOLoader().setDecoderPath(path);
          }
          loader2.setDRACOLoader(defaultDracoLoaderInstances[path]);
        } else {
          loader2.setDRACOLoader(opts.useDraco);
        }
      }
      if (opts?.useMeshopt) {
        loader2.setMeshoptDecoder(MeshoptDecoder);
      }
      if (opts?.ktxTranscoderPath) {
        const ktx2Loader = new KTX2Loader();
        ktx2Loader.setTranscoderPath(opts?.ktxTranscoderPath);
        ktx2Loader.detectSupport(renderer);
        loader2.setKTX2Loader(ktx2Loader);
      }
    }
  });
  const load = (url2) => {
    return loader.load(url2, {
      transform(result) {
        return {
          ...result,
          ...buildSceneGraph(result.scene)
        };
      }
    });
  };
  const url = typeof urlOrOptions === "string" ? urlOrOptions : void 0;
  if (url) {
    return load(url);
  } else {
    return {
      load
    };
  }
}

// node_modules/@threlte/extras/dist/hooks/useGltfAnimations.js
var isRoot = (value) => !!value?.isObject3D;
var isGltfStore = (value) => !!value?.subscribe && typeof value.subscribe === "function";
function useGltfAnimations(rootOrGltf, maybeRoot) {
  const gltf = isGltfStore(rootOrGltf) ? rootOrGltf : writable(void 0);
  const root = currentWritable(isRoot(rootOrGltf) ? rootOrGltf : isRoot(maybeRoot) ? maybeRoot : void 0);
  const actualRoot = derived([root, gltf], ([root2, gltf2]) => {
    return root2 ?? gltf2?.scene;
  });
  const actions = currentWritable({});
  const mixer = new AnimationMixer(void 0);
  watch([gltf, actualRoot], async ([gltf2, actualRoot2]) => {
    if (!gltf2 || !gltf2.animations.length || !actualRoot2)
      return;
    await tick();
    const newActions = gltf2.animations.reduce((acc, clip) => {
      const action = mixer.clipAction(clip, actualRoot2);
      return {
        ...acc,
        [clip.name]: action
      };
    }, {});
    actions.set(newActions);
    return () => {
      Object.values(newActions).forEach((a) => {
        const action = a;
        action.stop();
        mixer.uncacheClip(action.getClip());
      });
    };
  });
  const { start, stop } = useTask((delta) => {
    mixer.update(delta);
  }, { autoStart: false });
  watch(actions, (actions2) => {
    if (Object.keys(actions2).length)
      start();
    else
      stop();
  });
  return {
    gltf,
    root,
    mixer,
    actions
  };
}

// node_modules/@threlte/extras/dist/hooks/useProgress.js
var previousTotalLoaded = 0;
var useProgress = () => {
  const finishedOnce = writable(false);
  const activeStore = writable(false);
  const itemStore = writable(void 0);
  const loadedStore = writable(0);
  const totalStore = writable(0);
  const errorsStore = writable([]);
  const progressStore = writable(0);
  DefaultLoadingManager.onStart = (item, loaded, total) => {
    activeStore.set(true);
    itemStore.set(item);
    loadedStore.set(loaded);
    totalStore.set(total);
    const progress = (loaded - previousTotalLoaded) / (total - previousTotalLoaded);
    progressStore.set(progress);
    if (progress === 1)
      finishedOnce.set(true);
  };
  DefaultLoadingManager.onLoad = () => {
    activeStore.set(false);
  };
  DefaultLoadingManager.onError = (item) => {
    errorsStore.update((errors) => {
      return [...errors, item];
    });
  };
  DefaultLoadingManager.onProgress = (item, loaded, total) => {
    if (loaded === total) {
      previousTotalLoaded = total;
    }
    activeStore.set(true);
    itemStore.set(item);
    loadedStore.set(loaded);
    totalStore.set(total);
    const progress = (loaded - previousTotalLoaded) / (total - previousTotalLoaded) || 1;
    progressStore.set(progress);
    if (progress === 1)
      finishedOnce.set(true);
  };
  return {
    active: { subscribe: activeStore.subscribe },
    item: { subscribe: itemStore.subscribe },
    loaded: { subscribe: loadedStore.subscribe },
    total: { subscribe: totalStore.subscribe },
    errors: { subscribe: errorsStore.subscribe },
    progress: { subscribe: progressStore.subscribe },
    finishedOnce: { subscribe: finishedOnce.subscribe }
  };
};

// node_modules/@threlte/extras/dist/hooks/useTexture.js
var useTexture = (input, options) => {
  const loader = useLoader(TextureLoader, options);
  const { renderer } = useThrelte();
  return loader.load(input, {
    ...options,
    transform: (res) => {
      res.colorSpace = renderer.outputColorSpace;
      res.needsUpdate = true;
      return options?.transform?.(res) ?? res;
    }
  });
};

// node_modules/@threlte/extras/dist/hooks/useFBO.js
function useFBO(width, height, options) {
  const { dpr, size } = useThrelte();
  const _width = typeof width === "number" ? width : 1 * (dpr.current ?? 1);
  const _height = typeof height === "number" ? height : 1 * (dpr.current ?? 1);
  const _options = (typeof width === "number" ? options : width) || {};
  const { samples = 0, depth, ...targetOptions } = _options;
  const target = new WebGLRenderTarget(_width, _height, {
    minFilter: LinearFilter,
    magFilter: LinearFilter,
    type: HalfFloatType,
    ...targetOptions
  });
  if (depth) {
    target.depthTexture = new DepthTexture(_width, _height, FloatType);
  }
  target.samples = samples;
  onMount(() => {
    if (samples)
      target.samples = samples;
  });
  onDestroy(() => {
    target.dispose();
  });
  const unsubscribeSize = size.subscribe((val) => {
    const _width2 = typeof width === "number" ? width : val.width * dpr.current;
    const _height2 = typeof height === "number" ? height : val.height * dpr.current;
    if (target.width !== _width2 && target.height !== _height2) {
      target.setSize(_width2, _height2);
    }
  });
  onDestroy(unsubscribeSize);
  return target;
}

// node_modules/@threlte/extras/dist/hooks/useGamepad.js
var standardButtons = [
  "clusterBottom",
  "clusterRight",
  "clusterLeft",
  "clusterTop",
  "leftBumper",
  "rightBumper",
  "leftTrigger",
  "rightTrigger",
  "select",
  "start",
  "leftStickButton",
  "rightStickButton",
  "directionalTop",
  "directionalBottom",
  "directionalLeft",
  "directionalRight",
  "center"
];
var xrButtons = [
  "trigger",
  "squeeze",
  "touchpadButton",
  "thumbstickButton",
  "clusterBottom",
  "clusterTop"
];
var standardAxes = ["leftStick", "rightStick"];
var xrAxes = ["touchpad", "thumbstick"];
var createButton = (events, index) => {
  const off = (name, fn) => {
    if (!(index in events) || !(name in events[index]))
      return;
    const arrayIndex = events[index][name].indexOf(fn);
    if (arrayIndex > -1)
      events[index][name].splice(arrayIndex, 1);
  };
  const on = (name, fn) => {
    events[index][name] ??= [];
    events[index][name].push(fn);
    return () => off(name, fn);
  };
  return {
    pressed: false,
    touched: false,
    value: 0,
    on,
    off
  };
};
var createAxis = (events, index) => {
  const off = (name, fn) => {
    if (!(index in events) || !(name in events[index]))
      return;
    const arrayIndex = events[index][name].indexOf(fn);
    if (arrayIndex > -1)
      events[index][name].splice(arrayIndex, 1);
  };
  const on = (name, fn) => {
    events[index][name] ??= [];
    events[index][name].push(fn);
    return () => off(name, fn);
  };
  return {
    x: 0,
    y: 0,
    on,
    off
  };
};
var createXrStandard = (allEvents, events) => {
  const off = (name, fn) => {
    if (!allEvents[name])
      return;
    const index = allEvents[name].indexOf(fn);
    if (index > -1)
      allEvents[name].splice(index, 1);
  };
  const on = (name, fn) => {
    allEvents[name] ??= [];
    allEvents[name].push(fn);
    return () => off(name, fn);
  };
  return {
    on,
    off,
    /** The Gamepad connection status */
    connected: currentWritable(false),
    /** The raw Gamepad object */
    raw: null,
    /** buttons[0] - Primary trigger */
    trigger: createButton(events, 0),
    /** buttons[1] - Primary squeeze button */
    squeeze: createButton(events, 1),
    /** buttons[2] - Primary touchpad */
    touchpadButton: createButton(events, 2),
    /** buttons[3] - Primary thumbstick */
    thumbstickButton: createButton(events, 3),
    /** buttons[4] - Bottom cluster button */
    clusterBottom: createButton(events, 4),
    /** buttons[5] - Top cluster button */
    clusterTop: createButton(events, 5),
    /** axes[0], axes[1] - Horizontal / vertical axis for the primary touchpad */
    touchpad: createAxis(events, 6),
    /** axes[2], axes[3] - Horizontal / vertical axis for the primary thumbstick */
    thumbstick: createAxis(events, 7)
  };
};
var createStandard = (allEvents, events) => {
  const off = (name, fn) => {
    if (!allEvents[name])
      return;
    const index = allEvents[name].indexOf(fn);
    if (index > -1)
      allEvents[name].splice(index, 1);
  };
  const on = (name, fn) => {
    allEvents[name] ??= [];
    allEvents[name].push(fn);
    return () => off(name, fn);
  };
  return {
    on,
    off,
    /** The Gamepad connection status */
    connected: currentWritable(false),
    /** The raw Gamepad object */
    raw: null,
    /** buttons[0] - Botton button in right cluster */
    clusterBottom: createButton(events, 0),
    /** buttons[1] - Right button in right cluster */
    clusterRight: createButton(events, 1),
    /** buttons[2] - Left button in right cluster */
    clusterLeft: createButton(events, 2),
    /** buttons[3] - Top button in right cluster */
    clusterTop: createButton(events, 3),
    /** buttons[4] - Top left front button */
    leftBumper: createButton(events, 4),
    /** buttons[5] - Top right front button */
    rightBumper: createButton(events, 5),
    /** buttons[6] - Bottom left front button */
    leftTrigger: createButton(events, 6),
    /** buttons[7] - Bottom right front button */
    rightTrigger: createButton(events, 7),
    /** buttons[8] - Left button in center cluster */
    select: createButton(events, 8),
    /** buttons[9] - Right button in center cluster */
    start: createButton(events, 9),
    /** buttons[10] - Left stick pressed button */
    leftStickButton: createButton(events, 10),
    /** buttons[11] -	Right stick pressed button */
    rightStickButton: createButton(events, 11),
    /** buttons[12] -	Top button in left cluster */
    directionalTop: createButton(events, 12),
    /** buttons[13] -	Bottom button in left cluster */
    directionalBottom: createButton(events, 13),
    /** buttons[14] -	Left button in left cluster */
    directionalLeft: createButton(events, 14),
    /** buttons[15] -	Right button in left cluster */
    directionalRight: createButton(events, 15),
    /** buttons[16] -	Center button in center cluster */
    center: createButton(events, 16),
    /** axes[0], axes[1] - Horizontal / vertical axis for left stick (negative left/positive right) */
    leftStick: createAxis(events, 17),
    /** axes[2], axes[3] - Horizontal / vertical axis for right stick (negative left/positive right) */
    rightStick: createAxis(events, 18)
  };
};
var processButton = (target, mappedButton, allEvents, buttonEvents, source) => {
  const lastTouched = mappedButton.touched;
  const lastPressed = mappedButton.pressed;
  const lastValue = mappedButton.value;
  mappedButton.touched = source?.touched ?? false;
  mappedButton.pressed = source?.pressed ?? false;
  const value = mappedButton.value = source?.value ?? 0;
  if (!lastTouched && mappedButton.touched) {
    allEvents.touchstart?.forEach((fn) => fn({ type: "touchstart", target, value }));
    buttonEvents.touchstart?.forEach((fn) => fn({ type: "touchstart", target, value }));
  } else if (lastTouched && !mappedButton.touched) {
    allEvents.touch?.forEach((fn) => fn({ type: "touch", target, value }));
    buttonEvents.touch?.forEach((fn) => fn({ type: "touch", target, value }));
    allEvents.touchend?.forEach((fn) => fn({ type: "touchend", target, value }));
    buttonEvents.touchend?.forEach((fn) => fn({ type: "touchend", target, value }));
  }
  if (!lastPressed && mappedButton.pressed) {
    allEvents.down?.forEach((fn) => fn({ type: "down", target, value }));
    buttonEvents.down?.forEach((fn) => fn({ type: "down", target, value }));
  } else if (lastPressed && !mappedButton.pressed) {
    allEvents.press?.forEach((fn) => fn({ type: "press", target, value }));
    buttonEvents.press?.forEach((fn) => fn({ type: "press", target, value }));
    allEvents.up?.forEach((fn) => fn({ type: "up", target, value }));
    buttonEvents.up?.forEach((fn) => fn({ type: "up", target, value }));
  }
  if (lastValue !== mappedButton.value) {
    allEvents.change?.forEach((fn) => fn({ type: "change", target, value }));
    buttonEvents.change?.forEach((fn) => fn({ type: "change", target, value }));
  }
};
var processAxis = (target, mappedStick, allEvents, axisEvents, axisDeadzone, rawX = 0, rawY = 0) => {
  const lastValueX = mappedStick.x;
  const lastValueY = mappedStick.y;
  const x = Math.abs(rawX) < axisDeadzone ? 0 : rawX;
  const y = Math.abs(rawY) < axisDeadzone ? 0 : rawY;
  mappedStick.x = x;
  mappedStick.y = y;
  if (lastValueX !== x || lastValueY !== y) {
    allEvents.change?.forEach((fn) => fn({ type: "change", target, value: { x, y } }));
    axisEvents.change?.forEach((fn) => fn({ type: "change", target, value: { x, y } }));
  }
};
function useGamepad(options = {}) {
  const { axisDeadzone = 0.05 } = options;
  const allEvents = {};
  const events = [];
  if ("xr" in options) {
    for (let i = 0; i < xrButtons.length + xrAxes.length; i += 1) {
      events.push({});
    }
    const gamepad = createXrStandard(allEvents, events);
    const { xr } = useThrelte().renderer;
    const processSnapshot = () => {
      xr.getSession()?.inputSources.forEach((source) => {
        if (source.handedness !== options.hand) {
          return;
        }
        gamepad.raw = source.gamepad ?? null;
        const { buttons = [], axes = [] } = gamepad.raw ?? {};
        xrButtons.forEach((name, index) => processButton(name, gamepad[name], allEvents, events[index], buttons[index]));
        processAxis("touchpad", gamepad.touchpad, allEvents, events[6], axisDeadzone, axes[0], axes[1]);
        processAxis("thumbstick", gamepad.thumbstick, allEvents, events[7], axisDeadzone, axes[2], axes[3]);
      });
    };
    const { start, stop } = useTask(processSnapshot, { autoStart: false, autoInvalidate: false });
    const handleConnected = (event) => {
      if (event.data.handedness !== options.hand)
        return;
      const pad = event.data.gamepad;
      if (pad) {
        gamepad.raw = pad;
        gamepad.connected.set(true);
        start();
      }
    };
    const handleDisconnected = (event) => {
      if (event.data.handedness !== options.hand)
        return;
      gamepad.raw = null;
      gamepad.connected.set(false);
      stop();
    };
    const session = xr.getSession();
    if (session) {
      session.inputSources.forEach((source) => {
        if (source.handedness !== options.hand) {
          return;
        }
        const pad = source.gamepad;
        if (pad) {
          gamepad.raw = pad;
          gamepad.connected.set(true);
          start();
        }
      });
    }
    for (const index of [0, 1]) {
      const controller = xr.getController(index);
      controller.addEventListener("connected", handleConnected);
      controller.addEventListener("disconnected", handleDisconnected);
    }
    onDestroy(() => {
      for (const index of [0, 1]) {
        const controller = xr.getController(index);
        controller.removeEventListener("connected", handleConnected);
        controller.removeEventListener("disconnected", handleDisconnected);
      }
    });
    return gamepad;
  } else {
    for (let i = 0; i < standardButtons.length + standardAxes.length; i += 1) {
      events.push({});
    }
    const { index: gamepadIndex = 0 } = options;
    const gamepad = createStandard(allEvents, events);
    const processSnapshot = () => {
      const pad = navigator.getGamepads()[gamepadIndex];
      gamepad.raw = pad;
      const { buttons = [], axes = [] } = pad ?? {};
      standardButtons.forEach((name, index) => processButton(name, gamepad[name], allEvents, events[index], buttons[index]));
      processAxis("leftStick", gamepad.leftStick, allEvents, events[17], axisDeadzone, axes[0], axes[1]);
      processAxis("rightStick", gamepad.rightStick, allEvents, events[18], axisDeadzone, axes[2], axes[3]);
    };
    const { start, stop } = useTask(processSnapshot, { autoStart: false, autoInvalidate: false });
    const handleGamepadDisconnected = (event) => {
      const { id } = event.gamepad;
      if (id === gamepad.raw?.id) {
        gamepad.raw = null;
        gamepad.connected.set(false);
        stop();
      }
    };
    const handleGamepadConnected = () => {
      const pad = navigator.getGamepads()[gamepadIndex];
      if (pad) {
        gamepad.raw = pad;
        gamepad.connected.set(true);
        start();
      }
    };
    handleGamepadConnected();
    window.addEventListener("gamepadconnected", handleGamepadConnected);
    window.addEventListener("gamepaddisconnected", handleGamepadDisconnected);
    onDestroy(() => {
      window.removeEventListener("gamepadconnected", handleGamepadConnected);
      window.removeEventListener("gamepaddisconnected", handleGamepadDisconnected);
    });
    return gamepad;
  }
}

// node_modules/@threlte/extras/dist/hooks/useMask.js
var useMask = (id = 1, inverse = false) => {
  return {
    stencilRef: id,
    stencilWrite: true,
    stencilFunc: inverse ? NotEqualStencilFunc : EqualStencilFunc,
    stencilFail: KeepStencilOp,
    stencilZFail: KeepStencilOp,
    stencilZPass: KeepStencilOp
  };
};

// node_modules/@threlte/extras/dist/suspense/context.js
var suspenseContextIdentifier = Symbol("THRELTE_SUSPENSE_CONTEXT_IDENTIFIER");
var createSuspenseContext = (options) => {
  const dispatch = createRawEventDispatcher();
  const promises = currentWritable(/* @__PURE__ */ new Set());
  const errors = currentWritable(/* @__PURE__ */ new Map());
  const finalized = writable(false);
  const checkFinalized = () => {
    if (promises.current.size === 0 && errors.current.size === 0)
      finalized.set(true);
  };
  const finalStore = writable(options?.final ?? false);
  const addPromise = (promise) => {
    promises.update((set) => {
      set.add(promise);
      return set;
    });
  };
  const removePromise = (promise) => {
    promises.update((set) => {
      set.delete(promise);
      return set;
    });
  };
  const addError = (promise, error) => {
    errors.update((map) => {
      map.set(promise, error);
      return map;
    });
  };
  const removeError = (promise) => {
    errors.update((map) => {
      map.delete(promise);
      return map;
    });
  };
  const suspended = derived([promises, errors, finalStore, finalized], ([promises2, errors2, final, finalized2]) => {
    if (final && finalized2) {
      return false;
    } else if (errors2.size > 0) {
      return true;
    } else {
      return promises2.size > 0;
    }
  });
  const context = {
    suspend(promise) {
      addPromise(promise);
      promise.catch((error) => {
        addError(promise, error);
        dispatch("error", error);
      }).finally(() => {
        removePromise(promise);
        checkFinalized();
      });
    },
    onComponentDestroy(promise) {
      removePromise(promise);
      removeError(promise);
      checkFinalized();
    },
    suspended
  };
  const errorsArray = derived(errors, (errors2) => Array.from(errors2.values()));
  setContext(suspenseContextIdentifier, context);
  return {
    promises,
    suspended,
    errors: errorsArray,
    setFinal: (final) => finalStore.set(final ?? false)
  };
};

// node_modules/@threlte/extras/dist/suspense/useSuspense.js
var useSuspense = () => {
  const ctx = getContext(suspenseContextIdentifier);
  const promises = /* @__PURE__ */ new Set();
  const suspend = (promise) => {
    if (ctx) {
      ctx.suspend(promise);
      promises.add(promise);
    }
    return promise;
  };
  const state = {
    suspended: derived(ctx?.suspended ?? readable(false), (suspended) => suspended)
  };
  onDestroy(() => {
    if (!ctx)
      return;
    for (const promise of promises) {
      ctx.onComponentDestroy(promise);
    }
    promises.clear();
  });
  return Object.assign(suspend, state);
};

// node_modules/@threlte/extras/dist/components/AnimatedSpriteMaterial/AnimatedSpriteMaterial.svelte
var { console: console_1 } = globals;
function create_if_block_1(ctx) {
  let t;
  let updating_ref;
  let current;
  const t_spread_levels = [
    { is: (
      /*is*/
      ctx[3]
    ) },
    { map: (
      /*texture*/
      ctx[4]
    ) },
    { toneMapped: false },
    { transparent: (
      /*transparent*/
      ctx[2]
    ) },
    { alphaTest: (
      /*alphaTest*/
      ctx[1]
    ) },
    /*$$restProps*/
    ctx[7]
  ];
  function t_ref_binding(value) {
    ctx[26](value);
  }
  let t_props = {};
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  if (
    /*ref*/
    ctx[0] !== void 0
  ) {
    t_props.ref = /*ref*/
    ctx[0];
  }
  t = new T({ props: t_props, $$inline: true });
  binding_callbacks.push(() => bind(t, "ref", t_ref_binding));
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = dirty[0] & /*is, texture, transparent, alphaTest, $$restProps*/
      158 ? get_spread_update(t_spread_levels, [
        dirty[0] & /*is*/
        8 && { is: (
          /*is*/
          ctx2[3]
        ) },
        dirty[0] & /*texture*/
        16 && { map: (
          /*texture*/
          ctx2[4]
        ) },
        t_spread_levels[2],
        dirty[0] & /*transparent*/
        4 && { transparent: (
          /*transparent*/
          ctx2[2]
        ) },
        dirty[0] & /*alphaTest*/
        2 && { alphaTest: (
          /*alphaTest*/
          ctx2[1]
        ) },
        dirty[0] & /*$$restProps*/
        128 && get_spread_object(
          /*$$restProps*/
          ctx2[7]
        )
      ]) : {};
      if (!updating_ref && dirty[0] & /*ref*/
      1) {
        updating_ref = true;
        t_changes.ref = /*ref*/
        ctx2[0];
        add_flush_callback(() => updating_ref = false);
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(241:18) ",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let t0;
  let updating_ref;
  let t1;
  let t_meshdepthmaterial;
  let current;
  const t0_spread_levels = [
    { is: (
      /*is*/
      ctx[3]
    ) },
    { map: (
      /*texture*/
      ctx[4]
    ) },
    { toneMapped: false },
    { side: DoubleSide },
    { shadowSide: DoubleSide },
    { transparent: (
      /*transparent*/
      ctx[2]
    ) },
    { alphaTest: (
      /*alphaTest*/
      ctx[1]
    ) },
    /*$$restProps*/
    ctx[7]
  ];
  function t0_ref_binding(value) {
    ctx[25](value);
  }
  let t0_props = {};
  for (let i = 0; i < t0_spread_levels.length; i += 1) {
    t0_props = assign(t0_props, t0_spread_levels[i]);
  }
  if (
    /*ref*/
    ctx[0] !== void 0
  ) {
    t0_props.ref = /*ref*/
    ctx[0];
  }
  t0 = new T({ props: t0_props, $$inline: true });
  binding_callbacks.push(() => bind(t0, "ref", t0_ref_binding));
  t_meshdepthmaterial = new T.MeshDepthMaterial({
    props: {
      attach: "customDepthMaterial",
      depthPacking: RGBADepthPacking,
      map: (
        /*texture*/
        ctx[4]
      ),
      alphaTest: (
        /*alphaTest*/
        ctx[1]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      create_component(t_meshdepthmaterial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_meshdepthmaterial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_meshdepthmaterial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t0_changes = dirty[0] & /*is, texture, transparent, alphaTest, $$restProps*/
      158 ? get_spread_update(t0_spread_levels, [
        dirty[0] & /*is*/
        8 && { is: (
          /*is*/
          ctx2[3]
        ) },
        dirty[0] & /*texture*/
        16 && { map: (
          /*texture*/
          ctx2[4]
        ) },
        t0_spread_levels[2],
        t0_spread_levels[3],
        t0_spread_levels[4],
        dirty[0] & /*transparent*/
        4 && { transparent: (
          /*transparent*/
          ctx2[2]
        ) },
        dirty[0] & /*alphaTest*/
        2 && { alphaTest: (
          /*alphaTest*/
          ctx2[1]
        ) },
        dirty[0] & /*$$restProps*/
        128 && get_spread_object(
          /*$$restProps*/
          ctx2[7]
        )
      ]) : {};
      if (!updating_ref && dirty[0] & /*ref*/
      1) {
        updating_ref = true;
        t0_changes.ref = /*ref*/
        ctx2[0];
        add_flush_callback(() => updating_ref = false);
      }
      t0.$set(t0_changes);
      const t_meshdepthmaterial_changes = {};
      if (dirty[0] & /*texture*/
      16) t_meshdepthmaterial_changes.map = /*texture*/
      ctx2[4];
      if (dirty[0] & /*alphaTest*/
      2) t_meshdepthmaterial_changes.alphaTest = /*alphaTest*/
      ctx2[1];
      t_meshdepthmaterial.$set(t_meshdepthmaterial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(t_meshdepthmaterial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(t_meshdepthmaterial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
      }
      destroy_component(t0, detaching);
      destroy_component(t_meshdepthmaterial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(223:0) {#if texture && isMesh}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_if_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*texture*/
      ctx2[4] && /*isMesh*/
      ctx2[5]
    ) return 0;
    if (
      /*texture*/
      ctx2[4]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, [-1, -1]))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let fpsInterval;
  const omit_props_names = [
    "textureUrl",
    "dataUrl",
    "animation",
    "loop",
    "autoplay",
    "fps",
    "filter",
    "alphaTest",
    "delay",
    "transparent",
    "flipX",
    "startFrame",
    "endFrame",
    "rows",
    "columns",
    "totalFrames",
    "is",
    "ref",
    "play",
    "pause"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("AnimatedSpriteMaterial", slots, []);
  let { textureUrl } = $$props;
  let { dataUrl = "" } = $$props;
  let { animation = "" } = $$props;
  let { loop = true } = $$props;
  let { autoplay = true } = $$props;
  let { fps = 10 } = $$props;
  let { filter = "nearest" } = $$props;
  let { alphaTest = 0.1 } = $$props;
  let { delay = 0 } = $$props;
  let { transparent = true } = $$props;
  let { flipX = false } = $$props;
  let { startFrame = 0 } = $$props;
  let { endFrame = void 0 } = $$props;
  let { rows = 1 } = $$props;
  let { columns = void 0 } = $$props;
  let { totalFrames = 0 } = $$props;
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(24, $parent = value));
  const dispatch = createRawEventDispatcher();
  const supportedDirections = ["forward", "reverse"];
  const isSupportedDirection = (value) => {
    const isSupported = supportedDirections.includes(value);
    if (!isSupported) {
      console.warn(`Unsupported sprite animation direction "${value}"`);
    }
    return isSupported;
  };
  let timerOffset = 0;
  let currentFrame = startFrame;
  let numFrames = 0;
  let flipOffset = flipX ? -1 : 1;
  let frameWidth = 0;
  let frameHeight = 0;
  let texture;
  let json;
  let frameNames = [];
  let direction = "forward";
  let frameTag;
  let spritesheetSize = { w: 0, h: 0 };
  let isMesh = "isMesh" in $parent;
  let { is = isMesh ? new MeshBasicMaterial() : new SpriteMaterial() } = $$props;
  let { ref } = $$props;
  const suspend = useSuspense();
  const textureStore = suspend(useTexture(textureUrl, {
    transform: (value) => {
      value.matrixAutoUpdate = false;
      value.generateMipmaps = false;
      value.premultiplyAlpha = false;
      value.wrapS = value.wrapT = RepeatWrapping;
      value.magFilter = value.minFilter = filter === "nearest" ? NearestFilter : LinearFilter;
      return value;
    }
  }));
  const jsonStore = suspend(dataUrl ? useLoader(FileLoader).load(dataUrl, {
    transform: (file2) => {
      if (typeof file2 !== "string") return;
      try {
        return JSON.parse(file2);
      } catch {
        return;
      }
    }
  }) : asyncWritable(new Promise((resolve) => {
    const unsub = textureStore.subscribe((value) => {
      if (!value) return;
      unsub();
      resolve(createData(value));
    });
  })));
  const createData = (texture2) => {
    const { width, height } = texture2.image;
    const cols = columns ?? totalFrames;
    numFrames = totalFrames;
    const frameWidth2 = width / cols;
    const frameHeight2 = height / rows;
    const data = {
      frames: {},
      meta: {
        app: "",
        image: "",
        format: "",
        frameTags: [],
        version: "1.0",
        size: { w: width, h: height },
        scale: 1
      }
    };
    for (let i = 0; i < numFrames; i += 1) {
      const row = Math.floor(i / cols);
      const col = i % cols;
      const x = col * frameWidth2;
      const y = row * frameHeight2;
      data.frames[`${i}`] = {
        frame: { x, y, w: frameWidth2, h: frameHeight2 },
        spriteSourceSize: {
          x: 0,
          y: 0,
          w: frameWidth2,
          h: frameHeight2
        },
        sourceSize: { w: frameWidth2, h: frameHeight2 }
      };
    }
    return data;
  };
  const setFrame = (frame) => {
    const horizontalFrames = spritesheetSize.w / frameWidth;
    const verticalFrames = spritesheetSize.h / frameHeight;
    const frameOffsetX = 1 / horizontalFrames;
    const frameOffsetY = 1 / verticalFrames;
    const x = flipOffset > 0 ? frameOffsetX * (frame.x / frameWidth) : frameOffsetX * (frame.x / frameHeight) - texture.repeat.x;
    const y = Math.abs(1 - frameOffsetY) - frameOffsetY * (frame.y / frameHeight);
    texture?.offset.set(x, y);
    texture?.updateMatrix();
  };
  const setAnimation = (name) => {
    if (!json) return;
    frameTag = json?.meta.frameTags.find((tag) => tag.name === name);
    direction = isSupportedDirection(frameTag?.direction) ? frameTag.direction : "forward";
    currentFrame = direction === "forward" ? frameTag?.from ?? 0 : frameTag?.to ?? numFrames - 1;
    setFrame(json.frames[frameNames[currentFrame]].frame);
    if (dispatch.hasEventListener("start")) {
      dispatch("start");
    }
  };
  let playQueued = false;
  const play = async () => {
    playQueued = true;
    await Promise.all([textureStore, jsonStore]);
    if (!playQueued) return;
    timerOffset = performance.now() - delay;
    start();
  };
  const pause = () => {
    playQueued = false;
    stop();
  };
  const { start, stop } = useTask(
    () => {
      if (!json) return;
      const now = performance.now();
      const diff = now - timerOffset;
      const name = frameNames[currentFrame];
      const { frame, duration } = json.frames[name];
      const interval = duration ?? fpsInterval;
      if (diff <= interval) return;
      timerOffset = now - diff % interval;
      const start2 = direction === "forward" ? frameTag?.from ?? startFrame ?? 0 : frameTag?.to ?? endFrame ?? numFrames - 1;
      const end = direction === "forward" ? frameTag?.to ?? endFrame ?? numFrames - 1 : frameTag?.from ?? startFrame ?? 0;
      setFrame(frame);
      switch (direction) {
        case "forward":
          currentFrame += 1;
          break;
        case "reverse":
          currentFrame -= 1;
          break;
        default:
          break;
      }
      if (direction === "forward" && currentFrame > end || direction === "reverse" && currentFrame < end) {
        currentFrame = start2;
        if (loop) {
          if (dispatch.hasEventListener("loop")) {
            dispatch("loop");
          }
        } else {
          pause();
          if (dispatch.hasEventListener("end")) {
            dispatch("end");
          }
        }
      }
    },
    { autoStart: false }
  );
  watch([textureStore, jsonStore], ([nextTexture, nextJson]) => {
    if (nextTexture === void 0 || nextJson === void 0) return;
    $$invalidate(4, texture = nextTexture.clone());
    json = nextJson;
    frameNames = Object.keys(json.frames);
    numFrames = frameNames.length;
    spritesheetSize = json.meta.size;
    const { sourceSize } = Object.values(json.frames)[0];
    frameWidth = sourceSize.w;
    frameHeight = sourceSize.h;
    texture.repeat.set(1 * flipOffset / (spritesheetSize.w / frameWidth), 1 / (spritesheetSize.h / frameHeight));
    setAnimation(animation);
    dispatch("load");
    if (autoplay) {
      play();
    }
  });
  $$self.$$.on_mount.push(function() {
    if (textureUrl === void 0 && !("textureUrl" in $$props || $$self.$$.bound[$$self.$$.props["textureUrl"]])) {
      console_1.warn("<AnimatedSpriteMaterial> was created without expected prop 'textureUrl'");
    }
    if (ref === void 0 && !("ref" in $$props || $$self.$$.bound[$$self.$$.props["ref"]])) {
      console_1.warn("<AnimatedSpriteMaterial> was created without expected prop 'ref'");
    }
  });
  function t0_ref_binding(value) {
    ref = value;
    $$invalidate(0, ref);
  }
  function t_ref_binding(value) {
    ref = value;
    $$invalidate(0, ref);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("textureUrl" in $$new_props) $$invalidate(8, textureUrl = $$new_props.textureUrl);
    if ("dataUrl" in $$new_props) $$invalidate(9, dataUrl = $$new_props.dataUrl);
    if ("animation" in $$new_props) $$invalidate(10, animation = $$new_props.animation);
    if ("loop" in $$new_props) $$invalidate(11, loop = $$new_props.loop);
    if ("autoplay" in $$new_props) $$invalidate(12, autoplay = $$new_props.autoplay);
    if ("fps" in $$new_props) $$invalidate(13, fps = $$new_props.fps);
    if ("filter" in $$new_props) $$invalidate(14, filter = $$new_props.filter);
    if ("alphaTest" in $$new_props) $$invalidate(1, alphaTest = $$new_props.alphaTest);
    if ("delay" in $$new_props) $$invalidate(15, delay = $$new_props.delay);
    if ("transparent" in $$new_props) $$invalidate(2, transparent = $$new_props.transparent);
    if ("flipX" in $$new_props) $$invalidate(16, flipX = $$new_props.flipX);
    if ("startFrame" in $$new_props) $$invalidate(17, startFrame = $$new_props.startFrame);
    if ("endFrame" in $$new_props) $$invalidate(18, endFrame = $$new_props.endFrame);
    if ("rows" in $$new_props) $$invalidate(19, rows = $$new_props.rows);
    if ("columns" in $$new_props) $$invalidate(20, columns = $$new_props.columns);
    if ("totalFrames" in $$new_props) $$invalidate(21, totalFrames = $$new_props.totalFrames);
    if ("is" in $$new_props) $$invalidate(3, is = $$new_props.is);
    if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
  };
  $$self.$capture_state = () => ({
    DoubleSide,
    FileLoader,
    LinearFilter,
    MeshBasicMaterial,
    NearestFilter,
    RepeatWrapping,
    RGBADepthPacking,
    SpriteMaterial,
    T,
    asyncWritable,
    createRawEventDispatcher,
    useTask,
    watch,
    useLoader,
    useParent,
    useSuspense,
    useTexture,
    textureUrl,
    dataUrl,
    animation,
    loop,
    autoplay,
    fps,
    filter,
    alphaTest,
    delay,
    transparent,
    flipX,
    startFrame,
    endFrame,
    rows,
    columns,
    totalFrames,
    parent,
    dispatch,
    supportedDirections,
    isSupportedDirection,
    timerOffset,
    currentFrame,
    numFrames,
    flipOffset,
    frameWidth,
    frameHeight,
    texture,
    json,
    frameNames,
    direction,
    frameTag,
    spritesheetSize,
    isMesh,
    is,
    ref,
    suspend,
    textureStore,
    jsonStore,
    createData,
    setFrame,
    setAnimation,
    playQueued,
    play,
    pause,
    start,
    stop,
    fpsInterval,
    $parent
  });
  $$self.$inject_state = ($$new_props) => {
    if ("textureUrl" in $$props) $$invalidate(8, textureUrl = $$new_props.textureUrl);
    if ("dataUrl" in $$props) $$invalidate(9, dataUrl = $$new_props.dataUrl);
    if ("animation" in $$props) $$invalidate(10, animation = $$new_props.animation);
    if ("loop" in $$props) $$invalidate(11, loop = $$new_props.loop);
    if ("autoplay" in $$props) $$invalidate(12, autoplay = $$new_props.autoplay);
    if ("fps" in $$props) $$invalidate(13, fps = $$new_props.fps);
    if ("filter" in $$props) $$invalidate(14, filter = $$new_props.filter);
    if ("alphaTest" in $$props) $$invalidate(1, alphaTest = $$new_props.alphaTest);
    if ("delay" in $$props) $$invalidate(15, delay = $$new_props.delay);
    if ("transparent" in $$props) $$invalidate(2, transparent = $$new_props.transparent);
    if ("flipX" in $$props) $$invalidate(16, flipX = $$new_props.flipX);
    if ("startFrame" in $$props) $$invalidate(17, startFrame = $$new_props.startFrame);
    if ("endFrame" in $$props) $$invalidate(18, endFrame = $$new_props.endFrame);
    if ("rows" in $$props) $$invalidate(19, rows = $$new_props.rows);
    if ("columns" in $$props) $$invalidate(20, columns = $$new_props.columns);
    if ("totalFrames" in $$props) $$invalidate(21, totalFrames = $$new_props.totalFrames);
    if ("timerOffset" in $$props) timerOffset = $$new_props.timerOffset;
    if ("currentFrame" in $$props) currentFrame = $$new_props.currentFrame;
    if ("numFrames" in $$props) numFrames = $$new_props.numFrames;
    if ("flipOffset" in $$props) flipOffset = $$new_props.flipOffset;
    if ("frameWidth" in $$props) frameWidth = $$new_props.frameWidth;
    if ("frameHeight" in $$props) frameHeight = $$new_props.frameHeight;
    if ("texture" in $$props) $$invalidate(4, texture = $$new_props.texture);
    if ("json" in $$props) json = $$new_props.json;
    if ("frameNames" in $$props) frameNames = $$new_props.frameNames;
    if ("direction" in $$props) direction = $$new_props.direction;
    if ("frameTag" in $$props) frameTag = $$new_props.frameTag;
    if ("spritesheetSize" in $$props) spritesheetSize = $$new_props.spritesheetSize;
    if ("isMesh" in $$props) $$invalidate(5, isMesh = $$new_props.isMesh);
    if ("is" in $$props) $$invalidate(3, is = $$new_props.is);
    if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
    if ("playQueued" in $$props) playQueued = $$new_props.playQueued;
    if ("fpsInterval" in $$props) fpsInterval = $$new_props.fpsInterval;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*$parent*/
    16777216) {
      $: $$invalidate(5, isMesh = "isMesh" in $parent);
    }
    if ($$self.$$.dirty[0] & /*fps*/
    8192) {
      $: fpsInterval = 1e3 / fps;
    }
    if ($$self.$$.dirty[0] & /*animation, autoplay*/
    5120) {
      $: {
        setAnimation(animation);
        if (autoplay) {
          play();
        }
      }
    }
  };
  return [
    ref,
    alphaTest,
    transparent,
    is,
    texture,
    isMesh,
    parent,
    $$restProps,
    textureUrl,
    dataUrl,
    animation,
    loop,
    autoplay,
    fps,
    filter,
    delay,
    flipX,
    startFrame,
    endFrame,
    rows,
    columns,
    totalFrames,
    play,
    pause,
    $parent,
    t0_ref_binding,
    t_ref_binding
  ];
}
var AnimatedSpriteMaterial = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        textureUrl: 8,
        dataUrl: 9,
        animation: 10,
        loop: 11,
        autoplay: 12,
        fps: 13,
        filter: 14,
        alphaTest: 1,
        delay: 15,
        transparent: 2,
        flipX: 16,
        startFrame: 17,
        endFrame: 18,
        rows: 19,
        columns: 20,
        totalFrames: 21,
        is: 3,
        ref: 0,
        play: 22,
        pause: 23
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "AnimatedSpriteMaterial",
      options,
      id: create_fragment.name
    });
  }
  get textureUrl() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set textureUrl(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dataUrl() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dataUrl(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animation() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animation(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get loop() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set loop(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get autoplay() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoplay(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fps() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fps(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get filter() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set filter(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get alphaTest() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set alphaTest(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get delay() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set delay(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get transparent() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transparent(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get flipX() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set flipX(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get startFrame() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set startFrame(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get endFrame() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set endFrame(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rows() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rows(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get columns() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set columns(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get totalFrames() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set totalFrames(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get is() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set is(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get play() {
    return this.$$.ctx[22];
  }
  set play(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pause() {
    return this.$$.ctx[23];
  }
  set pause(value) {
    throw new Error("<AnimatedSpriteMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var AnimatedSpriteMaterial_default = AnimatedSpriteMaterial;

// node_modules/@threlte/extras/dist/components/Edges/Edges.svelte
var { Error: Error_1 } = globals;
var get_default_slot_changes = (dirty) => ({ ref: dirty & /*ref*/
4096 });
var get_default_slot_context = (ctx) => ({ ref: (
  /*ref*/
  ctx[12]
) });
function create_default_slot(ctx) {
  let t_edgesgeometry;
  let t0;
  let t_linebasicmaterial;
  let t1;
  let current;
  t_edgesgeometry = new T.EdgesGeometry({
    props: {
      args: [
        /*geometry*/
        ctx[2],
        /*thresholdAngle*/
        ctx[0]
      ]
    },
    $$inline: true
  });
  t_linebasicmaterial = new T.LineBasicMaterial({
    props: { color: (
      /*color*/
      ctx[1]
    ) },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      create_component(t_edgesgeometry.$$.fragment);
      t0 = space();
      create_component(t_linebasicmaterial.$$.fragment);
      t1 = space();
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      claim_component(t_edgesgeometry.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t_linebasicmaterial.$$.fragment, nodes);
      t1 = claim_space(nodes);
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_edgesgeometry, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t_linebasicmaterial, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_edgesgeometry_changes = {};
      if (dirty & /*geometry, thresholdAngle*/
      5) t_edgesgeometry_changes.args = [
        /*geometry*/
        ctx2[2],
        /*thresholdAngle*/
        ctx2[0]
      ];
      t_edgesgeometry.$set(t_edgesgeometry_changes);
      const t_linebasicmaterial_changes = {};
      if (dirty & /*color*/
      2) t_linebasicmaterial_changes.color = /*color*/
      ctx2[1];
      t_linebasicmaterial.$set(t_linebasicmaterial_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        6144)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_edgesgeometry.$$.fragment, local);
      transition_in(t_linebasicmaterial.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_edgesgeometry.$$.fragment, local);
      transition_out(t_linebasicmaterial.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t1);
      }
      destroy_component(t_edgesgeometry, detaching);
      destroy_component(t_linebasicmaterial, detaching);
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(12:0) <T.LineSegments   let:ref   {...$$restProps}   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let t_linesegments;
  let current;
  const t_linesegments_spread_levels = [
    /*$$restProps*/
    ctx[6]
  ];
  let t_linesegments_props = {
    $$slots: {
      default: [
        create_default_slot,
        ({ ref }) => ({ 12: ref }),
        ({ ref }) => ref ? 4096 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_linesegments_spread_levels.length; i += 1) {
    t_linesegments_props = assign(t_linesegments_props, t_linesegments_spread_levels[i]);
  }
  t_linesegments = new T.LineSegments({
    props: t_linesegments_props,
    $$inline: true
  });
  ctx[10](t_linesegments);
  const block = {
    c: function create() {
      create_component(t_linesegments.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_linesegments.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_linesegments, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_linesegments_changes = dirty & /*$$restProps*/
      64 ? get_spread_update(t_linesegments_spread_levels, [get_spread_object(
        /*$$restProps*/
        ctx2[6]
      )]) : {};
      if (dirty & /*$$scope, ref, color, geometry, thresholdAngle*/
      6151) {
        t_linesegments_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_linesegments.$set(t_linesegments_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_linesegments.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_linesegments.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[10](null);
      destroy_component(t_linesegments, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let parentMesh;
  let geometry;
  const omit_props_names = ["thresholdAngle", "color"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Edges", slots, ["default"]);
  let { thresholdAngle = void 0 } = $$props;
  let { color = void 0 } = $$props;
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(8, $parent = value));
  if (!$parent || $parent.type !== "Mesh") throw new Error("Edges: component must be a child of a Mesh");
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(3, $component = value));
  function t_linesegments_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("thresholdAngle" in $$new_props) $$invalidate(0, thresholdAngle = $$new_props.thresholdAngle);
    if ("color" in $$new_props) $$invalidate(1, color = $$new_props.color);
    if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useParent,
    forwardEventHandlers,
    thresholdAngle,
    color,
    parent,
    component,
    parentMesh,
    geometry,
    $parent,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("thresholdAngle" in $$props) $$invalidate(0, thresholdAngle = $$new_props.thresholdAngle);
    if ("color" in $$props) $$invalidate(1, color = $$new_props.color);
    if ("parentMesh" in $$props) $$invalidate(7, parentMesh = $$new_props.parentMesh);
    if ("geometry" in $$props) $$invalidate(2, geometry = $$new_props.geometry);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$parent*/
    256) {
      $: $$invalidate(7, parentMesh = $parent);
    }
    if ($$self.$$.dirty & /*parentMesh*/
    128) {
      $: $$invalidate(2, geometry = "clone" in parentMesh.geometry ? parentMesh.geometry.clone() : parentMesh.geometry);
    }
  };
  return [
    thresholdAngle,
    color,
    geometry,
    $component,
    parent,
    component,
    $$restProps,
    parentMesh,
    $parent,
    slots,
    t_linesegments_binding,
    $$scope
  ];
}
var Edges = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { thresholdAngle: 0, color: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Edges",
      options,
      id: create_fragment2.name
    });
  }
  get thresholdAngle() {
    throw new Error_1("<Edges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set thresholdAngle(value) {
    throw new Error_1("<Edges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error_1("<Edges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error_1("<Edges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Edges_default = Edges;

// node_modules/@threlte/extras/dist/hooks/useHasEventListeners.js
var useHasEventListeners = () => {
  const component = get_current_component();
  const hasEventListeners = (type) => {
    const callbacks = component.$$.callbacks;
    return type in callbacks && callbacks[type].length > 0;
  };
  return {
    hasEventListeners
  };
};

// node_modules/@threlte/extras/dist/components/HTML/utils.js
var v1 = new Vector3();
var v2 = new Vector3();
var v3 = new Vector3();
var isOrthographicCamera = (o) => {
  return o.isOrthographicCamera;
};
var isPerspectiveCamera = (o) => {
  return o.isPerspectiveCamera;
};
var isOrthographicCameraOrPerspectiveCamera = (o) => {
  return isOrthographicCamera(o) || isPerspectiveCamera(o);
};
var defaultCalculatePosition = (obj, camera, size) => {
  const objectPos = v1.setFromMatrixPosition(obj.matrixWorld);
  objectPos.project(camera);
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
};
var isObjectBehindCamera = (el, camera) => {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  const deltaCamObj = objectPos.sub(cameraPos);
  const camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
};
var isObjectVisible = (el, camera, raycaster, occlude) => {
  const elPos = v1.setFromMatrixPosition(el.matrixWorld);
  const screenPos = elPos.clone();
  screenPos.project(camera);
  raycaster.setFromCamera(screenPos, camera);
  const intersects = raycaster.intersectObjects(occlude, true);
  if (intersects.length) {
    const intersectionDistance = intersects[0].distance;
    const pointDistance = elPos.distanceTo(raycaster.ray.origin);
    return pointDistance < intersectionDistance;
  }
  return true;
};
var objectScale = (el, camera) => {
  if (isOrthographicCamera(camera)) {
    return camera.zoom;
  } else if (isPerspectiveCamera(camera)) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const vFOV = camera.fov * Math.PI / 180;
    const dist = objectPos.distanceTo(cameraPos);
    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;
    return 1 / scaleFOV;
  } else {
    return 1;
  }
};
var objectZIndex = (el, camera, zIndexRange) => {
  if (isOrthographicCameraOrPerspectiveCamera(camera)) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const dist = objectPos.distanceTo(cameraPos);
    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    const B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }
  return void 0;
};
var epsilon = (value) => Math.abs(value) < 1e-10 ? 0 : value;
var getCSSMatrix = (matrix, multipliers, prepend = "") => {
  let matrix3d = "matrix3d(";
  for (let i = 0; i !== 16; i++) {
    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? "," : ")");
  }
  return prepend + matrix3d;
};
var getCameraCSSMatrix = /* @__PURE__ */ ((multipliers) => {
  return (matrix) => getCSSMatrix(matrix, multipliers);
})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);
var getObjectCSSMatrix = /* @__PURE__ */ ((scaleMultipliers) => {
  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), "translate(-50%,-50%)");
})((f) => [
  1 / f,
  1 / f,
  1 / f,
  1,
  -1 / f,
  -1 / f,
  -1 / f,
  -1,
  1 / f,
  1 / f,
  1 / f,
  1,
  1,
  1,
  1,
  1
]);
var styleDeclarationKeyToCssString = (s) => {
  return s.split(/(?=[A-Z])/).join("-").toLowerCase();
};
var compileStyles = (styles) => {
  return Object.entries(styles).filter(([_, value]) => !!value).map(([key, value]) => `${styleDeclarationKeyToCssString(key)}: ${value}`).join("; ");
};
var updateStyles = (store, styles) => {
  store.update((values) => {
    return {
      ...values,
      ...styles
    };
  });
};

// node_modules/@threlte/extras/dist/components/HTML/HTML.svelte
var { Error: Error_12 } = globals;
var file = "node_modules/@threlte/extras/dist/components/HTML/HTML.svelte";
var get_threlte_slot_changes = (dirty) => ({ ref: dirty[0] & /*ref*/
4 });
var get_threlte_slot_context = (ctx) => ({ ref: (
  /*ref*/
  ctx[2]
) });
function create_default_slot2(ctx) {
  let current;
  const threlte_slot_template = (
    /*#slots*/
    ctx[40].threlte
  );
  const threlte_slot = create_slot(
    threlte_slot_template,
    ctx,
    /*$$scope*/
    ctx[46],
    get_threlte_slot_context
  );
  const block = {
    c: function create() {
      if (threlte_slot) threlte_slot.c();
    },
    l: function claim(nodes) {
      if (threlte_slot) threlte_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (threlte_slot) {
        threlte_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (threlte_slot) {
        if (threlte_slot.p && (!current || dirty[0] & /*ref*/
        4 | dirty[1] & /*$$scope*/
        32768)) {
          update_slot_base(
            threlte_slot,
            threlte_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[46],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[46]
            ) : get_slot_changes(
              threlte_slot_template,
              /*$$scope*/
              ctx2[46],
              dirty,
              get_threlte_slot_changes
            ),
            get_threlte_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(threlte_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(threlte_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (threlte_slot) threlte_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot2.name,
    type: "slot",
    source: "(244:0) <T   is={ref}   {...$$restProps}   let:ref   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let previous_tag = (
    /*as*/
    ctx[1]
  );
  let svelte_element_anchor;
  let current;
  validate_dynamic_element(
    /*as*/
    ctx[1]
  );
  validate_void_dynamic_element(
    /*as*/
    ctx[1]
  );
  let svelte_element = (
    /*as*/
    ctx[1] && create_dynamic_element_1(ctx)
  );
  const block = {
    c: function create() {
      if (svelte_element) svelte_element.c();
      svelte_element_anchor = empty();
    },
    l: function claim(nodes) {
      if (svelte_element) svelte_element.l(nodes);
      svelte_element_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (svelte_element) svelte_element.m(target, anchor);
      insert_hydration_dev(target, svelte_element_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*as*/
        ctx2[1]
      ) {
        if (!previous_tag) {
          svelte_element = create_dynamic_element_1(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else if (safe_not_equal(
          previous_tag,
          /*as*/
          ctx2[1]
        )) {
          svelte_element.d(1);
          validate_dynamic_element(
            /*as*/
            ctx2[1]
          );
          validate_void_dynamic_element(
            /*as*/
            ctx2[1]
          );
          svelte_element = create_dynamic_element_1(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else {
          svelte_element.p(ctx2, dirty);
        }
      } else if (previous_tag) {
        svelte_element.d(1);
        svelte_element = null;
        previous_tag = /*as*/
        ctx2[1];
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(svelte_element, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(svelte_element, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svelte_element_anchor);
      }
      if (svelte_element) svelte_element.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(277:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block2(ctx) {
  let previous_tag = (
    /*as*/
    ctx[1]
  );
  let svelte_element_anchor;
  let current;
  validate_dynamic_element(
    /*as*/
    ctx[1]
  );
  validate_void_dynamic_element(
    /*as*/
    ctx[1]
  );
  let svelte_element = (
    /*as*/
    ctx[1] && create_dynamic_element(ctx)
  );
  const block = {
    c: function create() {
      if (svelte_element) svelte_element.c();
      svelte_element_anchor = empty();
    },
    l: function claim(nodes) {
      if (svelte_element) svelte_element.l(nodes);
      svelte_element_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (svelte_element) svelte_element.m(target, anchor);
      insert_hydration_dev(target, svelte_element_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*as*/
        ctx2[1]
      ) {
        if (!previous_tag) {
          svelte_element = create_dynamic_element(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else if (safe_not_equal(
          previous_tag,
          /*as*/
          ctx2[1]
        )) {
          svelte_element.d(1);
          validate_dynamic_element(
            /*as*/
            ctx2[1]
          );
          validate_void_dynamic_element(
            /*as*/
            ctx2[1]
          );
          svelte_element = create_dynamic_element(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else {
          svelte_element.p(ctx2, dirty);
        }
      } else if (previous_tag) {
        svelte_element.d(1);
        svelte_element = null;
        previous_tag = /*as*/
        ctx2[1];
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(svelte_element, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(svelte_element, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svelte_element_anchor);
      }
      if (svelte_element) svelte_element.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(256:0) {#if transform}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[40].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[46],
    null
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[46],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[46]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[46],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(286:6) {#if showEl}",
    ctx
  });
  return block;
}
function create_dynamic_element_1(ctx) {
  let svelte_element;
  let div;
  let div_style_value;
  let svelte_element_style_value;
  let portalAction_action;
  let buildDefaultNonTransformStyles_action;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*showEl*/
    ctx[6] && create_if_block_2(ctx)
  );
  let svelte_element_levels = [
    {
      style: svelte_element_style_value = compileStyles(
        /*$noTransformElStyles*/
        ctx[11]
      )
    }
  ];
  let svelte_element_data = {};
  for (let i = 0; i < svelte_element_levels.length; i += 1) {
    svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
  }
  const block = {
    c: function create() {
      svelte_element = element(
        /*as*/
        ctx[1]
      );
      div = element("div");
      if (if_block) if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      svelte_element = claim_element(
        nodes,
        /*as*/
        (ctx[1] || "null").toUpperCase(),
        { style: true }
      );
      var svelte_element_nodes = children(svelte_element);
      div = claim_element(svelte_element_nodes, "DIV", { style: true });
      var div_nodes = children(div);
      if (if_block) if_block.l(div_nodes);
      div_nodes.forEach(detach_dev);
      svelte_element_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "style", div_style_value = compileStyles(
        /*$noTransformDivStyles*/
        ctx[12]
      ));
      add_location(div, file, 284, 4, 9459);
      set_dynamic_element_data(
        /*as*/
        ctx[1]
      )(svelte_element, svelte_element_data);
      add_location(svelte_element, file, 277, 2, 9294);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, svelte_element, anchor);
      append_hydration_dev(svelte_element, div);
      if (if_block) if_block.m(div, null);
      ctx[45](svelte_element);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(portalAction_action = /*portalAction*/
          ctx[23].call(null, svelte_element)),
          action_destroyer(buildDefaultNonTransformStyles_action = /*buildDefaultNonTransformStyles*/
          ctx[22].call(null, svelte_element))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (
        /*showEl*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*showEl*/
          64) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*$noTransformDivStyles*/
      4096 && div_style_value !== (div_style_value = compileStyles(
        /*$noTransformDivStyles*/
        ctx2[12]
      ))) {
        attr_dev(div, "style", div_style_value);
      }
      set_dynamic_element_data(
        /*as*/
        ctx2[1]
      )(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
        (!current || dirty[0] & /*$noTransformElStyles*/
        2048 && svelte_element_style_value !== (svelte_element_style_value = compileStyles(
          /*$noTransformElStyles*/
          ctx2[11]
        ))) && { style: svelte_element_style_value }
      ]));
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svelte_element);
      }
      if (if_block) if_block.d();
      ctx[45](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_dynamic_element_1.name,
    type: "child_dynamic_element",
    source: "(278:2) <svelte:element     this={as}     bind:this={el}     use:portalAction     use:buildDefaultNonTransformStyles     style={compileStyles($noTransformElStyles)}   >",
    ctx
  });
  return block;
}
function create_if_block_12(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[40].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[46],
    null
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[46],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[46]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[46],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_12.name,
    type: "if",
    source: "(271:8) {#if showEl}",
    ctx
  });
  return block;
}
function create_dynamic_element(ctx) {
  let svelte_element;
  let div1;
  let div0;
  let div0_style_value;
  let div1_style_value;
  let svelte_element_style_value;
  let portalAction_action;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*showEl*/
    ctx[6] && create_if_block_12(ctx)
  );
  let svelte_element_levels = [
    {
      style: svelte_element_style_value = compileStyles(
        /*$transformElStyles*/
        ctx[8]
      )
    }
  ];
  let svelte_element_data = {};
  for (let i = 0; i < svelte_element_levels.length; i += 1) {
    svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
  }
  const block = {
    c: function create() {
      svelte_element = element(
        /*as*/
        ctx[1]
      );
      div1 = element("div");
      div0 = element("div");
      if (if_block) if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      svelte_element = claim_element(
        nodes,
        /*as*/
        (ctx[1] || "null").toUpperCase(),
        { style: true }
      );
      var svelte_element_nodes = children(svelte_element);
      div1 = claim_element(svelte_element_nodes, "DIV", { style: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { style: true });
      var div0_nodes = children(div0);
      if (if_block) if_block.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      svelte_element_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "style", div0_style_value = compileStyles(
        /*$transformInnerRefStyles*/
        ctx[10]
      ));
      add_location(div0, file, 266, 6, 9079);
      attr_dev(div1, "style", div1_style_value = compileStyles(
        /*$transformOuterRefStyles*/
        ctx[9]
      ));
      add_location(div1, file, 262, 4, 8972);
      set_dynamic_element_data(
        /*as*/
        ctx[1]
      )(svelte_element, svelte_element_data);
      add_location(svelte_element, file, 256, 2, 8848);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, svelte_element, anchor);
      append_hydration_dev(svelte_element, div1);
      append_hydration_dev(div1, div0);
      if (if_block) if_block.m(div0, null);
      ctx[42](div0);
      ctx[43](div1);
      ctx[44](svelte_element);
      current = true;
      if (!mounted) {
        dispose = action_destroyer(portalAction_action = /*portalAction*/
        ctx[23].call(null, svelte_element));
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (
        /*showEl*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*showEl*/
          64) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_12(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div0, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*$transformInnerRefStyles*/
      1024 && div0_style_value !== (div0_style_value = compileStyles(
        /*$transformInnerRefStyles*/
        ctx2[10]
      ))) {
        attr_dev(div0, "style", div0_style_value);
      }
      if (!current || dirty[0] & /*$transformOuterRefStyles*/
      512 && div1_style_value !== (div1_style_value = compileStyles(
        /*$transformOuterRefStyles*/
        ctx2[9]
      ))) {
        attr_dev(div1, "style", div1_style_value);
      }
      set_dynamic_element_data(
        /*as*/
        ctx2[1]
      )(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
        (!current || dirty[0] & /*$transformElStyles*/
        256 && svelte_element_style_value !== (svelte_element_style_value = compileStyles(
          /*$transformElStyles*/
          ctx2[8]
        ))) && { style: svelte_element_style_value }
      ]));
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svelte_element);
      }
      if (if_block) if_block.d();
      ctx[42](null);
      ctx[43](null);
      ctx[44](null);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_dynamic_element.name,
    type: "child_dynamic_element",
    source: "(257:2) <svelte:element     this={as}     use:portalAction     bind:this={el}     style={compileStyles($transformElStyles)}   >",
    ctx
  });
  return block;
}
function create_fragment3(ctx) {
  let t0;
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const t0_spread_levels = [
    { is: (
      /*ref*/
      ctx[2]
    ) },
    /*$$restProps*/
    ctx[25]
  ];
  let t0_props = {
    $$slots: {
      default: [create_default_slot2, ({ ref }) => ({ 2: ref }), ({ ref }) => [ref ? 4 : 0]]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t0_spread_levels.length; i += 1) {
    t0_props = assign(t0_props, t0_spread_levels[i]);
  }
  t0 = new T({ props: t0_props, $$inline: true });
  ctx[41](t0);
  const if_block_creators = [create_if_block2, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*transform*/
      ctx2[0]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t0_changes = dirty[0] & /*ref, $$restProps*/
      33554436 ? get_spread_update(t0_spread_levels, [
        dirty[0] & /*ref*/
        4 && { is: (
          /*ref*/
          ctx2[2]
        ) },
        dirty[0] & /*$$restProps*/
        33554432 && get_spread_object(
          /*$$restProps*/
          ctx2[25]
        )
      ]) : {};
      if (dirty[0] & /*ref*/
      4 | dirty[1] & /*$$scope*/
      32768) {
        t0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t0.$set(t0_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
        detach_dev(if_block_anchor);
      }
      ctx[41](null);
      destroy_component(t0, detaching);
      if_blocks[current_block_type_index].d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "transform",
    "calculatePosition",
    "eps",
    "occlude",
    "zIndexRange",
    "sprite",
    "pointerEvents",
    "center",
    "fullscreen",
    "distanceFactor",
    "as",
    "portal",
    "ref",
    "visible"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $size;
  let $camera;
  let $heightHalf;
  let $widthHalf;
  let $component;
  let $transformElStyles;
  let $transformOuterRefStyles;
  let $transformInnerRefStyles;
  let $noTransformElStyles;
  let $noTransformDivStyles;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("HTML", slots, ["threlte", "default"]);
  let { transform = false } = $$props;
  let { calculatePosition = defaultCalculatePosition } = $$props;
  let { eps: eps2 = 1e-3 } = $$props;
  let { occlude = false } = $$props;
  let { zIndexRange = [16777271, 0] } = $$props;
  let { sprite = false } = $$props;
  let { pointerEvents = "auto" } = $$props;
  let { center = false } = $$props;
  let { fullscreen = false } = $$props;
  let { distanceFactor = void 0 } = $$props;
  let { as = "div" } = $$props;
  let { portal = void 0 } = $$props;
  const dispatch = createRawEventDispatcher();
  let { ref = new Group() } = $$props;
  const { renderer, camera, scene, size } = useThrelte();
  validate_store(camera, "camera");
  component_subscribe($$self, camera, (value) => $$invalidate(50, $camera = value));
  validate_store(size, "size");
  component_subscribe($$self, size, (value) => $$invalidate(37, $size = value));
  const isViableCamera = (c) => {
    return c.isPerspectiveCamera || c.isOrthographicCamera;
  };
  const getCamera = () => {
    if (!isViableCamera($camera)) {
      throw new Error("Only PerspectiveCamera or OrthographicCamera supported for component <HTML>");
    }
    return $camera;
  };
  const raycaster = new Raycaster();
  let oldPosition = [0, 0];
  let oldZoom = 0;
  let { visible = true } = $$props;
  let el = document.createElement(as);
  let transformOuterRef;
  let transformInnerRef;
  const { hasEventListeners } = useHasEventListeners();
  let raytraceTarget = typeof occlude === "boolean" && occlude === true ? [scene] : Array.isArray(occlude) ? occlude : void 0;
  const widthHalf = derived(size, (size2) => size2.width / 2);
  validate_store(widthHalf, "widthHalf");
  component_subscribe($$self, widthHalf, (value) => $$invalidate(39, $widthHalf = value));
  const heightHalf = derived(size, (size2) => size2.height / 2);
  validate_store(heightHalf, "heightHalf");
  component_subscribe($$self, heightHalf, (value) => $$invalidate(38, $heightHalf = value));
  let styles = {
    common: { el: writable({}) },
    transform: {
      el: writable({
        position: "absolute",
        top: "0",
        left: "0",
        pointerEvents: "none",
        overflow: "hidden",
        display: "block",
        width: `${$size.width}px`,
        height: `${$size.height}px`
      }),
      outerRef: writable({
        position: "absolute",
        top: "0",
        left: "0",
        width: `${$size.width}px`,
        height: `${$size.height}px`,
        transformStyle: "preserve-3d",
        pointerEvents: "none"
      }),
      innerRef: writable({ position: "absolute", pointerEvents })
    },
    noTransform: {
      el: writable({}),
      div: writable({
        position: "absolute",
        transform: center ? "translate3d(-50%,-50%,0)" : "none",
        top: fullscreen ? `${-$heightHalf}px` : void 0,
        left: fullscreen ? `${-$widthHalf}px` : void 0,
        width: fullscreen ? `${$size.width}px` : void 0,
        height: fullscreen ? `${$size.height}px` : void 0
      })
    }
  };
  const transformElStyles = derived([styles.transform.el, styles.common.el], ([vA, vB]) => {
    return { ...vA, ...vB };
  });
  validate_store(transformElStyles, "transformElStyles");
  component_subscribe($$self, transformElStyles, (value) => $$invalidate(8, $transformElStyles = value));
  const transformOuterRefStyles = derived(styles.transform.outerRef, (v) => v);
  validate_store(transformOuterRefStyles, "transformOuterRefStyles");
  component_subscribe($$self, transformOuterRefStyles, (value) => $$invalidate(9, $transformOuterRefStyles = value));
  const transformInnerRefStyles = derived(styles.transform.innerRef, (v) => v);
  validate_store(transformInnerRefStyles, "transformInnerRefStyles");
  component_subscribe($$self, transformInnerRefStyles, (value) => $$invalidate(10, $transformInnerRefStyles = value));
  const noTransformElStyles = derived(styles.noTransform.el, (v) => v);
  validate_store(noTransformElStyles, "noTransformElStyles");
  component_subscribe($$self, noTransformElStyles, (value) => $$invalidate(11, $noTransformElStyles = value));
  const noTransformDivStyles = derived(styles.noTransform.div, (v) => v);
  validate_store(noTransformDivStyles, "noTransformDivStyles");
  component_subscribe($$self, noTransformDivStyles, (value) => $$invalidate(12, $noTransformDivStyles = value));
  const getAncestorVisibility = () => {
    let ancestorsAreVisible = true;
    let parent = ref.parent;
    traverse: while (parent) {
      if ("visible" in parent && !parent.visible) {
        ancestorsAreVisible = false;
        break traverse;
      }
      parent = parent.parent;
    }
    return ancestorsAreVisible;
  };
  let showEl = getAncestorVisibility();
  useTask(async () => {
    $$invalidate(6, showEl = getAncestorVisibility());
    const camera2 = getCamera();
    camera2.updateMatrixWorld();
    ref.updateWorldMatrix(true, false);
    const vec = transform ? oldPosition : calculatePosition(ref, camera2, $size);
    if (transform || Math.abs(oldZoom - camera2.zoom) > eps2 || Math.abs(oldPosition[0] - vec[0]) > eps2 || Math.abs(oldPosition[1] - vec[1]) > eps2) {
      const isBehindCamera = isObjectBehindCamera(ref, camera2);
      const previouslyVisible = visible;
      if (raytraceTarget) {
        const isvisible = isObjectVisible(ref, camera2, raycaster, raytraceTarget);
        $$invalidate(26, visible = isvisible && !isBehindCamera);
      } else {
        $$invalidate(26, visible = !isBehindCamera);
      }
      if (previouslyVisible !== visible) {
        if (hasEventListeners("visibilitychange")) dispatch("visibilitychange", visible);
        else {
          updateStyles(styles.common.el, { display: visible ? "block" : "none" });
        }
      }
      updateStyles(styles.common.el, {
        zIndex: `${objectZIndex(ref, camera2, zIndexRange)}`
      });
      if (transform) {
        const fov = camera2.projectionMatrix.elements[5] * $heightHalf;
        const { isOrthographicCamera: isOrthographicCamera2, top, left, bottom, right } = camera2;
        let matrix = ref.matrixWorld;
        if (sprite) {
          matrix = camera2.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(ref.scale);
          matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;
          matrix.elements[15] = 1;
        }
        updateStyles(styles.transform.el, {
          perspective: isOrthographicCamera2 ? "" : `${fov}px`
        });
        if (transformOuterRef && transformInnerRef) {
          const cameraTransform = isOrthographicCamera2 ? `scale(${fov}) translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;
          const cameraMatrix = getCameraCSSMatrix(camera2.matrixWorldInverse);
          updateStyles(styles.transform.outerRef, {
            transform: `${cameraTransform}${cameraMatrix}translate(${$widthHalf}px, ${$heightHalf}px)`
          });
          updateStyles(styles.transform.innerRef, {
            transform: getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400))
          });
        }
      } else {
        const scale = distanceFactor === void 0 ? 1 : objectScale(ref, camera2) * distanceFactor;
        updateStyles(styles.noTransform.el, {
          transform: `translate3d(${vec[0]}px, ${vec[1]}px, 0) scale(${scale})`
        });
      }
      oldPosition = vec;
      oldZoom = camera2.zoom;
    }
  });
  const buildDefaultNonTransformStyles = (_) => {
    if (!ref || transform) return;
    scene.updateMatrixWorld();
    const vec = calculatePosition(ref, $camera, $size);
    updateStyles(styles.noTransform.el, {
      position: "absolute",
      top: "0",
      left: "0",
      transform: `translate3d(${vec[0]}px, ${vec[1]}px, 0)`,
      transformOrigin: "0 0"
    });
  };
  const portalAction = (el2) => {
    const target = portal ?? renderer.domElement.parentElement;
    if (!target) {
      console.warn("HTML: target is undefined.");
      return;
    }
    target.appendChild(el2);
    return {
      destroy: () => {
        if (!el2.parentNode) return;
        el2.parentNode.removeChild(el2);
      }
    };
  };
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(7, $component = value));
  function t0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      transformInnerRef = $$value;
      $$invalidate(5, transformInnerRef);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      transformOuterRef = $$value;
      $$invalidate(4, transformOuterRef);
    });
  }
  function svelte_element_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  function svelte_element_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("transform" in $$new_props) $$invalidate(0, transform = $$new_props.transform);
    if ("calculatePosition" in $$new_props) $$invalidate(27, calculatePosition = $$new_props.calculatePosition);
    if ("eps" in $$new_props) $$invalidate(28, eps2 = $$new_props.eps);
    if ("occlude" in $$new_props) $$invalidate(29, occlude = $$new_props.occlude);
    if ("zIndexRange" in $$new_props) $$invalidate(30, zIndexRange = $$new_props.zIndexRange);
    if ("sprite" in $$new_props) $$invalidate(31, sprite = $$new_props.sprite);
    if ("pointerEvents" in $$new_props) $$invalidate(32, pointerEvents = $$new_props.pointerEvents);
    if ("center" in $$new_props) $$invalidate(33, center = $$new_props.center);
    if ("fullscreen" in $$new_props) $$invalidate(34, fullscreen = $$new_props.fullscreen);
    if ("distanceFactor" in $$new_props) $$invalidate(35, distanceFactor = $$new_props.distanceFactor);
    if ("as" in $$new_props) $$invalidate(1, as = $$new_props.as);
    if ("portal" in $$new_props) $$invalidate(36, portal = $$new_props.portal);
    if ("ref" in $$new_props) $$invalidate(2, ref = $$new_props.ref);
    if ("visible" in $$new_props) $$invalidate(26, visible = $$new_props.visible);
    if ("$$scope" in $$new_props) $$invalidate(46, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    createRawEventDispatcher,
    forwardEventHandlers,
    T,
    useTask,
    useThrelte,
    derived,
    writable,
    Group,
    ThreeeObject3D: Object3D,
    OrthographicCamera,
    PerspectiveCamera,
    Raycaster,
    useHasEventListeners,
    compileStyles,
    defaultCalculatePosition,
    epsilon,
    getCameraCSSMatrix,
    getObjectCSSMatrix,
    isObjectBehindCamera,
    isObjectVisible,
    objectScale,
    objectZIndex,
    updateStyles,
    transform,
    calculatePosition,
    eps: eps2,
    occlude,
    zIndexRange,
    sprite,
    pointerEvents,
    center,
    fullscreen,
    distanceFactor,
    as,
    portal,
    dispatch,
    ref,
    renderer,
    camera,
    scene,
    size,
    isViableCamera,
    getCamera,
    raycaster,
    oldPosition,
    oldZoom,
    visible,
    el,
    transformOuterRef,
    transformInnerRef,
    hasEventListeners,
    raytraceTarget,
    widthHalf,
    heightHalf,
    styles,
    transformElStyles,
    transformOuterRefStyles,
    transformInnerRefStyles,
    noTransformElStyles,
    noTransformDivStyles,
    getAncestorVisibility,
    showEl,
    buildDefaultNonTransformStyles,
    portalAction,
    component,
    $size,
    $camera,
    $heightHalf,
    $widthHalf,
    $component,
    $transformElStyles,
    $transformOuterRefStyles,
    $transformInnerRefStyles,
    $noTransformElStyles,
    $noTransformDivStyles
  });
  $$self.$inject_state = ($$new_props) => {
    if ("transform" in $$props) $$invalidate(0, transform = $$new_props.transform);
    if ("calculatePosition" in $$props) $$invalidate(27, calculatePosition = $$new_props.calculatePosition);
    if ("eps" in $$props) $$invalidate(28, eps2 = $$new_props.eps);
    if ("occlude" in $$props) $$invalidate(29, occlude = $$new_props.occlude);
    if ("zIndexRange" in $$props) $$invalidate(30, zIndexRange = $$new_props.zIndexRange);
    if ("sprite" in $$props) $$invalidate(31, sprite = $$new_props.sprite);
    if ("pointerEvents" in $$props) $$invalidate(32, pointerEvents = $$new_props.pointerEvents);
    if ("center" in $$props) $$invalidate(33, center = $$new_props.center);
    if ("fullscreen" in $$props) $$invalidate(34, fullscreen = $$new_props.fullscreen);
    if ("distanceFactor" in $$props) $$invalidate(35, distanceFactor = $$new_props.distanceFactor);
    if ("as" in $$props) $$invalidate(1, as = $$new_props.as);
    if ("portal" in $$props) $$invalidate(36, portal = $$new_props.portal);
    if ("ref" in $$props) $$invalidate(2, ref = $$new_props.ref);
    if ("oldPosition" in $$props) oldPosition = $$new_props.oldPosition;
    if ("oldZoom" in $$props) oldZoom = $$new_props.oldZoom;
    if ("visible" in $$props) $$invalidate(26, visible = $$new_props.visible);
    if ("el" in $$props) $$invalidate(3, el = $$new_props.el);
    if ("transformOuterRef" in $$props) $$invalidate(4, transformOuterRef = $$new_props.transformOuterRef);
    if ("transformInnerRef" in $$props) $$invalidate(5, transformInnerRef = $$new_props.transformInnerRef);
    if ("raytraceTarget" in $$props) raytraceTarget = $$new_props.raytraceTarget;
    if ("styles" in $$props) $$invalidate(58, styles = $$new_props.styles);
    if ("showEl" in $$props) $$invalidate(6, showEl = $$new_props.showEl);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*occlude*/
    536870912) {
      $: raytraceTarget = typeof occlude === "boolean" && occlude === true ? [scene] : Array.isArray(occlude) ? occlude : void 0;
    }
    if ($$self.$$.dirty[1] & /*$size*/
    64) {
      $: updateStyles(styles.transform.el, {
        width: `${$size.width}px`,
        height: `${$size.height}px`
      });
    }
    if ($$self.$$.dirty[1] & /*$size*/
    64) {
      $: updateStyles(styles.transform.outerRef, {
        width: `${$size.width}px`,
        height: `${$size.height}px`
      });
    }
    if ($$self.$$.dirty[1] & /*pointerEvents*/
    2) {
      $: updateStyles(styles.transform.innerRef, { pointerEvents });
    }
    if ($$self.$$.dirty[1] & /*pointerEvents*/
    2) {
      $: updateStyles(styles.noTransform.div, { pointerEvents });
    }
    if ($$self.$$.dirty[1] & /*center*/
    4) {
      $: updateStyles(styles.noTransform.div, {
        transform: center ? "translate3d(-50%, -50%, 0)" : "none"
      });
    }
    if ($$self.$$.dirty[1] & /*fullscreen, $heightHalf, $widthHalf, $size*/
    456) {
      $: updateStyles(styles.noTransform.div, {
        top: fullscreen ? `${-$heightHalf}px` : void 0,
        left: fullscreen ? `${-$widthHalf}px` : void 0,
        width: fullscreen ? `${$size.width}px` : void 0,
        height: fullscreen ? `${$size.height}px` : void 0
      });
    }
  };
  return [
    transform,
    as,
    ref,
    el,
    transformOuterRef,
    transformInnerRef,
    showEl,
    $component,
    $transformElStyles,
    $transformOuterRefStyles,
    $transformInnerRefStyles,
    $noTransformElStyles,
    $noTransformDivStyles,
    camera,
    size,
    widthHalf,
    heightHalf,
    transformElStyles,
    transformOuterRefStyles,
    transformInnerRefStyles,
    noTransformElStyles,
    noTransformDivStyles,
    buildDefaultNonTransformStyles,
    portalAction,
    component,
    $$restProps,
    visible,
    calculatePosition,
    eps2,
    occlude,
    zIndexRange,
    sprite,
    pointerEvents,
    center,
    fullscreen,
    distanceFactor,
    portal,
    $size,
    $heightHalf,
    $widthHalf,
    slots,
    t0_binding,
    div0_binding,
    div1_binding,
    svelte_element_binding,
    svelte_element_binding_1,
    $$scope
  ];
}
var HTML = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance3,
      create_fragment3,
      safe_not_equal,
      {
        transform: 0,
        calculatePosition: 27,
        eps: 28,
        occlude: 29,
        zIndexRange: 30,
        sprite: 31,
        pointerEvents: 32,
        center: 33,
        fullscreen: 34,
        distanceFactor: 35,
        as: 1,
        portal: 36,
        ref: 2,
        visible: 26
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "HTML",
      options,
      id: create_fragment3.name
    });
  }
  get transform() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transform(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get calculatePosition() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set calculatePosition(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get eps() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set eps(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get occlude() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set occlude(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndexRange() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndexRange(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sprite() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sprite(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get center() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set center(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fullscreen() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fullscreen(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get distanceFactor() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set distanceFactor(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get as() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set as(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get portal() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set portal(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get visible() {
    throw new Error_12("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set visible(value) {
    throw new Error_12("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var HTML_default = HTML;

// node_modules/@threlte/extras/dist/components/Float/Float.svelte
var get_default_slot_changes2 = (dirty) => ({ ref: dirty & /*ref*/
32768 });
var get_default_slot_context2 = (ctx) => ({ ref: (
  /*ref*/
  ctx[15]
) });
function create_default_slot3(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    get_default_slot_context2
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        36864)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              get_default_slot_changes2
            ),
            get_default_slot_context2
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot3.name,
    type: "slot",
    source: "(54:0) <T.Group   position={floatPosition}   rotation={floatRotation}   let:ref   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment4(ctx) {
  let t_group;
  let current;
  const t_group_spread_levels = [
    { position: (
      /*floatPosition*/
      ctx[0]
    ) },
    { rotation: (
      /*floatRotation*/
      ctx[1]
    ) },
    /*$$restProps*/
    ctx[2]
  ];
  let t_group_props = {
    $$slots: {
      default: [
        create_default_slot3,
        ({ ref }) => ({ 15: ref }),
        ({ ref }) => ref ? 32768 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_group_spread_levels.length; i += 1) {
    t_group_props = assign(t_group_props, t_group_spread_levels[i]);
  }
  t_group = new T.Group({ props: t_group_props, $$inline: true });
  const block = {
    c: function create() {
      create_component(t_group.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_group.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_group, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_group_changes = dirty & /*floatPosition, floatRotation, $$restProps*/
      7 ? get_spread_update(t_group_spread_levels, [
        dirty & /*floatPosition*/
        1 && { position: (
          /*floatPosition*/
          ctx2[0]
        ) },
        dirty & /*floatRotation*/
        2 && { rotation: (
          /*floatRotation*/
          ctx2[1]
        ) },
        dirty & /*$$restProps*/
        4 && get_spread_object(
          /*$$restProps*/
          ctx2[2]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      36864) {
        t_group_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_group.$set(t_group_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_group.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_group.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_group, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance4($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "position",
    "rotation",
    "speed",
    "floatIntensity",
    "floatingRange",
    "rotationSpeed",
    "rotationIntensity",
    "seed"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Float", slots, ["default"]);
  let { position = 0 } = $$props;
  let { rotation = 0 } = $$props;
  let { speed = 1 } = $$props;
  let { floatIntensity = 1 } = $$props;
  let { floatingRange = [-0.1, 0.1] } = $$props;
  let { rotationSpeed = 0 } = $$props;
  let { rotationIntensity = 0 } = $$props;
  let { seed = Math.random() * 1e4 } = $$props;
  let t = seed;
  let floatPosition = Array.isArray(position) ? position : [position, position, position];
  const map = MathUtils.mapLinear;
  let floatRotation = Array.isArray(rotation) ? rotation : [rotation, rotation, rotation];
  useTask((delta) => {
    t += delta;
    const fSpeed = Array.isArray(speed) ? speed : [speed, speed, speed];
    const fIntensity = Array.isArray(floatIntensity) ? floatIntensity : [floatIntensity, floatIntensity, floatIntensity];
    const fRange = floatingRange.length == 3 ? floatingRange : [[0, 0], floatingRange, [0, 0]];
    $$invalidate(0, floatPosition = Array.isArray(position) ? position : [position, position, position]);
    $$invalidate(0, floatPosition[0] = floatPosition[0] + map(Math.sin(t / 4 * fSpeed[0]) / 10, -0.1, 0.1, ...fRange[0]) * fIntensity[0], floatPosition);
    $$invalidate(0, floatPosition[1] = floatPosition[1] + map(Math.sin(t / 4 * fSpeed[1]) / 10, -0.1, 0.1, ...fRange[1]) * fIntensity[1], floatPosition);
    $$invalidate(0, floatPosition[2] = floatPosition[2] + map(Math.sin(t / 4 * fSpeed[2]) / 10, -0.1, 0.1, ...fRange[2]) * fIntensity[2], floatPosition);
    $$invalidate(0, floatPosition);
    const rSpeed = Array.isArray(rotationSpeed) ? rotationSpeed : [rotationSpeed, rotationSpeed, rotationSpeed];
    const rIntensity = Array.isArray(rotationIntensity) ? rotationIntensity : [rotationIntensity, rotationIntensity, rotationIntensity];
    $$invalidate(1, floatRotation = Array.isArray(rotation) ? rotation : [rotation, rotation, rotation]);
    $$invalidate(1, floatRotation[0] += Math.cos(t / 4 * rSpeed[0]) / 8 * rIntensity[0], floatRotation);
    $$invalidate(1, floatRotation[1] += Math.cos(t / 4 * rSpeed[1]) / 8 * rIntensity[1], floatRotation);
    $$invalidate(1, floatRotation[2] += Math.cos(t / 4 * rSpeed[2]) / 8 * rIntensity[2], floatRotation);
  });
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("position" in $$new_props) $$invalidate(3, position = $$new_props.position);
    if ("rotation" in $$new_props) $$invalidate(4, rotation = $$new_props.rotation);
    if ("speed" in $$new_props) $$invalidate(5, speed = $$new_props.speed);
    if ("floatIntensity" in $$new_props) $$invalidate(6, floatIntensity = $$new_props.floatIntensity);
    if ("floatingRange" in $$new_props) $$invalidate(7, floatingRange = $$new_props.floatingRange);
    if ("rotationSpeed" in $$new_props) $$invalidate(8, rotationSpeed = $$new_props.rotationSpeed);
    if ("rotationIntensity" in $$new_props) $$invalidate(9, rotationIntensity = $$new_props.rotationIntensity);
    if ("seed" in $$new_props) $$invalidate(10, seed = $$new_props.seed);
    if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MathUtils,
    useTask,
    T,
    position,
    rotation,
    speed,
    floatIntensity,
    floatingRange,
    rotationSpeed,
    rotationIntensity,
    seed,
    t,
    floatPosition,
    map,
    floatRotation
  });
  $$self.$inject_state = ($$new_props) => {
    if ("position" in $$props) $$invalidate(3, position = $$new_props.position);
    if ("rotation" in $$props) $$invalidate(4, rotation = $$new_props.rotation);
    if ("speed" in $$props) $$invalidate(5, speed = $$new_props.speed);
    if ("floatIntensity" in $$props) $$invalidate(6, floatIntensity = $$new_props.floatIntensity);
    if ("floatingRange" in $$props) $$invalidate(7, floatingRange = $$new_props.floatingRange);
    if ("rotationSpeed" in $$props) $$invalidate(8, rotationSpeed = $$new_props.rotationSpeed);
    if ("rotationIntensity" in $$props) $$invalidate(9, rotationIntensity = $$new_props.rotationIntensity);
    if ("seed" in $$props) $$invalidate(10, seed = $$new_props.seed);
    if ("t" in $$props) t = $$new_props.t;
    if ("floatPosition" in $$props) $$invalidate(0, floatPosition = $$new_props.floatPosition);
    if ("floatRotation" in $$props) $$invalidate(1, floatRotation = $$new_props.floatRotation);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    floatPosition,
    floatRotation,
    $$restProps,
    position,
    rotation,
    speed,
    floatIntensity,
    floatingRange,
    rotationSpeed,
    rotationIntensity,
    seed,
    slots,
    $$scope
  ];
}
var Float = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance4, create_fragment4, safe_not_equal, {
      position: 3,
      rotation: 4,
      speed: 5,
      floatIntensity: 6,
      floatingRange: 7,
      rotationSpeed: 8,
      rotationIntensity: 9,
      seed: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Float",
      options,
      id: create_fragment4.name
    });
  }
  get position() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set position(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rotation() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rotation(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get speed() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set speed(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get floatIntensity() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set floatIntensity(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get floatingRange() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set floatingRange(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rotationSpeed() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rotationSpeed(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rotationIntensity() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rotationIntensity(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get seed() {
    throw new Error("<Float>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set seed(value) {
    throw new Error("<Float>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Float_default = Float;

// node_modules/@threlte/extras/dist/components/GLTF/GLTF.svelte
var { console: console_12 } = globals;
var get_default_slot_changes3 = (dirty) => ({ ref: dirty & /*ref*/
67108864 });
var get_default_slot_context3 = (ctx) => ({ ref: (
  /*ref*/
  ctx[26]
) });
function create_if_block3(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*scene*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: {
      default: [
        create_default_slot4,
        ({ ref }) => ({ 26: ref }),
        ({ ref }) => ref ? 67108864 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[18](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = dirty & /*scene, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*scene*/
        1 && { is: (
          /*scene*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      67633152) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[18](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(71:0) {#if scene}",
    ctx
  });
  return block;
}
function create_default_slot4(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[19],
    get_default_slot_context3
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        67633152)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[19],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[19]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[19],
              dirty,
              get_default_slot_changes3
            ),
            get_default_slot_context3
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot4.name,
    type: "slot",
    source: "(72:2) <T     is={scene}     {...$$restProps}     let:ref     bind:this={$component}   >",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*scene*/
    ctx[0] && create_if_block3(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*scene*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*scene*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance5($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "url",
    "useDraco",
    "useMeshopt",
    "ktxTranscoderPath",
    "gltf",
    "scene",
    "animations",
    "asset",
    "cameras",
    "scenes",
    "userData",
    "parser",
    "materials",
    "nodes"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("GLTF", slots, ["default"]);
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  let { url } = $$props;
  let { useDraco = false } = $$props;
  let { useMeshopt = false } = $$props;
  let { ktxTranscoderPath = void 0 } = $$props;
  const dispatch = createRawEventDispatcher();
  let { gltf = void 0 } = $$props;
  let { scene = void 0 } = $$props;
  let { animations = void 0 } = $$props;
  let { asset = void 0 } = $$props;
  let { cameras = void 0 } = $$props;
  let { scenes = void 0 } = $$props;
  let { userData = void 0 } = $$props;
  let { parser = void 0 } = $$props;
  let { materials = void 0 } = $$props;
  let { nodes = void 0 } = $$props;
  const loader = useGltf({
    useDraco: useDraco ? typeof useDraco === "string" ? useDraco : "https://www.gstatic.com/draco/v1/decoders/" : void 0,
    useMeshopt,
    ktxTranscoderPath
  });
  const onLoad = (data) => {
    if (gltf) dispatch("unload");
    $$invalidate(4, gltf = data);
    $$invalidate(0, scene = data.scene);
    $$invalidate(5, animations = data.animations);
    $$invalidate(6, asset = data.asset);
    $$invalidate(7, cameras = data.cameras);
    $$invalidate(8, scenes = data.scenes);
    $$invalidate(9, userData = data.userData);
    $$invalidate(10, parser = data.parser);
    $$invalidate(11, materials = data.materials);
    $$invalidate(12, nodes = data.nodes);
    dispatch("load", gltf);
  };
  const onError = (error) => {
    console.error(`Error loading GLTF: ${error.message}`);
    $$invalidate(4, gltf = void 0);
    $$invalidate(0, scene = void 0);
    $$invalidate(5, animations = void 0);
    $$invalidate(6, asset = void 0);
    $$invalidate(7, cameras = void 0);
    $$invalidate(8, scenes = void 0);
    $$invalidate(9, userData = void 0);
    $$invalidate(10, parser = void 0);
    $$invalidate(12, nodes = void 0);
    $$invalidate(11, materials = void 0);
    dispatch("error", error.message);
  };
  const suspend = useSuspense();
  const loadGltf = async (url2) => {
    try {
      const model = await suspend(loader.load(url2));
      onLoad(model);
    } catch (error) {
      onError(error);
    }
  };
  $$self.$$.on_mount.push(function() {
    if (url === void 0 && !("url" in $$props || $$self.$$.bound[$$self.$$.props["url"]])) {
      console_12.warn("<GLTF> was created without expected prop 'url'");
    }
  });
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("url" in $$new_props) $$invalidate(13, url = $$new_props.url);
    if ("useDraco" in $$new_props) $$invalidate(14, useDraco = $$new_props.useDraco);
    if ("useMeshopt" in $$new_props) $$invalidate(15, useMeshopt = $$new_props.useMeshopt);
    if ("ktxTranscoderPath" in $$new_props) $$invalidate(16, ktxTranscoderPath = $$new_props.ktxTranscoderPath);
    if ("gltf" in $$new_props) $$invalidate(4, gltf = $$new_props.gltf);
    if ("scene" in $$new_props) $$invalidate(0, scene = $$new_props.scene);
    if ("animations" in $$new_props) $$invalidate(5, animations = $$new_props.animations);
    if ("asset" in $$new_props) $$invalidate(6, asset = $$new_props.asset);
    if ("cameras" in $$new_props) $$invalidate(7, cameras = $$new_props.cameras);
    if ("scenes" in $$new_props) $$invalidate(8, scenes = $$new_props.scenes);
    if ("userData" in $$new_props) $$invalidate(9, userData = $$new_props.userData);
    if ("parser" in $$new_props) $$invalidate(10, parser = $$new_props.parser);
    if ("materials" in $$new_props) $$invalidate(11, materials = $$new_props.materials);
    if ("nodes" in $$new_props) $$invalidate(12, nodes = $$new_props.nodes);
    if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    createRawEventDispatcher,
    forwardEventHandlers,
    T,
    useGltf,
    useSuspense,
    component,
    url,
    useDraco,
    useMeshopt,
    ktxTranscoderPath,
    dispatch,
    gltf,
    scene,
    animations,
    asset,
    cameras,
    scenes,
    userData,
    parser,
    materials,
    nodes,
    loader,
    onLoad,
    onError,
    suspend,
    loadGltf,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("url" in $$props) $$invalidate(13, url = $$new_props.url);
    if ("useDraco" in $$props) $$invalidate(14, useDraco = $$new_props.useDraco);
    if ("useMeshopt" in $$props) $$invalidate(15, useMeshopt = $$new_props.useMeshopt);
    if ("ktxTranscoderPath" in $$props) $$invalidate(16, ktxTranscoderPath = $$new_props.ktxTranscoderPath);
    if ("gltf" in $$props) $$invalidate(4, gltf = $$new_props.gltf);
    if ("scene" in $$props) $$invalidate(0, scene = $$new_props.scene);
    if ("animations" in $$props) $$invalidate(5, animations = $$new_props.animations);
    if ("asset" in $$props) $$invalidate(6, asset = $$new_props.asset);
    if ("cameras" in $$props) $$invalidate(7, cameras = $$new_props.cameras);
    if ("scenes" in $$props) $$invalidate(8, scenes = $$new_props.scenes);
    if ("userData" in $$props) $$invalidate(9, userData = $$new_props.userData);
    if ("parser" in $$props) $$invalidate(10, parser = $$new_props.parser);
    if ("materials" in $$props) $$invalidate(11, materials = $$new_props.materials);
    if ("nodes" in $$props) $$invalidate(12, nodes = $$new_props.nodes);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*url*/
    8192) {
      $: loadGltf(url);
    }
  };
  return [
    scene,
    $component,
    component,
    $$restProps,
    gltf,
    animations,
    asset,
    cameras,
    scenes,
    userData,
    parser,
    materials,
    nodes,
    url,
    useDraco,
    useMeshopt,
    ktxTranscoderPath,
    slots,
    t_binding,
    $$scope
  ];
}
var GLTF = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance5, create_fragment5, safe_not_equal, {
      url: 13,
      useDraco: 14,
      useMeshopt: 15,
      ktxTranscoderPath: 16,
      gltf: 4,
      scene: 0,
      animations: 5,
      asset: 6,
      cameras: 7,
      scenes: 8,
      userData: 9,
      parser: 10,
      materials: 11,
      nodes: 12
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "GLTF",
      options,
      id: create_fragment5.name
    });
  }
  get url() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set url(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get useDraco() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set useDraco(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get useMeshopt() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set useMeshopt(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ktxTranscoderPath() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ktxTranscoderPath(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get gltf() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set gltf(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scene() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scene(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animations() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animations(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get asset() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set asset(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get cameras() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cameras(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scenes() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scenes(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get userData() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set userData(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get parser() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set parser(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get materials() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set materials(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get nodes() {
    throw new Error("<GLTF>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set nodes(value) {
    throw new Error("<GLTF>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var GLTF_default = GLTF;

// node_modules/@threlte/extras/dist/components/Gizmo/Gizmo.svelte
function get_context(ctx) {
  const constants_0 = -20;
  ctx[57] = constants_0;
}
function create_default_slot_10(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*xColor*/
          ctx[0],
          "X"
        )
      ),
      opacity: (
        /*p*/
        ctx[3][0] >= 0 ? 1 : 0.5
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, xColor*/
      4097) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*xColor*/
        ctx2[0],
        "X"
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][0] >= 0 ? 1 : 0.5;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_10.name,
    type: "slot",
    source: "(244:4) <T.Sprite       renderOrder={1}       bind:ref={posX}       position.x={1}       userData.targetPosition={[1, 0, 0]}       userData.targetEuler={[0, Math.PI * 0.5, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_9(ctx) {
  let t0;
  let t1;
  let t_meshbasicmaterial;
  let current;
  t0 = new T({
    props: { is: (
      /*stemGeometry*/
      ctx[15]
    ) },
    $$inline: true
  });
  t_meshbasicmaterial = new T.MeshBasicMaterial({
    props: {
      transparent: true,
      opacity: (
        /*p*/
        ctx[3][0] >= 0 ? 1 : 0.5
      ),
      color: (
        /*xColor*/
        ctx[0]
      ),
      polygonOffset: (
        /*usePolygonOffset*/
        ctx[10] && /*frontMostAxisIndex*/
        ctx[11] === 0 && /*p*/
        ctx[3][0] < 0.75
      ),
      polygonOffsetFactor: (
        /*polygonOffsetFactor*/
        ctx[57]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      create_component(t_meshbasicmaterial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_meshbasicmaterial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_meshbasicmaterial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_meshbasicmaterial_changes = {};
      if (dirty[0] & /*p*/
      8) t_meshbasicmaterial_changes.opacity = /*p*/
      ctx2[3][0] >= 0 ? 1 : 0.5;
      if (dirty[0] & /*xColor*/
      1) t_meshbasicmaterial_changes.color = /*xColor*/
      ctx2[0];
      if (dirty[0] & /*usePolygonOffset, frontMostAxisIndex, p*/
      3080) t_meshbasicmaterial_changes.polygonOffset = /*usePolygonOffset*/
      ctx2[10] && /*frontMostAxisIndex*/
      ctx2[11] === 0 && /*p*/
      ctx2[3][0] < 0.75;
      t_meshbasicmaterial.$set(t_meshbasicmaterial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(t_meshbasicmaterial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(t_meshbasicmaterial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
      }
      destroy_component(t0, detaching);
      destroy_component(t_meshbasicmaterial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_9.name,
    type: "slot",
    source: "(257:4) <T.Mesh       position.x={0.39}       renderOrder={frontMostAxisIndex === 0 ? -1 : 0}     >",
    ctx
  });
  return block;
}
function create_default_slot_8(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*xColor*/
          ctx[0]
        )
      ),
      opacity: (
        /*p*/
        ctx[3][0] >= 0 ? 0.5 : 1
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, xColor*/
      4097) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*xColor*/
        ctx2[0]
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][0] >= 0 ? 0.5 : 1;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_8.name,
    type: "slot",
    source: "(271:4) <T.Sprite       renderOrder={1}       bind:ref={negX}       position.x={-1}       scale={0.8}       userData.targetPosition={[-1, 0, 0]}       userData.targetEuler={[0, -Math.PI * 0.5, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_7(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*yColor*/
          ctx[1],
          "Y"
        )
      ),
      opacity: (
        /*p*/
        ctx[3][1] >= 0 ? 1 : 0.5
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, yColor*/
      4098) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*yColor*/
        ctx2[1],
        "Y"
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][1] >= 0 ? 1 : 0.5;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_7.name,
    type: "slot",
    source: "(286:4) <T.Sprite       renderOrder={1}       bind:ref={posY}       position.y={1}       userData.targetPosition={[0, 1, 0]}       userData.targetEuler={[-Math.PI * 0.5, 0, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_6(ctx) {
  let t0;
  let t1;
  let t_meshbasicmaterial;
  let current;
  t0 = new T({
    props: { is: (
      /*stemGeometry*/
      ctx[15]
    ) },
    $$inline: true
  });
  t_meshbasicmaterial = new T.MeshBasicMaterial({
    props: {
      transparent: true,
      opacity: (
        /*p*/
        ctx[3][1] >= 0 ? 1 : 0.5
      ),
      color: (
        /*yColor*/
        ctx[1]
      ),
      polygonOffset: (
        /*usePolygonOffset*/
        ctx[10] && /*frontMostAxisIndex*/
        ctx[11] === 1 && /*p*/
        ctx[3][1] < 0.75
      ),
      polygonOffsetFactor: (
        /*polygonOffsetFactor*/
        ctx[57]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      create_component(t_meshbasicmaterial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_meshbasicmaterial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_meshbasicmaterial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_meshbasicmaterial_changes = {};
      if (dirty[0] & /*p*/
      8) t_meshbasicmaterial_changes.opacity = /*p*/
      ctx2[3][1] >= 0 ? 1 : 0.5;
      if (dirty[0] & /*yColor*/
      2) t_meshbasicmaterial_changes.color = /*yColor*/
      ctx2[1];
      if (dirty[0] & /*usePolygonOffset, frontMostAxisIndex, p*/
      3080) t_meshbasicmaterial_changes.polygonOffset = /*usePolygonOffset*/
      ctx2[10] && /*frontMostAxisIndex*/
      ctx2[11] === 1 && /*p*/
      ctx2[3][1] < 0.75;
      t_meshbasicmaterial.$set(t_meshbasicmaterial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(t_meshbasicmaterial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(t_meshbasicmaterial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
      }
      destroy_component(t0, detaching);
      destroy_component(t_meshbasicmaterial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_6.name,
    type: "slot",
    source: "(299:4) <T.Mesh       position.y={0.39}       rotation.z={Math.PI / 2}       renderOrder={frontMostAxisIndex === 1 ? -1 : 0}     >",
    ctx
  });
  return block;
}
function create_default_slot_5(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*yColor*/
          ctx[1]
        )
      ),
      opacity: (
        /*p*/
        ctx[3][1] >= 0 ? 0.5 : 1
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, yColor*/
      4098) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*yColor*/
        ctx2[1]
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][1] >= 0 ? 0.5 : 1;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_5.name,
    type: "slot",
    source: "(314:4) <T.Sprite       renderOrder={1}       bind:ref={negY}       position.y={-1}       scale={0.8}       userData.targetPosition={[0, -1, 0]}       userData.targetEuler={[Math.PI * 0.5, 0, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_4(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*zColor*/
          ctx[2],
          "Z"
        )
      ),
      opacity: (
        /*p*/
        ctx[3][2] >= 0 ? 1 : 0.5
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, zColor*/
      4100) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*zColor*/
        ctx2[2],
        "Z"
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][2] >= 0 ? 1 : 0.5;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_4.name,
    type: "slot",
    source: "(329:4) <T.Sprite       renderOrder={1}       bind:ref={posZ}       position.z={1}       userData.targetPosition={[0, 0, 1]}       userData.targetEuler={[0, 0, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_3(ctx) {
  let t0;
  let t1;
  let t_meshbasicmaterial;
  let current;
  t0 = new T({
    props: { is: (
      /*stemGeometry*/
      ctx[15]
    ) },
    $$inline: true
  });
  t_meshbasicmaterial = new T.MeshBasicMaterial({
    props: {
      transparent: true,
      opacity: (
        /*p*/
        ctx[3][2] >= 0 ? 1 : 0.5
      ),
      color: (
        /*zColor*/
        ctx[2]
      ),
      polygonOffset: (
        /*usePolygonOffset*/
        ctx[10] && /*frontMostAxisIndex*/
        ctx[11] === 2 && /*p*/
        ctx[3][2] < 0.75
      ),
      polygonOffsetFactor: (
        /*polygonOffsetFactor*/
        ctx[57]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      create_component(t_meshbasicmaterial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_meshbasicmaterial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_meshbasicmaterial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_meshbasicmaterial_changes = {};
      if (dirty[0] & /*p*/
      8) t_meshbasicmaterial_changes.opacity = /*p*/
      ctx2[3][2] >= 0 ? 1 : 0.5;
      if (dirty[0] & /*zColor*/
      4) t_meshbasicmaterial_changes.color = /*zColor*/
      ctx2[2];
      if (dirty[0] & /*usePolygonOffset, frontMostAxisIndex, p*/
      3080) t_meshbasicmaterial_changes.polygonOffset = /*usePolygonOffset*/
      ctx2[10] && /*frontMostAxisIndex*/
      ctx2[11] === 2 && /*p*/
      ctx2[3][2] < 0.75;
      t_meshbasicmaterial.$set(t_meshbasicmaterial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(t_meshbasicmaterial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(t_meshbasicmaterial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
      }
      destroy_component(t0, detaching);
      destroy_component(t_meshbasicmaterial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_3.name,
    type: "slot",
    source: "(342:4) <T.Mesh       position.z={0.39}       rotation.y={-Math.PI / 2}       renderOrder={frontMostAxisIndex === 2 ? -1 : 0}     >",
    ctx
  });
  return block;
}
function create_default_slot_2(ctx) {
  let t_spritematerial;
  let current;
  t_spritematerial = new T.SpriteMaterial({
    props: {
      map: (
        /*getSpriteTexture*/
        ctx[14](
          /*textureSize*/
          ctx[12],
          /*zColor*/
          ctx[2]
        )
      ),
      opacity: (
        /*p*/
        ctx[3][2] >= 0 ? 0.5 : 1
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_spritematerial.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_spritematerial.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_spritematerial, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_spritematerial_changes = {};
      if (dirty[0] & /*textureSize, zColor*/
      4100) t_spritematerial_changes.map = /*getSpriteTexture*/
      ctx2[14](
        /*textureSize*/
        ctx2[12],
        /*zColor*/
        ctx2[2]
      );
      if (dirty[0] & /*p*/
      8) t_spritematerial_changes.opacity = /*p*/
      ctx2[3][2] >= 0 ? 0.5 : 1;
      t_spritematerial.$set(t_spritematerial_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_spritematerial.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_spritematerial.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_spritematerial, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(357:4) <T.Sprite       renderOrder={1}       bind:ref={negZ}       position.z={-1}       scale={0.8}       userData.targetPosition={[0, 0, -1]}       userData.targetEuler={[0, Math.PI, 0]}     >",
    ctx
  });
  return block;
}
function create_default_slot_1(ctx) {
  get_context(ctx);
  let t_sprite0;
  let updating_ref;
  let t0;
  let t_mesh0;
  let t1;
  let t_sprite1;
  let updating_ref_1;
  let t2;
  let t_sprite2;
  let updating_ref_2;
  let t3;
  let t_mesh1;
  let t4;
  let t_sprite3;
  let updating_ref_3;
  let t5;
  let t_sprite4;
  let updating_ref_4;
  let t6;
  let t_mesh2;
  let t7;
  let t_sprite5;
  let updating_ref_5;
  let current;
  function t_sprite0_ref_binding(value) {
    ctx[27](value);
  }
  let t_sprite0_props = {
    renderOrder: 1,
    "position.x": 1,
    "userData.targetPosition": [1, 0, 0],
    "userData.targetEuler": [0, Math.PI * 0.5, 0],
    $$slots: { default: [create_default_slot_10] },
    $$scope: { ctx }
  };
  if (
    /*posX*/
    ctx[4] !== void 0
  ) {
    t_sprite0_props.ref = /*posX*/
    ctx[4];
  }
  t_sprite0 = new T.Sprite({ props: t_sprite0_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite0, "ref", t_sprite0_ref_binding));
  t_mesh0 = new T.Mesh({
    props: {
      "position.x": 0.39,
      renderOrder: (
        /*frontMostAxisIndex*/
        ctx[11] === 0 ? -1 : 0
      ),
      $$slots: { default: [create_default_slot_9] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  function t_sprite1_ref_binding(value) {
    ctx[28](value);
  }
  let t_sprite1_props = {
    renderOrder: 1,
    "position.x": -1,
    scale: 0.8,
    "userData.targetPosition": [-1, 0, 0],
    "userData.targetEuler": [0, -Math.PI * 0.5, 0],
    $$slots: { default: [create_default_slot_8] },
    $$scope: { ctx }
  };
  if (
    /*negX*/
    ctx[7] !== void 0
  ) {
    t_sprite1_props.ref = /*negX*/
    ctx[7];
  }
  t_sprite1 = new T.Sprite({ props: t_sprite1_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite1, "ref", t_sprite1_ref_binding));
  function t_sprite2_ref_binding(value) {
    ctx[29](value);
  }
  let t_sprite2_props = {
    renderOrder: 1,
    "position.y": 1,
    "userData.targetPosition": [0, 1, 0],
    "userData.targetEuler": [-Math.PI * 0.5, 0, 0],
    $$slots: { default: [create_default_slot_7] },
    $$scope: { ctx }
  };
  if (
    /*posY*/
    ctx[5] !== void 0
  ) {
    t_sprite2_props.ref = /*posY*/
    ctx[5];
  }
  t_sprite2 = new T.Sprite({ props: t_sprite2_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite2, "ref", t_sprite2_ref_binding));
  t_mesh1 = new T.Mesh({
    props: {
      "position.y": 0.39,
      "rotation.z": Math.PI / 2,
      renderOrder: (
        /*frontMostAxisIndex*/
        ctx[11] === 1 ? -1 : 0
      ),
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  function t_sprite3_ref_binding(value) {
    ctx[30](value);
  }
  let t_sprite3_props = {
    renderOrder: 1,
    "position.y": -1,
    scale: 0.8,
    "userData.targetPosition": [0, -1, 0],
    "userData.targetEuler": [Math.PI * 0.5, 0, 0],
    $$slots: { default: [create_default_slot_5] },
    $$scope: { ctx }
  };
  if (
    /*negY*/
    ctx[8] !== void 0
  ) {
    t_sprite3_props.ref = /*negY*/
    ctx[8];
  }
  t_sprite3 = new T.Sprite({ props: t_sprite3_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite3, "ref", t_sprite3_ref_binding));
  function t_sprite4_ref_binding(value) {
    ctx[31](value);
  }
  let t_sprite4_props = {
    renderOrder: 1,
    "position.z": 1,
    "userData.targetPosition": [0, 0, 1],
    "userData.targetEuler": [0, 0, 0],
    $$slots: { default: [create_default_slot_4] },
    $$scope: { ctx }
  };
  if (
    /*posZ*/
    ctx[6] !== void 0
  ) {
    t_sprite4_props.ref = /*posZ*/
    ctx[6];
  }
  t_sprite4 = new T.Sprite({ props: t_sprite4_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite4, "ref", t_sprite4_ref_binding));
  t_mesh2 = new T.Mesh({
    props: {
      "position.z": 0.39,
      "rotation.y": -Math.PI / 2,
      renderOrder: (
        /*frontMostAxisIndex*/
        ctx[11] === 2 ? -1 : 0
      ),
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  function t_sprite5_ref_binding(value) {
    ctx[32](value);
  }
  let t_sprite5_props = {
    renderOrder: 1,
    "position.z": -1,
    scale: 0.8,
    "userData.targetPosition": [0, 0, -1],
    "userData.targetEuler": [0, Math.PI, 0],
    $$slots: { default: [create_default_slot_2] },
    $$scope: { ctx }
  };
  if (
    /*negZ*/
    ctx[9] !== void 0
  ) {
    t_sprite5_props.ref = /*negZ*/
    ctx[9];
  }
  t_sprite5 = new T.Sprite({ props: t_sprite5_props, $$inline: true });
  binding_callbacks.push(() => bind(t_sprite5, "ref", t_sprite5_ref_binding));
  const block = {
    c: function create() {
      create_component(t_sprite0.$$.fragment);
      t0 = space();
      create_component(t_mesh0.$$.fragment);
      t1 = space();
      create_component(t_sprite1.$$.fragment);
      t2 = space();
      create_component(t_sprite2.$$.fragment);
      t3 = space();
      create_component(t_mesh1.$$.fragment);
      t4 = space();
      create_component(t_sprite3.$$.fragment);
      t5 = space();
      create_component(t_sprite4.$$.fragment);
      t6 = space();
      create_component(t_mesh2.$$.fragment);
      t7 = space();
      create_component(t_sprite5.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_sprite0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t_mesh0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_sprite1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(t_sprite2.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(t_mesh1.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(t_sprite3.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(t_sprite4.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(t_mesh2.$$.fragment, nodes);
      t7 = claim_space(nodes);
      claim_component(t_sprite5.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_sprite0, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t_mesh0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_sprite1, target, anchor);
      insert_hydration_dev(target, t2, anchor);
      mount_component(t_sprite2, target, anchor);
      insert_hydration_dev(target, t3, anchor);
      mount_component(t_mesh1, target, anchor);
      insert_hydration_dev(target, t4, anchor);
      mount_component(t_sprite3, target, anchor);
      insert_hydration_dev(target, t5, anchor);
      mount_component(t_sprite4, target, anchor);
      insert_hydration_dev(target, t6, anchor);
      mount_component(t_mesh2, target, anchor);
      insert_hydration_dev(target, t7, anchor);
      mount_component(t_sprite5, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      get_context(ctx2);
      const t_sprite0_changes = {};
      if (dirty[0] & /*textureSize, xColor, p*/
      4105 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty[0] & /*posX*/
      16) {
        updating_ref = true;
        t_sprite0_changes.ref = /*posX*/
        ctx2[4];
        add_flush_callback(() => updating_ref = false);
      }
      t_sprite0.$set(t_sprite0_changes);
      const t_mesh0_changes = {};
      if (dirty[0] & /*frontMostAxisIndex*/
      2048) t_mesh0_changes.renderOrder = /*frontMostAxisIndex*/
      ctx2[11] === 0 ? -1 : 0;
      if (dirty[0] & /*p, xColor, usePolygonOffset, frontMostAxisIndex*/
      3081 | dirty[1] & /*$$scope*/
      134217728) {
        t_mesh0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_mesh0.$set(t_mesh0_changes);
      const t_sprite1_changes = {};
      if (dirty[0] & /*textureSize, xColor, p*/
      4105 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref_1 && dirty[0] & /*negX*/
      128) {
        updating_ref_1 = true;
        t_sprite1_changes.ref = /*negX*/
        ctx2[7];
        add_flush_callback(() => updating_ref_1 = false);
      }
      t_sprite1.$set(t_sprite1_changes);
      const t_sprite2_changes = {};
      if (dirty[0] & /*textureSize, yColor, p*/
      4106 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref_2 && dirty[0] & /*posY*/
      32) {
        updating_ref_2 = true;
        t_sprite2_changes.ref = /*posY*/
        ctx2[5];
        add_flush_callback(() => updating_ref_2 = false);
      }
      t_sprite2.$set(t_sprite2_changes);
      const t_mesh1_changes = {};
      if (dirty[0] & /*frontMostAxisIndex*/
      2048) t_mesh1_changes.renderOrder = /*frontMostAxisIndex*/
      ctx2[11] === 1 ? -1 : 0;
      if (dirty[0] & /*p, yColor, usePolygonOffset, frontMostAxisIndex*/
      3082 | dirty[1] & /*$$scope*/
      134217728) {
        t_mesh1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_mesh1.$set(t_mesh1_changes);
      const t_sprite3_changes = {};
      if (dirty[0] & /*textureSize, yColor, p*/
      4106 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref_3 && dirty[0] & /*negY*/
      256) {
        updating_ref_3 = true;
        t_sprite3_changes.ref = /*negY*/
        ctx2[8];
        add_flush_callback(() => updating_ref_3 = false);
      }
      t_sprite3.$set(t_sprite3_changes);
      const t_sprite4_changes = {};
      if (dirty[0] & /*textureSize, zColor, p*/
      4108 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref_4 && dirty[0] & /*posZ*/
      64) {
        updating_ref_4 = true;
        t_sprite4_changes.ref = /*posZ*/
        ctx2[6];
        add_flush_callback(() => updating_ref_4 = false);
      }
      t_sprite4.$set(t_sprite4_changes);
      const t_mesh2_changes = {};
      if (dirty[0] & /*frontMostAxisIndex*/
      2048) t_mesh2_changes.renderOrder = /*frontMostAxisIndex*/
      ctx2[11] === 2 ? -1 : 0;
      if (dirty[0] & /*p, zColor, usePolygonOffset, frontMostAxisIndex*/
      3084 | dirty[1] & /*$$scope*/
      134217728) {
        t_mesh2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_mesh2.$set(t_mesh2_changes);
      const t_sprite5_changes = {};
      if (dirty[0] & /*textureSize, zColor, p*/
      4108 | dirty[1] & /*$$scope*/
      134217728) {
        t_sprite5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref_5 && dirty[0] & /*negZ*/
      512) {
        updating_ref_5 = true;
        t_sprite5_changes.ref = /*negZ*/
        ctx2[9];
        add_flush_callback(() => updating_ref_5 = false);
      }
      t_sprite5.$set(t_sprite5_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_sprite0.$$.fragment, local);
      transition_in(t_mesh0.$$.fragment, local);
      transition_in(t_sprite1.$$.fragment, local);
      transition_in(t_sprite2.$$.fragment, local);
      transition_in(t_mesh1.$$.fragment, local);
      transition_in(t_sprite3.$$.fragment, local);
      transition_in(t_sprite4.$$.fragment, local);
      transition_in(t_mesh2.$$.fragment, local);
      transition_in(t_sprite5.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_sprite0.$$.fragment, local);
      transition_out(t_mesh0.$$.fragment, local);
      transition_out(t_sprite1.$$.fragment, local);
      transition_out(t_sprite2.$$.fragment, local);
      transition_out(t_mesh1.$$.fragment, local);
      transition_out(t_sprite3.$$.fragment, local);
      transition_out(t_sprite4.$$.fragment, local);
      transition_out(t_mesh2.$$.fragment, local);
      transition_out(t_sprite5.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t1);
        detach_dev(t2);
        detach_dev(t3);
        detach_dev(t4);
        detach_dev(t5);
        detach_dev(t6);
        detach_dev(t7);
      }
      destroy_component(t_sprite0, detaching);
      destroy_component(t_mesh0, detaching);
      destroy_component(t_sprite1, detaching);
      destroy_component(t_sprite2, detaching);
      destroy_component(t_mesh1, detaching);
      destroy_component(t_sprite3, detaching);
      destroy_component(t_sprite4, detaching);
      destroy_component(t_mesh2, detaching);
      destroy_component(t_sprite5, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(240:2) <T is={root}>",
    ctx
  });
  return block;
}
function create_default_slot5(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*root*/
        ctx[13]
      ),
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = {};
      if (dirty[0] & /*negZ, textureSize, zColor, p, frontMostAxisIndex, usePolygonOffset, posZ, negY, yColor, posY, negX, xColor, posX*/
      8191 | dirty[1] & /*$$scope*/
      134217728) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot5.name,
    type: "slot",
    source: "(239:0) <HierarchicalObject>",
    ctx
  });
  return block;
}
function create_fragment6(ctx) {
  let hierarchicalobject;
  let current;
  hierarchicalobject = new HierarchicalObject_default({
    props: {
      $$slots: { default: [create_default_slot5] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(hierarchicalobject.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(hierarchicalobject.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(hierarchicalobject, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const hierarchicalobject_changes = {};
      if (dirty[0] & /*negZ, textureSize, zColor, p, frontMostAxisIndex, usePolygonOffset, posZ, negY, yColor, posY, negX, xColor, posX*/
      8191 | dirty[1] & /*$$scope*/
      134217728) {
        hierarchicalobject_changes.$$scope = { dirty, ctx: ctx2 };
      }
      hierarchicalobject.$set(hierarchicalobject_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(hierarchicalobject.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(hierarchicalobject.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(hierarchicalobject, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance6($$self, $$props, $$invalidate) {
  let centerVec;
  let textureSize;
  let frontMostAxisIndex;
  let usePolygonOffset;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Gizmo", slots, []);
  let { renderTask = void 0 } = $$props;
  let { animationTask = void 0 } = $$props;
  let { turnRate = 2 * Math.PI } = $$props;
  let { center = [0, 0, 0] } = $$props;
  let { verticalPlacement = "bottom" } = $$props;
  let { horizontalPlacement = "right" } = $$props;
  let { size = 128 } = $$props;
  let { xColor = 16725587 } = $$props;
  let { yColor = 9100032 } = $$props;
  let { zColor = 2920447 } = $$props;
  let { toneMapped = false } = $$props;
  let { paddingX = 0 } = $$props;
  let { paddingY = 0 } = $$props;
  const { autoRenderTask, renderer, camera, invalidate } = useThrelte();
  const orthoCam = new OrthographicCamera(-1.25, 1.25, 1.25, -1.25, 0, 4);
  orthoCam.position.set(0, 0, 2);
  const root = new Scene();
  const viewport = new Vector4();
  useTask(
    renderTask?.key ?? Symbol("threlte-extras-gizmo-render"),
    () => {
      const autoClear = renderer.autoClear;
      $$invalidate(26, renderer.autoClear = false, renderer);
      renderer.getViewport(viewport);
      const toneMapping = renderer.toneMapping;
      $$invalidate(26, renderer.toneMapping = toneMapped ? renderer.toneMapping : 0, renderer);
      const x = horizontalPlacement === "left" ? paddingX : renderer.domElement.offsetWidth - size - paddingX;
      const y = verticalPlacement === "bottom" ? paddingY : renderer.domElement.offsetHeight - size - paddingY;
      renderer.setViewport(x, y, size, size);
      renderer.render(root, orthoCam);
      renderer.setViewport(viewport.x, viewport.y, viewport.z, viewport.w);
      $$invalidate(26, renderer.autoClear = autoClear, renderer);
      $$invalidate(26, renderer.toneMapping = toneMapping, renderer);
    },
    {
      ...renderTask ?? { after: autoRenderTask },
      autoInvalidate: false
    }
  );
  const clickTarget = document.createElement("div");
  const renderTarget = renderer.domElement;
  const boundingRect = renderTarget.getBoundingClientRect();
  clickTarget.style.position = "absolute";
  let posX;
  let posY;
  let posZ;
  let negX;
  let negY;
  let negZ;
  const targetPosition = new Vector3();
  const targetQuaternion = new Quaternion();
  const currentQuaternion = new Quaternion();
  const finalQuaternion = new Quaternion();
  let radius = 0;
  let animating = false;
  const mouse = new Vector2();
  const raycaster = new Raycaster();
  const quaternionsAreEqual = (a, b, threshold) => {
    const delta = Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) + Math.abs(a.w - b.w);
    return delta < threshold;
  };
  const handleIntersection = (intersection) => {
    const object = intersection.object;
    const targetPos = object.userData.targetPosition;
    const targetEuler = object.userData.targetEuler;
    radius = camera.current.position.distanceTo(centerVec);
    targetPosition.set(...targetPos).multiplyScalar(radius).add(centerVec);
    targetQuaternion.setFromEuler(new Euler(...targetEuler));
    const dummy = new Object3D();
    dummy.position.copy(centerVec);
    dummy.lookAt(camera.current.position);
    currentQuaternion.copy(dummy.quaternion);
    dummy.lookAt(targetPosition);
    finalQuaternion.copy(dummy.quaternion);
    if (quaternionsAreEqual(finalQuaternion, currentQuaternion, 1e-4)) {
      return true;
    }
    animating = true;
    return false;
  };
  const handleClick = (event) => {
    if (animating) {
      return;
    }
    const rect = clickTarget.getBoundingClientRect();
    const offsetX = rect.left + (clickTarget.offsetWidth - size);
    const offsetY = rect.top + (clickTarget.offsetHeight - size);
    mouse.x = (event.clientX - offsetX) / (rect.right - offsetX) * 2 - 1;
    mouse.y = -((event.clientY - offsetY) / (rect.bottom - offsetY)) * 2 + 1;
    raycaster.setFromCamera(mouse, orthoCam);
    const intersects = raycaster.intersectObjects([posX, posY, posZ, negX, negY, negZ]);
    if (intersects.length > 0) {
      const alreadyReached = handleIntersection(intersects[0]);
      if (alreadyReached) {
        if (intersects.length > 1) {
          handleIntersection(intersects[1]);
        }
      }
    }
  };
  onMount(() => {
    renderer.domElement.parentElement?.appendChild(clickTarget);
    clickTarget.addEventListener("click", handleClick);
  });
  onDestroy(() => {
    renderer.domElement.parentElement?.removeChild(clickTarget);
    clickTarget.removeEventListener("click", handleClick);
  });
  const point = new Vector3();
  let p = [0, 0, 0];
  useTask(
    animationTask?.key ?? Symbol("threlte-extras-gizmo-animation"),
    (delta) => {
      point.set(0, 0, 1).applyQuaternion(camera.current.quaternion);
      if (point.x !== p[0] || point.y !== p[1] || point.z !== p[2]) {
        $$invalidate(3, p = [point.x, point.y, point.z]);
        root.quaternion.copy(camera.current.quaternion).invert();
        invalidate();
      }
      if (animating) {
        const step = delta * turnRate;
        currentQuaternion.rotateTowards(finalQuaternion, step);
        camera.current.position.set(0, 0, 1).applyQuaternion(currentQuaternion).multiplyScalar(radius).add(centerVec);
        camera.current.quaternion.rotateTowards(targetQuaternion, step);
        if (currentQuaternion.angleTo(finalQuaternion) === 0) {
          animating = false;
        }
        invalidate();
      }
    },
    { ...animationTask, autoInvalidate: false }
  );
  const findClosestPow2LargerThan = (x) => {
    if (x <= 0) {
      return 1;
    }
    let pow2 = 1;
    while (pow2 < x) {
      pow2 <<= 1;
    }
    return pow2;
  };
  const textures = {};
  const color = new Color();
  const getSpriteTexture = (size2, colorRepresentation, text = "") => {
    color.set(colorRepresentation);
    const key = `${color.getHexString()}-${text}`;
    if (textures[key]) {
      textures[key].dispose();
    }
    const canvas = document.createElement("canvas");
    canvas.width = size2;
    canvas.height = size2;
    const context = canvas.getContext("2d");
    context.beginPath();
    context.arc(size2 / 2, size2 / 2, size2 / 4, 0, 2 * Math.PI);
    context.closePath();
    context.fillStyle = color.convertSRGBToLinear().getStyle();
    context.fill();
    if (text) {
      const textSize = Math.abs(size2 * (24 / 64));
      context.font = `${textSize}px Arial`;
      context.textAlign = "center";
      context.fillStyle = "#000000";
      const textY = size2 * (41 / 64);
      context.fillText(text, size2 / 2, textY);
    }
    const texture = new CanvasTexture(canvas);
    textures[key] = texture;
    return texture;
  };
  const stemGeometry = new CapsuleGeometry(0.025, 0.78);
  stemGeometry.rotateZ(Math.PI / 2);
  const writable_props = [
    "renderTask",
    "animationTask",
    "turnRate",
    "center",
    "verticalPlacement",
    "horizontalPlacement",
    "size",
    "xColor",
    "yColor",
    "zColor",
    "toneMapped",
    "paddingX",
    "paddingY"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Gizmo> was created with unknown prop '${key}'`);
  });
  function t_sprite0_ref_binding(value) {
    posX = value;
    $$invalidate(4, posX);
  }
  function t_sprite1_ref_binding(value) {
    negX = value;
    $$invalidate(7, negX);
  }
  function t_sprite2_ref_binding(value) {
    posY = value;
    $$invalidate(5, posY);
  }
  function t_sprite3_ref_binding(value) {
    negY = value;
    $$invalidate(8, negY);
  }
  function t_sprite4_ref_binding(value) {
    posZ = value;
    $$invalidate(6, posZ);
  }
  function t_sprite5_ref_binding(value) {
    negZ = value;
    $$invalidate(9, negZ);
  }
  $$self.$$set = ($$props2) => {
    if ("renderTask" in $$props2) $$invalidate(16, renderTask = $$props2.renderTask);
    if ("animationTask" in $$props2) $$invalidate(17, animationTask = $$props2.animationTask);
    if ("turnRate" in $$props2) $$invalidate(18, turnRate = $$props2.turnRate);
    if ("center" in $$props2) $$invalidate(19, center = $$props2.center);
    if ("verticalPlacement" in $$props2) $$invalidate(20, verticalPlacement = $$props2.verticalPlacement);
    if ("horizontalPlacement" in $$props2) $$invalidate(21, horizontalPlacement = $$props2.horizontalPlacement);
    if ("size" in $$props2) $$invalidate(22, size = $$props2.size);
    if ("xColor" in $$props2) $$invalidate(0, xColor = $$props2.xColor);
    if ("yColor" in $$props2) $$invalidate(1, yColor = $$props2.yColor);
    if ("zColor" in $$props2) $$invalidate(2, zColor = $$props2.zColor);
    if ("toneMapped" in $$props2) $$invalidate(23, toneMapped = $$props2.toneMapped);
    if ("paddingX" in $$props2) $$invalidate(24, paddingX = $$props2.paddingX);
    if ("paddingY" in $$props2) $$invalidate(25, paddingY = $$props2.paddingY);
  };
  $$self.$capture_state = () => ({
    HierarchicalObject: HierarchicalObject_default,
    T,
    useTask,
    useThrelte,
    onDestroy,
    onMount,
    CanvasTexture,
    CapsuleGeometry,
    Color,
    Euler,
    Object3D,
    OrthographicCamera,
    Quaternion,
    Raycaster,
    Scene,
    Vector2,
    Vector3,
    Vector4,
    renderTask,
    animationTask,
    turnRate,
    center,
    verticalPlacement,
    horizontalPlacement,
    size,
    xColor,
    yColor,
    zColor,
    toneMapped,
    paddingX,
    paddingY,
    autoRenderTask,
    renderer,
    camera,
    invalidate,
    orthoCam,
    root,
    viewport,
    clickTarget,
    renderTarget,
    boundingRect,
    posX,
    posY,
    posZ,
    negX,
    negY,
    negZ,
    targetPosition,
    targetQuaternion,
    currentQuaternion,
    finalQuaternion,
    radius,
    animating,
    mouse,
    raycaster,
    quaternionsAreEqual,
    handleIntersection,
    handleClick,
    point,
    p,
    findClosestPow2LargerThan,
    textures,
    color,
    getSpriteTexture,
    stemGeometry,
    usePolygonOffset,
    frontMostAxisIndex,
    textureSize,
    centerVec
  });
  $$self.$inject_state = ($$props2) => {
    if ("renderTask" in $$props2) $$invalidate(16, renderTask = $$props2.renderTask);
    if ("animationTask" in $$props2) $$invalidate(17, animationTask = $$props2.animationTask);
    if ("turnRate" in $$props2) $$invalidate(18, turnRate = $$props2.turnRate);
    if ("center" in $$props2) $$invalidate(19, center = $$props2.center);
    if ("verticalPlacement" in $$props2) $$invalidate(20, verticalPlacement = $$props2.verticalPlacement);
    if ("horizontalPlacement" in $$props2) $$invalidate(21, horizontalPlacement = $$props2.horizontalPlacement);
    if ("size" in $$props2) $$invalidate(22, size = $$props2.size);
    if ("xColor" in $$props2) $$invalidate(0, xColor = $$props2.xColor);
    if ("yColor" in $$props2) $$invalidate(1, yColor = $$props2.yColor);
    if ("zColor" in $$props2) $$invalidate(2, zColor = $$props2.zColor);
    if ("toneMapped" in $$props2) $$invalidate(23, toneMapped = $$props2.toneMapped);
    if ("paddingX" in $$props2) $$invalidate(24, paddingX = $$props2.paddingX);
    if ("paddingY" in $$props2) $$invalidate(25, paddingY = $$props2.paddingY);
    if ("posX" in $$props2) $$invalidate(4, posX = $$props2.posX);
    if ("posY" in $$props2) $$invalidate(5, posY = $$props2.posY);
    if ("posZ" in $$props2) $$invalidate(6, posZ = $$props2.posZ);
    if ("negX" in $$props2) $$invalidate(7, negX = $$props2.negX);
    if ("negY" in $$props2) $$invalidate(8, negY = $$props2.negY);
    if ("negZ" in $$props2) $$invalidate(9, negZ = $$props2.negZ);
    if ("radius" in $$props2) radius = $$props2.radius;
    if ("animating" in $$props2) animating = $$props2.animating;
    if ("p" in $$props2) $$invalidate(3, p = $$props2.p);
    if ("usePolygonOffset" in $$props2) $$invalidate(10, usePolygonOffset = $$props2.usePolygonOffset);
    if ("frontMostAxisIndex" in $$props2) $$invalidate(11, frontMostAxisIndex = $$props2.frontMostAxisIndex);
    if ("textureSize" in $$props2) $$invalidate(12, textureSize = $$props2.textureSize);
    if ("centerVec" in $$props2) centerVec = $$props2.centerVec;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*center*/
    524288) {
      $: centerVec = new Vector3(...center);
    }
    if ($$self.$$.dirty[0] & /*size, horizontalPlacement, verticalPlacement, toneMapped, paddingX, paddingY*/
    66060288) {
      $: size, horizontalPlacement, verticalPlacement, toneMapped, paddingX, paddingY, invalidate();
    }
    if ($$self.$$.dirty[0] & /*horizontalPlacement, size, paddingX, verticalPlacement, paddingY*/
    57671680) {
      $: {
        if (horizontalPlacement === "right") {
          clickTarget.style.right = "";
          clickTarget.style.left = `${boundingRect.right - size - paddingX}px`;
        } else {
          clickTarget.style.right = "";
          clickTarget.style.left = `${paddingX + boundingRect.left}px`;
        }
        if (verticalPlacement === "bottom") {
          clickTarget.style.bottom = "";
          clickTarget.style.top = `${boundingRect.bottom - size - paddingY}px`;
        } else {
          clickTarget.style.bottom = "";
          clickTarget.style.top = `${paddingY + boundingRect.top}px`;
        }
        clickTarget.style.height = `${size}px`;
        clickTarget.style.width = `${size}px`;
      }
    }
    if ($$self.$$.dirty[0] & /*size, renderer*/
    71303168) {
      $: $$invalidate(12, textureSize = findClosestPow2LargerThan(size * 0.3 * renderer.getPixelRatio()));
    }
    if ($$self.$$.dirty[0] & /*p*/
    8) {
      $: $$invalidate(11, frontMostAxisIndex = p.indexOf(Math.max(...p)));
    }
    if ($$self.$$.dirty[0] & /*p*/
    8) {
      $: $$invalidate(10, usePolygonOffset = p.some((v) => v < 0));
    }
  };
  return [
    xColor,
    yColor,
    zColor,
    p,
    posX,
    posY,
    posZ,
    negX,
    negY,
    negZ,
    usePolygonOffset,
    frontMostAxisIndex,
    textureSize,
    root,
    getSpriteTexture,
    stemGeometry,
    renderTask,
    animationTask,
    turnRate,
    center,
    verticalPlacement,
    horizontalPlacement,
    size,
    toneMapped,
    paddingX,
    paddingY,
    renderer,
    t_sprite0_ref_binding,
    t_sprite1_ref_binding,
    t_sprite2_ref_binding,
    t_sprite3_ref_binding,
    t_sprite4_ref_binding,
    t_sprite5_ref_binding
  ];
}
var Gizmo = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance6,
      create_fragment6,
      safe_not_equal,
      {
        renderTask: 16,
        animationTask: 17,
        turnRate: 18,
        center: 19,
        verticalPlacement: 20,
        horizontalPlacement: 21,
        size: 22,
        xColor: 0,
        yColor: 1,
        zColor: 2,
        toneMapped: 23,
        paddingX: 24,
        paddingY: 25
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Gizmo",
      options,
      id: create_fragment6.name
    });
  }
  get renderTask() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set renderTask(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animationTask() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animationTask(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get turnRate() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set turnRate(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get center() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set center(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get verticalPlacement() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set verticalPlacement(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get horizontalPlacement() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set horizontalPlacement(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get size() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xColor() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xColor(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yColor() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yColor(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zColor() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zColor(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toneMapped() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set toneMapped(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get paddingX() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set paddingX(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get paddingY() {
    throw new Error("<Gizmo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set paddingY(value) {
    throw new Error("<Gizmo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Gizmo_default = Gizmo;

// node_modules/@threlte/extras/dist/lib/useMemo.js
var useMemo = (callback) => {
  let initialCallDone = false;
  const memoized = writable(callback());
  const memoize2 = (..._args) => {
    if (!initialCallDone) {
      initialCallDone = true;
      return;
    }
    memoized.set(callback());
  };
  return {
    ...memoized,
    memoize: memoize2
  };
};

// node_modules/@threlte/extras/dist/components/ContactShadows/ContactShadows.svelte
var get_default_slot_changes4 = (dirty) => ({ ref: dirty[1] & /*ref*/
1024 });
var get_default_slot_context4 = (ctx) => ({ ref: (
  /*ref*/
  ctx[41]
) });
function create_default_slot_12(ctx) {
  let t_mesh;
  let t0;
  let t1;
  let t2;
  let current;
  t_mesh = new T.Mesh({
    props: {
      "scale.y": -1,
      "rotation.x": -Math.PI / 2,
      material: (
        /*shadowMaterial*/
        ctx[10]
      ),
      geometry: (
        /*$planeGeometry*/
        ctx[0]
      )
    },
    $$inline: true
  });
  t1 = new T({
    props: {
      is: (
        /*shadowCamera*/
        ctx[9]
      ),
      manual: true
    },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[27].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[29],
    get_default_slot_context4
  );
  const block = {
    c: function create() {
      create_component(t_mesh.$$.fragment);
      t0 = space();
      create_component(t1.$$.fragment);
      t2 = space();
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      claim_component(t_mesh.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_mesh, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t1, target, anchor);
      insert_hydration_dev(target, t2, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_mesh_changes = {};
      if (dirty[0] & /*$planeGeometry*/
      1) t_mesh_changes.geometry = /*$planeGeometry*/
      ctx2[0];
      t_mesh.$set(t_mesh_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        536870912 | dirty[1] & /*ref*/
        1024)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[29],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[29]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[29],
              dirty,
              get_default_slot_changes4
            ),
            get_default_slot_context4
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_mesh.$$.fragment, local);
      transition_in(t1.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_mesh.$$.fragment, local);
      transition_out(t1.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t2);
      }
      destroy_component(t_mesh, detaching);
      destroy_component(t1, detaching);
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_12.name,
    type: "slot",
    source: "(152:2) <T.Group rotation.x={Math.PI / 2}>",
    ctx
  });
  return block;
}
function create_default_slot6(ctx) {
  let t_group;
  let current;
  t_group = new T.Group({
    props: {
      "rotation.x": Math.PI / 2,
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_group.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_group.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_group, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_group_changes = {};
      if (dirty[0] & /*$$scope, $planeGeometry*/
      536870913 | dirty[1] & /*ref*/
      1024) {
        t_group_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_group.$set(t_group_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_group.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_group.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_group, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot6.name,
    type: "slot",
    source: "(147:0) <T.Group   {...$$restProps}   let:ref   bind:this={$components} >",
    ctx
  });
  return block;
}
function create_fragment7(ctx) {
  let t_group;
  let current;
  const t_group_spread_levels = [
    /*$$restProps*/
    ctx[12]
  ];
  let t_group_props = {
    $$slots: {
      default: [
        create_default_slot6,
        ({ ref }) => ({ 41: ref }),
        ({ ref }) => [0, ref ? 1024 : 0]
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_group_spread_levels.length; i += 1) {
    t_group_props = assign(t_group_props, t_group_spread_levels[i]);
  }
  t_group = new T.Group({ props: t_group_props, $$inline: true });
  ctx[28](t_group);
  const block = {
    c: function create() {
      create_component(t_group.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_group.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_group, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_group_changes = dirty[0] & /*$$restProps*/
      4096 ? get_spread_update(t_group_spread_levels, [get_spread_object(
        /*$$restProps*/
        ctx2[12]
      )]) : {};
      if (dirty[0] & /*$$scope, $planeGeometry*/
      536870913 | dirty[1] & /*ref*/
      1024) {
        t_group_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_group.$set(t_group_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_group.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_group.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[28](null);
      destroy_component(t_group, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment7.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance7($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "opacity",
    "width",
    "height",
    "blur",
    "far",
    "smooth",
    "resolution",
    "frames",
    "scale",
    "color",
    "depthWrite",
    "refresh"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $depthMaterial;
  let $planeGeometry;
  let $renderTargetBlur;
  let $renderTarget;
  let $blurPlane;
  let $scaledHeight;
  let $scaledWidth;
  let $components;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ContactShadows", slots, ["default"]);
  let { opacity = 1 } = $$props;
  let { width = 1 } = $$props;
  let { height = 1 } = $$props;
  let { blur = 1 } = $$props;
  let { far = 10 } = $$props;
  let { smooth = true } = $$props;
  let { resolution = 512 } = $$props;
  let { frames = Infinity } = $$props;
  let { scale = 10 } = $$props;
  let { color = "#000000" } = $$props;
  let { depthWrite = false } = $$props;
  const { scene, renderer } = useThrelte();
  const scaledWidth = useMemo(() => {
    return width * (Array.isArray(scale) ? scale[0] : scale || 1);
  });
  validate_store(scaledWidth, "scaledWidth");
  component_subscribe($$self, scaledWidth, (value) => $$invalidate(26, $scaledWidth = value));
  const scaledHeight = useMemo(() => {
    return height * (Array.isArray(scale) ? scale[1] : scale || 1);
  });
  validate_store(scaledHeight, "scaledHeight");
  component_subscribe($$self, scaledHeight, (value) => $$invalidate(25, $scaledHeight = value));
  const renderTarget = useMemo(() => {
    const rt = new WebGLRenderTarget(resolution, resolution);
    rt.texture.generateMipmaps = false;
    rt.texture.colorSpace = renderer.outputColorSpace;
    return rt;
  });
  validate_store(renderTarget, "renderTarget");
  component_subscribe($$self, renderTarget, (value) => $$invalidate(36, $renderTarget = value));
  const renderTargetBlur = useMemo(() => {
    const rt = new WebGLRenderTarget(resolution, resolution);
    rt.texture.generateMipmaps = false;
    return rt;
  });
  validate_store(renderTargetBlur, "renderTargetBlur");
  component_subscribe($$self, renderTargetBlur, (value) => $$invalidate(35, $renderTargetBlur = value));
  const planeGeometry = useMemo(() => {
    return new PlaneGeometry($scaledWidth, $scaledHeight).rotateX(Math.PI / 2);
  });
  validate_store(planeGeometry, "planeGeometry");
  component_subscribe($$self, planeGeometry, (value) => $$invalidate(0, $planeGeometry = value));
  const blurPlane = useMemo(() => {
    return new Mesh($planeGeometry);
  });
  validate_store(blurPlane, "blurPlane");
  component_subscribe($$self, blurPlane, (value) => $$invalidate(37, $blurPlane = value));
  const depthMaterial = useMemo(() => {
    const dm = new MeshDepthMaterial({ depthTest: false, depthWrite: false });
    dm.onBeforeCompile = (shader) => {
      shader.uniforms = {
        ...shader.uniforms,
        uColor: {
          value: new Color(color).convertSRGBToLinear()
        }
      };
      shader.fragmentShader = "uniform vec3 uColor;\n" + shader.fragmentShader;
      shader.fragmentShader = shader.fragmentShader.replace("vec4( vec3( 1.0 - fragCoordZ ), opacity );", "vec4( uColor, ( 1.0 - fragCoordZ ) * 1.0 );");
      shader.fragmentShader = shader.fragmentShader.replace("vec4(vec3(1.0-fragCoordZ),opacity);", "vec4(uColor,(1.0-fragCoordZ)*1.0);");
    };
    return dm;
  });
  validate_store(depthMaterial, "depthMaterial");
  component_subscribe($$self, depthMaterial, (value) => $$invalidate(34, $depthMaterial = value));
  const horizontalBlurMaterial = new ShaderMaterial({
    ...HorizontalBlurShader,
    depthTest: false
  });
  const verticalBlurMaterial = new ShaderMaterial({ ...VerticalBlurShader, depthTest: false });
  const shadowCamera = new OrthographicCamera(-$scaledWidth / 2, $scaledWidth / 2, $scaledHeight / 2, -$scaledHeight / 2, 0, far);
  shadowCamera.updateProjectionMatrix();
  const shadowMaterial = new MeshBasicMaterial({
    map: $renderTarget.texture,
    transparent: true,
    opacity,
    depthWrite
  });
  const blurShadows = (blur2) => {
    const bp = $blurPlane;
    bp.visible = true;
    bp.material = horizontalBlurMaterial;
    horizontalBlurMaterial.uniforms.tDiffuse.value = $renderTarget.texture;
    horizontalBlurMaterial.uniforms.h.value = blur2 * 1 / 256;
    renderer.setRenderTarget($renderTargetBlur);
    renderer.render(bp, shadowCamera);
    bp.material = verticalBlurMaterial;
    verticalBlurMaterial.uniforms.tDiffuse.value = $renderTargetBlur.texture;
    verticalBlurMaterial.uniforms.v.value = blur2 * 1 / 256;
    renderer.setRenderTarget($renderTarget);
    renderer.render(bp, shadowCamera);
    bp.visible = false;
  };
  const renderShadows = () => {
    const initialBackground = scene.background;
    scene.background = null;
    const initialOverrideMaterial = scene.overrideMaterial;
    scene.overrideMaterial = $depthMaterial;
    const initialClearAlpha = renderer.getClearAlpha();
    renderer.setClearAlpha(0);
    renderer.setRenderTarget($renderTarget);
    renderer.render(scene, shadowCamera);
    scene.overrideMaterial = initialOverrideMaterial;
    blurShadows(blur);
    if (smooth) blurShadows(blur * 0.4);
    renderer.setRenderTarget(null);
    scene.background = initialBackground;
    renderer.setClearAlpha(initialClearAlpha);
  };
  const refresh = () => {
    renderShadows();
  };
  let count = 0;
  useTask(() => {
    if (frames === Infinity || count < frames) {
      renderShadows();
      count += 1;
    }
  });
  onDestroy(() => {
    $renderTarget.dispose();
    $renderTargetBlur.dispose();
    $planeGeometry.dispose();
    $depthMaterial.dispose();
    horizontalBlurMaterial.dispose();
    verticalBlurMaterial.dispose();
    shadowMaterial.dispose();
  });
  const components = forwardEventHandlers();
  validate_store(components, "components");
  component_subscribe($$self, components, (value) => $$invalidate(1, $components = value));
  function t_group_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $components = $$value;
      components.set($components);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("opacity" in $$new_props) $$invalidate(13, opacity = $$new_props.opacity);
    if ("width" in $$new_props) $$invalidate(14, width = $$new_props.width);
    if ("height" in $$new_props) $$invalidate(15, height = $$new_props.height);
    if ("blur" in $$new_props) $$invalidate(16, blur = $$new_props.blur);
    if ("far" in $$new_props) $$invalidate(17, far = $$new_props.far);
    if ("smooth" in $$new_props) $$invalidate(18, smooth = $$new_props.smooth);
    if ("resolution" in $$new_props) $$invalidate(19, resolution = $$new_props.resolution);
    if ("frames" in $$new_props) $$invalidate(20, frames = $$new_props.frames);
    if ("scale" in $$new_props) $$invalidate(21, scale = $$new_props.scale);
    if ("color" in $$new_props) $$invalidate(22, color = $$new_props.color);
    if ("depthWrite" in $$new_props) $$invalidate(23, depthWrite = $$new_props.depthWrite);
    if ("$$scope" in $$new_props) $$invalidate(29, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    useTask,
    useThrelte,
    onDestroy,
    Color,
    Mesh,
    MeshBasicMaterial,
    MeshDepthMaterial,
    OrthographicCamera,
    PlaneGeometry,
    ShaderMaterial,
    WebGLRenderTarget,
    HorizontalBlurShader,
    VerticalBlurShader,
    useMemo,
    opacity,
    width,
    height,
    blur,
    far,
    smooth,
    resolution,
    frames,
    scale,
    color,
    depthWrite,
    scene,
    renderer,
    scaledWidth,
    scaledHeight,
    renderTarget,
    renderTargetBlur,
    planeGeometry,
    blurPlane,
    depthMaterial,
    horizontalBlurMaterial,
    verticalBlurMaterial,
    shadowCamera,
    shadowMaterial,
    blurShadows,
    renderShadows,
    refresh,
    count,
    components,
    $depthMaterial,
    $planeGeometry,
    $renderTargetBlur,
    $renderTarget,
    $blurPlane,
    $scaledHeight,
    $scaledWidth,
    $components
  });
  $$self.$inject_state = ($$new_props) => {
    if ("opacity" in $$props) $$invalidate(13, opacity = $$new_props.opacity);
    if ("width" in $$props) $$invalidate(14, width = $$new_props.width);
    if ("height" in $$props) $$invalidate(15, height = $$new_props.height);
    if ("blur" in $$props) $$invalidate(16, blur = $$new_props.blur);
    if ("far" in $$props) $$invalidate(17, far = $$new_props.far);
    if ("smooth" in $$props) $$invalidate(18, smooth = $$new_props.smooth);
    if ("resolution" in $$props) $$invalidate(19, resolution = $$new_props.resolution);
    if ("frames" in $$props) $$invalidate(20, frames = $$new_props.frames);
    if ("scale" in $$props) $$invalidate(21, scale = $$new_props.scale);
    if ("color" in $$props) $$invalidate(22, color = $$new_props.color);
    if ("depthWrite" in $$props) $$invalidate(23, depthWrite = $$new_props.depthWrite);
    if ("count" in $$props) count = $$new_props.count;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*width, scale*/
    2113536) {
      $: scaledWidth.memoize([width, scale]);
    }
    if ($$self.$$.dirty[0] & /*height, scale*/
    2129920) {
      $: scaledHeight.memoize(height, scale);
    }
    if ($$self.$$.dirty[0] & /*resolution*/
    524288) {
      $: renderTarget.memoize(resolution);
    }
    if ($$self.$$.dirty[0] & /*resolution*/
    524288) {
      $: renderTargetBlur.memoize(resolution);
    }
    if ($$self.$$.dirty[0] & /*$scaledWidth, $scaledHeight*/
    100663296) {
      $: planeGeometry.memoize($scaledWidth, $scaledHeight);
    }
    if ($$self.$$.dirty[0] & /*$planeGeometry*/
    1) {
      $: blurPlane.memoize($planeGeometry);
    }
    if ($$self.$$.dirty[0] & /*color*/
    4194304) {
      $: depthMaterial.memoize(color);
    }
  };
  return [
    $planeGeometry,
    $components,
    scaledWidth,
    scaledHeight,
    renderTarget,
    renderTargetBlur,
    planeGeometry,
    blurPlane,
    depthMaterial,
    shadowCamera,
    shadowMaterial,
    components,
    $$restProps,
    opacity,
    width,
    height,
    blur,
    far,
    smooth,
    resolution,
    frames,
    scale,
    color,
    depthWrite,
    refresh,
    $scaledHeight,
    $scaledWidth,
    slots,
    t_group_binding,
    $$scope
  ];
}
var ContactShadows = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance7,
      create_fragment7,
      safe_not_equal,
      {
        opacity: 13,
        width: 14,
        height: 15,
        blur: 16,
        far: 17,
        smooth: 18,
        resolution: 19,
        frames: 20,
        scale: 21,
        color: 22,
        depthWrite: 23,
        refresh: 24
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ContactShadows",
      options,
      id: create_fragment7.name
    });
  }
  get opacity() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set opacity(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get width() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set width(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get height() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set height(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get blur() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set blur(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get far() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set far(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get smooth() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set smooth(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get resolution() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set resolution(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get frames() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set frames(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scale() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scale(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get depthWrite() {
    throw new Error("<ContactShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set depthWrite(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get refresh() {
    return this.$$.ctx[24];
  }
  set refresh(value) {
    throw new Error("<ContactShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ContactShadows_default = ContactShadows;

// node_modules/@threlte/extras/dist/lib/revision.js
var revision2 = Number.parseInt(REVISION.replace("dev", ""));

// node_modules/@threlte/extras/dist/components/Environment/GroundProjectedSkybox.svelte
function create_if_block4(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 4,
    blocks: [, , ,]
  };
  handle_promise(promise = /*module*/
  ctx[1], info);
  const block = {
    c: function create() {
      await_block_anchor = empty();
      info.block.c();
    },
    l: function claim(nodes) {
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      update_await_block_branch(info, ctx, dirty);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < 3; i += 1) {
        const block2 = info.blocks[i];
        transition_out(block2);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block4.name,
    type: "if",
    source: "(10:0) {#if envMap}",
    ctx
  });
  return block;
}
function create_catch_block(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_catch_block.name,
    type: "catch",
    source: "(1:0) <script>import { T }",
    ctx
  });
  return block;
}
function create_then_block(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    {
      is: revision2 > 160 ? (
        /*result*/
        ctx[4].GroundedSkybox
      ) : (
        /*result*/
        ctx[4].GroundProjectedSkybox
      )
    },
    { args: [
      /*envMap*/
      ctx[0]
    ] },
    /*$$restProps*/
    ctx[2]
  ];
  let t_props = {};
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = dirty & /*module, envMap, $$restProps*/
      7 ? get_spread_update(t_spread_levels, [
        dirty & /*module*/
        2 && {
          is: revision2 > 160 ? (
            /*result*/
            ctx2[4].GroundedSkybox
          ) : (
            /*result*/
            ctx2[4].GroundProjectedSkybox
          )
        },
        dirty & /*envMap*/
        1 && { args: [
          /*envMap*/
          ctx2[0]
        ] },
        dirty & /*$$restProps*/
        4 && get_spread_object(
          /*$$restProps*/
          ctx2[2]
        )
      ]) : {};
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_then_block.name,
    type: "then",
    source: "(11:29)      <T       is={revision > 160 ? result.GroundedSkybox : result.GroundProjectedSkybox}",
    ctx
  });
  return block;
}
function create_pending_block(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_pending_block.name,
    type: "pending",
    source: "(1:0) <script>import { T }",
    ctx
  });
  return block;
}
function create_fragment8(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*envMap*/
    ctx[0] && create_if_block4(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*envMap*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*envMap*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment8.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance8($$self, $$props, $$invalidate) {
  const omit_props_names = ["envMap"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("GroundProjectedSkybox", slots, []);
  let { envMap } = $$props;
  const url = revision2 > 160 ? "three/examples/jsm/objects/GroundedSkybox.js" : "three/examples/jsm/objects/GroundProjectedSkybox.js";
  const module = import(
    /* @vite-ignore */
    url
  );
  $$self.$$.on_mount.push(function() {
    if (envMap === void 0 && !("envMap" in $$props || $$self.$$.bound[$$self.$$.props["envMap"]])) {
      console.warn("<GroundProjectedSkybox> was created without expected prop 'envMap'");
    }
  });
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("envMap" in $$new_props) $$invalidate(0, envMap = $$new_props.envMap);
  };
  $$self.$capture_state = () => ({ T, revision: revision2, envMap, url, module });
  $$self.$inject_state = ($$new_props) => {
    if ("envMap" in $$props) $$invalidate(0, envMap = $$new_props.envMap);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [envMap, module, $$restProps];
}
var GroundProjectedSkybox = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance8, create_fragment8, safe_not_equal, { envMap: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "GroundProjectedSkybox",
      options,
      id: create_fragment8.name
    });
  }
  get envMap() {
    throw new Error("<GroundProjectedSkybox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set envMap(value) {
    throw new Error("<GroundProjectedSkybox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var GroundProjectedSkybox_default = GroundProjectedSkybox;

// node_modules/@threlte/extras/dist/components/Environment/Environment.svelte
function create_if_block5(ctx) {
  let groundprojectedskybox;
  let current;
  const groundprojectedskybox_spread_levels = [
    /*groundProjection*/
    ctx[0],
    { envMap: (
      /*previousEnvMap*/
      ctx[1]
    ) }
  ];
  let groundprojectedskybox_props = {};
  for (let i = 0; i < groundprojectedskybox_spread_levels.length; i += 1) {
    groundprojectedskybox_props = assign(groundprojectedskybox_props, groundprojectedskybox_spread_levels[i]);
  }
  groundprojectedskybox = new GroundProjectedSkybox_default({
    props: groundprojectedskybox_props,
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(groundprojectedskybox.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(groundprojectedskybox.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(groundprojectedskybox, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const groundprojectedskybox_changes = dirty & /*groundProjection, previousEnvMap*/
      3 ? get_spread_update(groundprojectedskybox_spread_levels, [
        dirty & /*groundProjection*/
        1 && get_spread_object(
          /*groundProjection*/
          ctx2[0]
        ),
        dirty & /*previousEnvMap*/
        2 && { envMap: (
          /*previousEnvMap*/
          ctx2[1]
        ) }
      ]) : {};
      groundprojectedskybox.$set(groundprojectedskybox_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(groundprojectedskybox.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(groundprojectedskybox.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(groundprojectedskybox, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block5.name,
    type: "if",
    source: "(91:0) {#if groundProjection}",
    ctx
  });
  return block;
}
function create_fragment9(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*groundProjection*/
    ctx[0] && create_if_block5(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*groundProjection*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*groundProjection*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment9.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance9($$self, $$props, $$invalidate) {
  let isCubeMap;
  let envPath;
  let $parent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Environment", slots, []);
  let { path = "" } = $$props;
  let { files } = $$props;
  let { isBackground = void 0 } = $$props;
  let { groundProjection = void 0 } = $$props;
  let { format = void 0 } = $$props;
  let { colorSpace = void 0 } = $$props;
  const isScene = (obj) => !!obj.isScene;
  const { scene: globalScene, invalidate } = useThrelte();
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(13, $parent = value));
  let scene = globalScene;
  if (isScene($parent)) scene = $parent;
  let previousSceneEnvironment = scene.environment;
  let previousSceneBackground = scene.background;
  let previousEnvPath = envPath;
  let previousEnvMap;
  let previousFormat;
  const pickLoader = () => {
    const inferredFormat = format || (Array.isArray(files) ? files[0] : files).split(".").pop() == "hdr" ? "hdr" : "ldr";
    if (isCubeMap && inferredFormat == "ldr") return CubeTextureLoader;
    if (!isCubeMap && inferredFormat == "ldr") return TextureLoader;
    if (isCubeMap && inferredFormat == "hdr") return HDRCubeTextureLoader;
    if (!isCubeMap && inferredFormat == "hdr") return RGBELoader;
    return TextureLoader;
  };
  const { remember } = useCache();
  const suspend = useSuspense();
  const loadEnvironment = async () => {
    const LoaderType = pickLoader();
    const loader = new LoaderType();
    loader.setDataType?.(FloatType);
    const filesKey = Array.isArray(files) ? files.join(",") : files;
    const cacheKey = [LoaderType, path, filesKey];
    const texture = await remember(
      async () => {
        return suspend(new Promise((resolve, reject) => {
          loader.setPath(path).load(files, (texture2) => {
            resolve(texture2);
          });
        }));
      },
      cacheKey
    );
    texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;
    texture.colorSpace = colorSpace ?? isCubeMap ? LinearSRGBColorSpace : SRGBColorSpace;
    $$invalidate(1, previousEnvMap = texture);
    $$invalidate(8, scene.environment = previousEnvMap, scene);
    if (isBackground) $$invalidate(8, scene.background = previousEnvMap, scene);
    invalidate();
    $$invalidate(10, previousFormat = format || void 0);
    $$invalidate(9, previousEnvPath = envPath);
  };
  onDestroy(() => {
    $$invalidate(8, scene.environment = previousSceneEnvironment, scene);
    $$invalidate(8, scene.background = previousSceneBackground, scene);
    if (previousEnvMap) previousEnvMap.dispose();
    $$invalidate(0, groundProjection = void 0);
    invalidate();
  });
  $$self.$$.on_mount.push(function() {
    if (files === void 0 && !("files" in $$props || $$self.$$.bound[$$self.$$.props["files"]])) {
      console.warn("<Environment> was created without expected prop 'files'");
    }
  });
  const writable_props = ["path", "files", "isBackground", "groundProjection", "format", "colorSpace"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Environment> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("path" in $$props2) $$invalidate(3, path = $$props2.path);
    if ("files" in $$props2) $$invalidate(4, files = $$props2.files);
    if ("isBackground" in $$props2) $$invalidate(5, isBackground = $$props2.isBackground);
    if ("groundProjection" in $$props2) $$invalidate(0, groundProjection = $$props2.groundProjection);
    if ("format" in $$props2) $$invalidate(6, format = $$props2.format);
    if ("colorSpace" in $$props2) $$invalidate(7, colorSpace = $$props2.colorSpace);
  };
  $$self.$capture_state = () => ({
    useCache,
    useParent,
    useThrelte,
    onDestroy,
    CubeReflectionMapping,
    CubeTextureLoader,
    EquirectangularReflectionMapping,
    FloatType,
    Texture,
    TextureLoader,
    SRGBColorSpace,
    LinearSRGBColorSpace,
    HDRCubeTextureLoader,
    RGBELoader,
    GroundProjectedSkybox: GroundProjectedSkybox_default,
    useSuspense,
    path,
    files,
    isBackground,
    groundProjection,
    format,
    colorSpace,
    isScene,
    globalScene,
    invalidate,
    parent,
    scene,
    previousSceneEnvironment,
    previousSceneBackground,
    previousEnvPath,
    previousEnvMap,
    previousFormat,
    pickLoader,
    remember,
    suspend,
    loadEnvironment,
    envPath,
    isCubeMap,
    $parent
  });
  $$self.$inject_state = ($$props2) => {
    if ("path" in $$props2) $$invalidate(3, path = $$props2.path);
    if ("files" in $$props2) $$invalidate(4, files = $$props2.files);
    if ("isBackground" in $$props2) $$invalidate(5, isBackground = $$props2.isBackground);
    if ("groundProjection" in $$props2) $$invalidate(0, groundProjection = $$props2.groundProjection);
    if ("format" in $$props2) $$invalidate(6, format = $$props2.format);
    if ("colorSpace" in $$props2) $$invalidate(7, colorSpace = $$props2.colorSpace);
    if ("scene" in $$props2) $$invalidate(8, scene = $$props2.scene);
    if ("previousSceneEnvironment" in $$props2) previousSceneEnvironment = $$props2.previousSceneEnvironment;
    if ("previousSceneBackground" in $$props2) previousSceneBackground = $$props2.previousSceneBackground;
    if ("previousEnvPath" in $$props2) $$invalidate(9, previousEnvPath = $$props2.previousEnvPath);
    if ("previousEnvMap" in $$props2) $$invalidate(1, previousEnvMap = $$props2.previousEnvMap);
    if ("previousFormat" in $$props2) $$invalidate(10, previousFormat = $$props2.previousFormat);
    if ("envPath" in $$props2) $$invalidate(11, envPath = $$props2.envPath);
    if ("isCubeMap" in $$props2) isCubeMap = $$props2.isCubeMap;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*files*/
    16) {
      $: isCubeMap = Array.isArray(files);
    }
    if ($$self.$$.dirty & /*path, files*/
    24) {
      $: $$invalidate(11, envPath = `${path}${files}`);
    }
    if ($$self.$$.dirty & /*envPath, previousEnvPath, format, previousFormat, previousEnvMap, groundProjection, isBackground, scene*/
    3939) {
      $: {
        if (envPath != previousEnvPath || format != previousFormat) {
          if (previousEnvMap) {
            previousEnvMap.dispose();
          }
          loadEnvironment();
          $$invalidate(0, groundProjection), $$invalidate(11, envPath), $$invalidate(9, previousEnvPath), $$invalidate(6, format), $$invalidate(10, previousFormat), $$invalidate(1, previousEnvMap), $$invalidate(5, isBackground), $$invalidate(8, scene), $$invalidate(3, path), $$invalidate(4, files);
        }
        if (!isBackground && scene.background) {
          $$invalidate(8, scene.background = null, scene);
          invalidate();
        }
        if (isBackground && !scene.background && previousEnvMap) {
          $$invalidate(8, scene.background = previousEnvMap, scene);
          invalidate();
        }
      }
    }
  };
  return [
    groundProjection,
    previousEnvMap,
    parent,
    path,
    files,
    isBackground,
    format,
    colorSpace,
    scene,
    previousEnvPath,
    previousFormat,
    envPath
  ];
}
var Environment = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance9, create_fragment9, safe_not_equal, {
      path: 3,
      files: 4,
      isBackground: 5,
      groundProjection: 0,
      format: 6,
      colorSpace: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Environment",
      options,
      id: create_fragment9.name
    });
  }
  get path() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set path(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get files() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set files(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isBackground() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set isBackground(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get groundProjection() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set groundProjection(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get format() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set format(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get colorSpace() {
    throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set colorSpace(value) {
    throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Environment_default = Environment;

// node_modules/@threlte/extras/dist/components/ImageMaterial/shaders.js
var vertexShader = (
  /* glsl */
  `
varying vec2 vUv;
varying vec2 vPos;
void main () {
  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
  vUv = uv;
  vPos = position.xy;
}
`
);
var fragmentShader = (
  /* glsl */
  `
// Majority from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
varying vec2 vUv;
varying vec2 vPos;
uniform vec2 scale;
uniform vec2 imageBounds;
uniform float resolution;
uniform vec3 color;
uniform sampler2D map;
uniform sampler2D colorProccessingTexture;
uniform float radius;
uniform float zoom;
uniform float alphaThreshold;
uniform float alphaSmoothing;
uniform float brightness;
uniform float contrast;
uniform float monochromeStrength;
uniform vec3 monochromeColor;
uniform float negative;
uniform vec3 hsl;
uniform float grayscale;
uniform float opacity;
uniform int colorProcessingEnabled;
uniform int colorProcessingTextureOverride;

#define PI 3.14159265;

vec2 aspect(vec2 size) {
  return size / min(size.x, size.y);
}

// from https://iquilezles.org/articles/distfunctions
float udRoundBox(vec2 p, vec2 b, float r) {
  return length(max(abs(p) - b + r, 0.0)) - r;
}

float hueToRgb(float p, float q, float t) {
  if (t < 0.0f)
    t += 1.0f;
  if (t > 1.0f)
    t -= 1.0f;
  if (t < 1.0f / 6.0f)
    return p + (q - p) * 6.0f * t;
  if (t < 1.0f / 2.0f)
    return q;
  if (t < 2.0f / 3.0f)
    return p + (q - p) * (2.0f / 3.0f - t) * 6.0f;
  return p;
}

vec3 rgbToHsl(vec3 color) {
  float max = max(max(color.r, color.g), color.b);
  float min = min(min(color.r, color.g), color.b);
  float h, s, l = (max + min) / 2.0f;

  if (max == min) {
    h = s = 0.0f;
  } else {
    float d = max - min;
    s = l > 0.5f ? d / (2.0f - max - min) : d / (max + min);
    if (max == color.r) {
      h = (color.g - color.b) / d + (color.g < color.b ? 6.0f : 0.0f);
    } else if (max == color.g) {
      h = (color.b - color.r) / d + 2.0f;
    } else if (max == color.b) {
      h = (color.r - color.g) / d + 4.0f;
    }
    h /= 6.0f;
  }

  return vec3(h, s, l);
}

vec3 hslToRgb(vec3 hsl) {
  float h = hsl.x;
  float s = hsl.y;
  float l = hsl.z;

  float r, g, b;

  if (s == 0.0f) {
    r = g = b = l;
  } else {
    float q = l < 0.5f ? l * (1.0f + s) : l + s - l * s;
    float p = 2.0f * l - q;
    r = hueToRgb(p, q, h + 1.0f / 3.0f);
    g = hueToRgb(p, q, h);
    b = hueToRgb(p, q, h - 1.0f / 3.0f);
  }

  return vec3(r, g, b);
}

vec3 monochrome(float x, vec3 col) {
  return col * exp(4.0 * x - 1.0);
}

void processColors (inout vec4 colors) {
	vec4 strength = vec4(1.0);

	if (colorProcessingTextureOverride == 1) {
		strength = texture2D(colorProccessingTexture, vUv);

		float smoothedAlpha = smoothstep(1.0 - alphaThreshold - alphaSmoothing, 1.0 - alphaThreshold, strength.a + 0.0001);
		colors.a *= smoothedAlpha;

		if (gl_FragColor.a == 0.0) {
			discard;
			return;
		}
	}

	// BRIGHTNESS
	colors.rgb = max(colors.rgb + brightness, 0.0);

	// CONTRAST
  colors.rgb = max(((colors.rgb - 0.5) * max(contrast + 1.0, 0.0)) + 0.5, 0.0);

	// HSL
	vec3 hslColor = rgbToHsl(colors.rgb);
	hslColor.x = mod(hslColor.x + hsl.x * strength.r ,1.0);
	hslColor.y *= (1.0 + hsl.y * strength.g);
	hslColor.z += hsl.z * strength.b;
	colors.rgb = max(hslToRgb(hslColor), vec3(0.0));

	// MONOCHROME
	colors.rgb = mix(colors.rgb, monochrome(hslColor.z, monochromeColor), monochromeStrength);
}

void main() {
  vec2 s = aspect(scale);
  vec2 i = aspect(imageBounds);
  float rs = s.x / s.y;
  float ri = i.x / i.y;
  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
  vec2 uv = vUv * s / new + offset;
  vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);

  vec2 res = vec2(scale * resolution);
  vec2 halfRes = 0.5 * res;
  float b = udRoundBox(vUv.xy * res - halfRes, halfRes, resolution * radius);
  vec3 a = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), smoothstep(0.0, 1.0, b));

	gl_FragColor = texture2D(map, zUv) * vec4(color, opacity * a);

	if (colorProcessingEnabled == 1) {
	  processColors(gl_FragColor);
	}

	if (gl_FragColor.a == 0.0) {
	  discard;
	}

  #include <tonemapping_fragment>
  #include <${revision2 >= 154 ? "colorspace_fragment" : "encodings_fragment"}>
	gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(1.0) - gl_FragColor.rgb, negative);
}
`
);

// node_modules/@threlte/extras/dist/components/ImageMaterial/ImageMaterial.svelte
var get_default_slot_changes5 = (dirty) => ({ ref: dirty[0] & /*ref*/
8 });
var get_default_slot_context5 = (ctx) => ({ ref: (
  /*ref*/
  ctx[3]
) });
function create_default_slot7(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[30].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[32],
    get_default_slot_context5
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*ref*/
        8 | dirty[1] & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[32],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[32]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[32],
              dirty,
              get_default_slot_changes5
            ),
            get_default_slot_context5
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot7.name,
    type: "slot",
    source: "(111:0) <T   is={ref}   {uniforms}   {toneMapped}   {transparent}   {side}   {vertexShader}   {fragmentShader}   {...$$restProps}   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment10(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[3]
    ) },
    { uniforms: (
      /*uniforms*/
      ctx[4]
    ) },
    { toneMapped: (
      /*toneMapped*/
      ctx[0]
    ) },
    { transparent: (
      /*transparent*/
      ctx[1]
    ) },
    { side: (
      /*side*/
      ctx[2]
    ) },
    { vertexShader },
    { fragmentShader },
    /*$$restProps*/
    ctx[10]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot7] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[31](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = dirty[0] & /*ref, uniforms, toneMapped, transparent, side, $$restProps*/
      1055 ? get_spread_update(t_spread_levels, [
        dirty[0] & /*ref*/
        8 && { is: (
          /*ref*/
          ctx2[3]
        ) },
        dirty[0] & /*uniforms*/
        16 && { uniforms: (
          /*uniforms*/
          ctx2[4]
        ) },
        dirty[0] & /*toneMapped*/
        1 && { toneMapped: (
          /*toneMapped*/
          ctx2[0]
        ) },
        dirty[0] & /*transparent*/
        2 && { transparent: (
          /*transparent*/
          ctx2[1]
        ) },
        dirty[0] & /*side*/
        4 && { side: (
          /*side*/
          ctx2[2]
        ) },
        t_spread_levels[5],
        t_spread_levels[6],
        dirty[0] & /*$$restProps*/
        1024 && get_spread_object(
          /*$$restProps*/
          ctx2[10]
        )
      ]) : {};
      if (dirty[0] & /*ref*/
      8 | dirty[1] & /*$$scope*/
      2) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[31](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment10.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance10($$self, $$props, $$invalidate) {
  let textureStore;
  const omit_props_names = [
    "color",
    "zoom",
    "radius",
    "alphaThreshold",
    "alphaSmoothing",
    "brightness",
    "contrast",
    "hue",
    "saturation",
    "lightness",
    "negative",
    "opacity",
    "toneMapped",
    "transparent",
    "texture",
    "monochromeColor",
    "monochromeStrength",
    "colorProcessingTexture",
    "side",
    "url",
    "ref"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let $textureStore, $$unsubscribe_textureStore = noop, $$subscribe_textureStore = () => ($$unsubscribe_textureStore(), $$unsubscribe_textureStore = subscribe(textureStore, ($$value) => $$invalidate(28, $textureStore = $$value)), textureStore);
  let $size;
  let $component;
  $$self.$$.on_destroy.push(() => $$unsubscribe_textureStore());
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ImageMaterial", slots, ["default"]);
  let { color = "white" } = $$props;
  let { zoom = 1 } = $$props;
  let { radius = 0 } = $$props;
  let { alphaThreshold = 0 } = $$props;
  let { alphaSmoothing = 0.1 } = $$props;
  let { brightness = 0 } = $$props;
  let { contrast = 0 } = $$props;
  let { hue = 0 } = $$props;
  let { saturation = 0 } = $$props;
  let { lightness = 0 } = $$props;
  let { negative = false } = $$props;
  let { opacity = 1 } = $$props;
  let { toneMapped = true } = $$props;
  let { transparent = false } = $$props;
  let { texture = void 0 } = $$props;
  let { monochromeColor = void 0 } = $$props;
  let { monochromeStrength = void 0 } = $$props;
  let { colorProcessingTexture = void 0 } = $$props;
  let { side = void 0 } = $$props;
  let { url = void 0 } = $$props;
  let { ref = new ShaderMaterial() } = $$props;
  const suspend = useSuspense();
  let { size } = useThrelte();
  validate_store(size, "size");
  component_subscribe($$self, size, (value) => $$invalidate(29, $size = value));
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(33, $parent = value));
  const uniforms = {
    color: { value: new Color(color) },
    scale: { value: new Vector2() },
    imageBounds: { value: new Vector2(1, 1) },
    resolution: { value: 1024 },
    map: { value: null },
    zoom: { value: zoom },
    radius: { value: radius },
    alphaThreshold: { value: alphaThreshold },
    alphaSmoothing: { value: alphaSmoothing },
    brightness: { value: brightness },
    contrast: { value: contrast },
    monochromeColor: { value: new Color(monochromeColor) },
    monochromeStrength: { value: monochromeStrength ?? 0 },
    negative: { value: negative ? 1 : 0 },
    opacity: { value: opacity },
    hsl: { value: new Vector3(0, 0, 0) },
    colorProccessingTexture: { value: null },
    colorProcessingTextureOverride: { value: 0 },
    colorProcessingEnabled: { value: 1 }
  };
  useTask(() => {
    const mesh = $parent;
    if (mesh === void 0) {
      return;
    }
    uniforms.scale.value.set(mesh.scale.x, mesh.scale.y);
    const geometry = mesh.geometry;
    if (geometry !== void 0 && "parameters" in geometry) {
      const { width, height } = geometry.parameters;
      uniforms.scale.value.set(uniforms.scale.value.x * width, uniforms.scale.value.y * height);
    }
  });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(6, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("color" in $$new_props) $$invalidate(11, color = $$new_props.color);
    if ("zoom" in $$new_props) $$invalidate(12, zoom = $$new_props.zoom);
    if ("radius" in $$new_props) $$invalidate(13, radius = $$new_props.radius);
    if ("alphaThreshold" in $$new_props) $$invalidate(14, alphaThreshold = $$new_props.alphaThreshold);
    if ("alphaSmoothing" in $$new_props) $$invalidate(15, alphaSmoothing = $$new_props.alphaSmoothing);
    if ("brightness" in $$new_props) $$invalidate(16, brightness = $$new_props.brightness);
    if ("contrast" in $$new_props) $$invalidate(17, contrast = $$new_props.contrast);
    if ("hue" in $$new_props) $$invalidate(18, hue = $$new_props.hue);
    if ("saturation" in $$new_props) $$invalidate(19, saturation = $$new_props.saturation);
    if ("lightness" in $$new_props) $$invalidate(20, lightness = $$new_props.lightness);
    if ("negative" in $$new_props) $$invalidate(21, negative = $$new_props.negative);
    if ("opacity" in $$new_props) $$invalidate(22, opacity = $$new_props.opacity);
    if ("toneMapped" in $$new_props) $$invalidate(0, toneMapped = $$new_props.toneMapped);
    if ("transparent" in $$new_props) $$invalidate(1, transparent = $$new_props.transparent);
    if ("texture" in $$new_props) $$invalidate(23, texture = $$new_props.texture);
    if ("monochromeColor" in $$new_props) $$invalidate(24, monochromeColor = $$new_props.monochromeColor);
    if ("monochromeStrength" in $$new_props) $$invalidate(25, monochromeStrength = $$new_props.monochromeStrength);
    if ("colorProcessingTexture" in $$new_props) $$invalidate(26, colorProcessingTexture = $$new_props.colorProcessingTexture);
    if ("side" in $$new_props) $$invalidate(2, side = $$new_props.side);
    if ("url" in $$new_props) $$invalidate(27, url = $$new_props.url);
    if ("ref" in $$new_props) $$invalidate(3, ref = $$new_props.ref);
    if ("$$scope" in $$new_props) $$invalidate(32, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    Color,
    Vector2,
    Vector3,
    ShaderMaterial,
    T,
    asyncWritable,
    forwardEventHandlers,
    useParent,
    useTask,
    useThrelte,
    useTexture,
    useSuspense,
    vertexShader,
    fragmentShader,
    color,
    zoom,
    radius,
    alphaThreshold,
    alphaSmoothing,
    brightness,
    contrast,
    hue,
    saturation,
    lightness,
    negative,
    opacity,
    toneMapped,
    transparent,
    texture,
    monochromeColor,
    monochromeStrength,
    colorProcessingTexture,
    side,
    url,
    ref,
    suspend,
    size,
    parent,
    uniforms,
    component,
    textureStore,
    $parent,
    $textureStore,
    $size,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("color" in $$props) $$invalidate(11, color = $$new_props.color);
    if ("zoom" in $$props) $$invalidate(12, zoom = $$new_props.zoom);
    if ("radius" in $$props) $$invalidate(13, radius = $$new_props.radius);
    if ("alphaThreshold" in $$props) $$invalidate(14, alphaThreshold = $$new_props.alphaThreshold);
    if ("alphaSmoothing" in $$props) $$invalidate(15, alphaSmoothing = $$new_props.alphaSmoothing);
    if ("brightness" in $$props) $$invalidate(16, brightness = $$new_props.brightness);
    if ("contrast" in $$props) $$invalidate(17, contrast = $$new_props.contrast);
    if ("hue" in $$props) $$invalidate(18, hue = $$new_props.hue);
    if ("saturation" in $$props) $$invalidate(19, saturation = $$new_props.saturation);
    if ("lightness" in $$props) $$invalidate(20, lightness = $$new_props.lightness);
    if ("negative" in $$props) $$invalidate(21, negative = $$new_props.negative);
    if ("opacity" in $$props) $$invalidate(22, opacity = $$new_props.opacity);
    if ("toneMapped" in $$props) $$invalidate(0, toneMapped = $$new_props.toneMapped);
    if ("transparent" in $$props) $$invalidate(1, transparent = $$new_props.transparent);
    if ("texture" in $$props) $$invalidate(23, texture = $$new_props.texture);
    if ("monochromeColor" in $$props) $$invalidate(24, monochromeColor = $$new_props.monochromeColor);
    if ("monochromeStrength" in $$props) $$invalidate(25, monochromeStrength = $$new_props.monochromeStrength);
    if ("colorProcessingTexture" in $$props) $$invalidate(26, colorProcessingTexture = $$new_props.colorProcessingTexture);
    if ("side" in $$props) $$invalidate(2, side = $$new_props.side);
    if ("url" in $$props) $$invalidate(27, url = $$new_props.url);
    if ("ref" in $$props) $$invalidate(3, ref = $$new_props.ref);
    if ("size" in $$props) $$invalidate(7, size = $$new_props.size);
    if ("textureStore" in $$props) $$subscribe_textureStore($$invalidate(5, textureStore = $$new_props.textureStore));
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*url, texture*/
    142606336) {
      $: $$subscribe_textureStore($$invalidate(5, textureStore = suspend(url ? useTexture(url) : asyncWritable(Promise.resolve(texture)))));
    }
    if ($$self.$$.dirty[0] & /*$size*/
    536870912) {
      $: $$invalidate(4, uniforms.resolution.value = Math.max($size.width, $size.height), uniforms);
    }
    if ($$self.$$.dirty[0] & /*zoom*/
    4096) {
      $: $$invalidate(4, uniforms.zoom.value = zoom, uniforms);
    }
    if ($$self.$$.dirty[0] & /*radius*/
    8192) {
      $: $$invalidate(4, uniforms.radius.value = radius, uniforms);
    }
    if ($$self.$$.dirty[0] & /*opacity*/
    4194304) {
      $: $$invalidate(4, uniforms.opacity.value = opacity, uniforms);
    }
    if ($$self.$$.dirty[0] & /*alphaThreshold*/
    16384) {
      $: $$invalidate(4, uniforms.alphaThreshold.value = alphaThreshold, uniforms);
    }
    if ($$self.$$.dirty[0] & /*alphaSmoothing*/
    32768) {
      $: $$invalidate(4, uniforms.alphaSmoothing.value = alphaSmoothing, uniforms);
    }
    if ($$self.$$.dirty[0] & /*brightness*/
    65536) {
      $: $$invalidate(4, uniforms.brightness.value = brightness, uniforms);
    }
    if ($$self.$$.dirty[0] & /*contrast*/
    131072) {
      $: $$invalidate(4, uniforms.contrast.value = contrast, uniforms);
    }
    if ($$self.$$.dirty[0] & /*hue*/
    262144) {
      $: $$invalidate(4, uniforms.hsl.value.x = hue, uniforms);
    }
    if ($$self.$$.dirty[0] & /*saturation*/
    524288) {
      $: $$invalidate(4, uniforms.hsl.value.y = saturation, uniforms);
    }
    if ($$self.$$.dirty[0] & /*lightness*/
    1048576) {
      $: $$invalidate(4, uniforms.hsl.value.z = lightness, uniforms);
    }
    if ($$self.$$.dirty[0] & /*negative*/
    2097152) {
      $: $$invalidate(4, uniforms.negative.value = negative ? 1 : 0, uniforms);
    }
    if ($$self.$$.dirty[0] & /*$textureStore*/
    268435456) {
      $: $$invalidate(4, uniforms.map.value = $textureStore ?? null, uniforms);
    }
    if ($$self.$$.dirty[0] & /*colorProcessingTexture*/
    67108864) {
      $: $$invalidate(4, uniforms.colorProccessingTexture.value = colorProcessingTexture ?? null, uniforms);
    }
    if ($$self.$$.dirty[0] & /*colorProcessingTexture*/
    67108864) {
      $: $$invalidate(4, uniforms.colorProcessingTextureOverride.value = colorProcessingTexture ? 1 : 0, uniforms);
    }
    if ($$self.$$.dirty[0] & /*monochromeColor, uniforms, monochromeStrength*/
    50331664) {
      $: if (monochromeColor !== void 0) {
        uniforms.monochromeColor.value.set(monochromeColor);
        $$invalidate(4, uniforms.monochromeStrength.value = monochromeStrength ?? 1, uniforms);
      } else {
        $$invalidate(4, uniforms.monochromeStrength.value = 0, uniforms);
      }
    }
    if ($$self.$$.dirty[0] & /*monochromeColor, monochromeStrength, brightness, contrast, hue, saturation, lightness, colorProcessingTexture*/
    119472128) {
      $: {
        let colorProcessingEnabled = 0;
        const monochromeCheck = (monochromeColor ? 1 : 0) * (monochromeStrength === void 0 ? 1 : monochromeStrength);
        for (const value of [
          brightness,
          contrast,
          hue,
          saturation,
          lightness,
          monochromeCheck,
          colorProcessingTexture ? 1 : 0
        ]) {
          if (value !== 0) {
            colorProcessingEnabled = 1;
            break;
          }
        }
        $$invalidate(4, uniforms.colorProcessingEnabled.value = colorProcessingEnabled, uniforms);
      }
    }
    if ($$self.$$.dirty[0] & /*uniforms, color*/
    2064) {
      $: uniforms.color.value.set(color);
    }
    if ($$self.$$.dirty[0] & /*uniforms, $textureStore*/
    268435472) {
      $: uniforms.imageBounds.value.set($textureStore?.image.width ?? 0, $textureStore?.image.height ?? 0);
    }
  };
  return [
    toneMapped,
    transparent,
    side,
    ref,
    uniforms,
    textureStore,
    $component,
    size,
    parent,
    component,
    $$restProps,
    color,
    zoom,
    radius,
    alphaThreshold,
    alphaSmoothing,
    brightness,
    contrast,
    hue,
    saturation,
    lightness,
    negative,
    opacity,
    texture,
    monochromeColor,
    monochromeStrength,
    colorProcessingTexture,
    url,
    $textureStore,
    $size,
    slots,
    t_binding,
    $$scope
  ];
}
var ImageMaterial = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance10,
      create_fragment10,
      safe_not_equal,
      {
        color: 11,
        zoom: 12,
        radius: 13,
        alphaThreshold: 14,
        alphaSmoothing: 15,
        brightness: 16,
        contrast: 17,
        hue: 18,
        saturation: 19,
        lightness: 20,
        negative: 21,
        opacity: 22,
        toneMapped: 0,
        transparent: 1,
        texture: 23,
        monochromeColor: 24,
        monochromeStrength: 25,
        colorProcessingTexture: 26,
        side: 2,
        url: 27,
        ref: 3
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ImageMaterial",
      options,
      id: create_fragment10.name
    });
  }
  get color() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zoom() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zoom(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get radius() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set radius(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get alphaThreshold() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set alphaThreshold(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get alphaSmoothing() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set alphaSmoothing(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get brightness() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set brightness(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get contrast() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set contrast(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hue() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hue(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get saturation() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set saturation(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lightness() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lightness(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get negative() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set negative(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get opacity() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set opacity(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toneMapped() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set toneMapped(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get transparent() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transparent(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get texture() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set texture(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get monochromeColor() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set monochromeColor(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get monochromeStrength() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set monochromeStrength(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get colorProcessingTexture() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set colorProcessingTexture(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get side() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set side(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get url() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set url(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<ImageMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<ImageMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ImageMaterial_default = ImageMaterial;

// node_modules/@threlte/extras/dist/components/Grid/gridShaders.js
var vertexShader2 = (
  /*glsl*/
  `
  varying vec3 localPosition;
  varying vec4 worldPosition;

  uniform vec3 worldCamProjPosition;
	uniform vec3 worldPlanePosition;
	uniform float fadeDistance;
	uniform bool infiniteGrid;
	uniform bool followCamera;

	uniform int coord0;
	uniform int coord1;
	uniform int coord2;

	void main() {
		localPosition = vec3(
		  position[coord0],
			position[coord1],
			position[coord2]
		);

		if (infiniteGrid) {
		  localPosition *= 1.0 + fadeDistance;
		}

		worldPosition = modelMatrix * vec4(localPosition, 1.0);
		if (followCamera) {
		  worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);
      localPosition = (inverse(modelMatrix) * worldPosition).xyz;
		}

		gl_Position = projectionMatrix * viewMatrix * worldPosition;
	}
`
);
var fragmentShader2 = (
  /*glsl*/
  `
  #define PI 3.141592653589793

	varying vec3 localPosition;
	varying vec4 worldPosition;

	uniform vec3 worldCamProjPosition;
	uniform float cellSize;
	uniform float sectionSize;
	uniform vec3 cellColor;
	uniform vec3 sectionColor;
	uniform float fadeDistance;
	uniform float fadeStrength;
	uniform float cellThickness;
	uniform float sectionThickness;
	uniform vec3 backgroundColor;
	uniform float backgroundOpacity;

	uniform bool infiniteGrid;

	uniform int coord0;
	uniform int coord1;
	uniform int coord2;

	// 0 - default; 1 - lines; 2 - circles; 3 - polar
	uniform int gridType;

  // lineGrid coord for lines
	uniform int lineGridCoord;

	// circlegrid max radius
	uniform float circleGridMaxRadius;

	// polar grid dividers
	uniform float polarCellDividers;
	uniform float polarSectionDividers;

	float getSquareGrid(float size, float thickness, vec3 localPos) {
		vec2 coord = localPos.xy / size;

		vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);
		float line = min(grid.x, grid.y) + 1.0 - thickness;

		return 1.0 - min(line, 1.0);
	}

	float getLinesGrid(float size, float thickness, vec3 localPos) {
		float coord = localPos[lineGridCoord] / size;
		float line = abs(fract(coord - 0.5) - 0.5) / fwidth(coord) - thickness * 0.2;

		return 1.0 - min(line, 1.0);
	}

	float getCirclesGrid(float size, float thickness, vec3 localPos) {
		float coord = length(localPos.xy) / size;
		float line = abs(fract(coord - 0.5) - 0.5) / fwidth(coord) - thickness * 0.2;

		if (!infiniteGrid && circleGridMaxRadius > 0. && coord > circleGridMaxRadius + thickness * 0.05) {
		  discard;
		}

		return 1.0 - min(line, 1.0);
	}

	float getPolarGrid(float size, float thickness, float polarDividers, vec3 localPos) {
		float rad = length(localPos.xy) / size;
		vec2 coord = vec2(rad, atan(localPos.x, localPos.y) * polarDividers / PI) ;

		vec2 wrapped = vec2(coord.x, fract(coord.y / (2.0 * polarDividers)) * (2.0 * polarDividers));
		vec2 coordWidth = fwidth(coord);
		vec2 wrappedWidth = fwidth(wrapped);
		vec2 width = (coord.y < -polarDividers * 0.5 || coord.y > polarDividers * 0.5 ? wrappedWidth : coordWidth) * (1.+thickness*0.25);

		// Compute anti-aliased world-space grid lines
		vec2 grid = abs(fract(coord - 0.5) - 0.5) / width;
		float line = min(grid.x, grid.y);

if (!infiniteGrid && circleGridMaxRadius > 0.0 && rad > circleGridMaxRadius + thickness * 0.05) {
		  discard;
		}

		return 1.0 - min(line, 1.0);
	}

	void main() {
		float g1 = 0.0;
		float g2 = 0.0;

		vec3 localPos = vec3(localPosition[coord0], localPosition[coord1], localPosition[coord2]);

		if (gridType == 0) {
			g1 = getSquareGrid(cellSize, cellThickness, localPos);
			g2 = getSquareGrid(sectionSize, sectionThickness, localPos);

		} else if (gridType == 1) {
			g1 = getLinesGrid(cellSize, cellThickness, localPos);
			g2 = getLinesGrid(sectionSize, sectionThickness, localPos);

		} else if (gridType == 2) {
			g1 = getCirclesGrid(cellSize, cellThickness, localPos);
			g2 = getCirclesGrid(sectionSize, sectionThickness, localPos);

		} else if (gridType == 3) {
			g1 = getPolarGrid(cellSize, cellThickness, polarCellDividers, localPos);
			g2 = getPolarGrid(sectionSize, sectionThickness, polarSectionDividers, localPos);
		}

		float dist = distance(worldCamProjPosition, worldPosition.xyz);
		float d = 1.0 - min(dist / fadeDistance, 1.0);
		float fadeFactor = pow(d, fadeStrength) * 0.95;

		vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));

		if (backgroundOpacity > 0.0) {
			float linesAlpha = clamp((g1 + g2) * fadeFactor, 0.0,1.0);
			vec3 finalColor = mix(backgroundColor, color, linesAlpha);
			float blendedAlpha = max(linesAlpha, backgroundOpacity * fadeFactor);
			gl_FragColor = vec4(finalColor, blendedAlpha);

		} else {
			gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));
			gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);
		}

		if (gl_FragColor.a <= 0.0) {
		  discard;
		}

		#include <tonemapping_fragment>
		#include <${revision2 < 154 ? "encodings_fragment" : "colorspace_fragment"}>
	}
`
);

// node_modules/@threlte/extras/dist/components/Grid/Grid.svelte
var get_default_slot_changes6 = (dirty) => ({ ref: dirty[0] & /*ref*/
1 });
var get_default_slot_context6 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function fallback_block(ctx) {
  let t_planegeometry;
  let current;
  t_planegeometry = new T.PlaneGeometry({
    props: {
      args: typeof /*gridSize*/
      ctx[1] == "number" ? [
        /*gridSize*/
        ctx[1],
        /*gridSize*/
        ctx[1]
      ] : (
        /*gridSize*/
        ctx[1]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_planegeometry.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_planegeometry.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_planegeometry, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_planegeometry_changes = {};
      if (dirty[0] & /*gridSize*/
      2) t_planegeometry_changes.args = typeof /*gridSize*/
      ctx2[1] == "number" ? [
        /*gridSize*/
        ctx2[1],
        /*gridSize*/
        ctx2[1]
      ] : (
        /*gridSize*/
        ctx2[1]
      );
      t_planegeometry.$set(t_planegeometry_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_planegeometry.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_planegeometry.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_planegeometry, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(189:14)      ",
    ctx
  });
  return block;
}
function create_default_slot8(ctx) {
  let t_shadermaterial;
  let t;
  let current;
  t_shadermaterial = new T.ShaderMaterial({
    props: {
      fragmentShader: fragmentShader2,
      vertexShader: vertexShader2,
      uniforms: (
        /*uniforms*/
        ctx[3]
      ),
      transparent: true,
      side: (
        /*side*/
        ctx[2]
      )
    },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[25].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[28],
    get_default_slot_context6
  );
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      create_component(t_shadermaterial.$$.fragment);
      t = space();
      if (default_slot_or_fallback) default_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      claim_component(t_shadermaterial.$$.fragment, nodes);
      t = claim_space(nodes);
      if (default_slot_or_fallback) default_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_shadermaterial, target, anchor);
      insert_hydration_dev(target, t, anchor);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_shadermaterial_changes = {};
      if (dirty[0] & /*uniforms*/
      8) t_shadermaterial_changes.uniforms = /*uniforms*/
      ctx2[3];
      if (dirty[0] & /*side*/
      4) t_shadermaterial_changes.side = /*side*/
      ctx2[2];
      t_shadermaterial.$set(t_shadermaterial_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope, ref*/
        268435457)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[28],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[28]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[28],
              dirty,
              get_default_slot_changes6
            ),
            get_default_slot_context6
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*gridSize*/
        2)) {
          default_slot_or_fallback.p(ctx2, !current ? [-1, -1] : dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_shadermaterial.$$.fragment, local);
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_shadermaterial.$$.fragment, local);
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
      destroy_component(t_shadermaterial, detaching);
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot8.name,
    type: "slot",
    source: "(175:0) <T.Mesh   bind:this={$component}   bind:ref   frustumCulled={false}   {...$$restProps}   let:ref >",
    ctx
  });
  return block;
}
function create_fragment11(ctx) {
  let t_mesh;
  let updating_ref;
  let current;
  const t_mesh_spread_levels = [
    { frustumCulled: false },
    /*$$restProps*/
    ctx[6]
  ];
  function t_mesh_ref_binding(value) {
    ctx[27](value);
  }
  let t_mesh_props = {
    $$slots: {
      default: [create_default_slot8, ({ ref }) => ({ 0: ref }), ({ ref }) => [ref ? 1 : 0]]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_mesh_spread_levels.length; i += 1) {
    t_mesh_props = assign(t_mesh_props, t_mesh_spread_levels[i]);
  }
  if (
    /*ref*/
    ctx[0] !== void 0
  ) {
    t_mesh_props.ref = /*ref*/
    ctx[0];
  }
  t_mesh = new T.Mesh({ props: t_mesh_props, $$inline: true });
  ctx[26](t_mesh);
  binding_callbacks.push(() => bind(t_mesh, "ref", t_mesh_ref_binding));
  const block = {
    c: function create() {
      create_component(t_mesh.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_mesh.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_mesh, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_mesh_changes = dirty[0] & /*$$restProps*/
      64 ? get_spread_update(t_mesh_spread_levels, [t_mesh_spread_levels[0], get_spread_object(
        /*$$restProps*/
        ctx2[6]
      )]) : {};
      if (dirty[0] & /*$$scope, gridSize, ref, uniforms, side*/
      268435471) {
        t_mesh_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty[0] & /*ref*/
      1) {
        updating_ref = true;
        t_mesh_changes.ref = /*ref*/
        ctx2[0];
        add_flush_callback(() => updating_ref = false);
      }
      t_mesh.$set(t_mesh_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_mesh.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_mesh.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[26](null);
      destroy_component(t_mesh, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment11.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance11($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "cellColor",
    "sectionColor",
    "cellSize",
    "backgroundColor",
    "backgroundOpacity",
    "sectionSize",
    "plane",
    "gridSize",
    "followCamera",
    "infiniteGrid",
    "fadeDistance",
    "fadeStrength",
    "cellThickness",
    "sectionThickness",
    "side",
    "type",
    "axis",
    "maxRadius",
    "cellDividers",
    "sectionDividers",
    "ref"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Grid", slots, ["default"]);
  let { cellColor = "#000000" } = $$props;
  let { sectionColor = "#0000ee" } = $$props;
  let { cellSize = 1 } = $$props;
  let { backgroundColor = "#dadada" } = $$props;
  let { backgroundOpacity = 0 } = $$props;
  let { sectionSize = 10 } = $$props;
  let { plane = "xz" } = $$props;
  let { gridSize = [20, 20] } = $$props;
  let { followCamera = false } = $$props;
  let { infiniteGrid = false } = $$props;
  let { fadeDistance = 100 } = $$props;
  let { fadeStrength = 1 } = $$props;
  let { cellThickness = 1 } = $$props;
  let { sectionThickness = 2 } = $$props;
  let { side = DoubleSide } = $$props;
  let { type = "grid" } = $$props;
  let { axis = "x" } = $$props;
  let { maxRadius = 0 } = $$props;
  let { cellDividers = 6 } = $$props;
  let { sectionDividers = 2 } = $$props;
  let { ref } = $$props;
  const { invalidate, camera } = useThrelte();
  const gridPlane = new Plane();
  const upVector = new Vector3(0, 1, 0);
  const zeroVector = new Vector3(0, 0, 0);
  const axisToInt = { x: 0, y: 1, z: 2 };
  const planeToAxes = { xz: "xzy", xy: "xyz", zy: "zyx" };
  const gridType = { grid: 0, lines: 1, circular: 2, polar: 3 };
  const uniforms = {
    cellSize: { value: cellSize },
    sectionSize: { value: sectionSize },
    cellColor: { value: new Color(cellColor) },
    sectionColor: { value: new Color(sectionColor) },
    backgroundColor: { value: new Color(backgroundColor) },
    backgroundOpacity: { value: backgroundOpacity },
    fadeDistance: { value: fadeDistance },
    fadeStrength: { value: fadeStrength },
    cellThickness: { value: cellThickness },
    sectionThickness: { value: sectionThickness },
    infiniteGrid: { value: infiniteGrid },
    followCamera: { value: followCamera },
    coord0: { value: 0 },
    coord1: { value: 2 },
    coord2: { value: 1 },
    gridType: { value: gridType.grid },
    lineGridCoord: { value: axisToInt[axis] },
    circleGridMaxRadius: { value: maxRadius },
    polarCellDividers: { value: cellDividers },
    polarSectionDividers: { value: sectionDividers },
    worldCamProjPosition: { value: new Vector3() },
    worldPlanePosition: { value: new Vector3() }
  };
  useTask(() => {
    gridPlane.setFromNormalAndCoplanarPoint(upVector, zeroVector).applyMatrix4(ref.matrixWorld);
    const material = ref.material;
    const worldCamProjPosition = material.uniforms.worldCamProjPosition;
    const worldPlanePosition = material.uniforms.worldPlanePosition;
    gridPlane.projectPoint(camera.current.position, worldCamProjPosition.value);
    worldPlanePosition.value.set(0, 0, 0).applyMatrix4(ref.matrixWorld);
    invalidate();
  });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(4, $component = value));
  $$self.$$.on_mount.push(function() {
    if (ref === void 0 && !("ref" in $$props || $$self.$$.bound[$$self.$$.props["ref"]])) {
      console.warn("<Grid> was created without expected prop 'ref'");
    }
  });
  function t_mesh_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  function t_mesh_ref_binding(value) {
    ref = value;
    $$invalidate(0, ref);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("cellColor" in $$new_props) $$invalidate(7, cellColor = $$new_props.cellColor);
    if ("sectionColor" in $$new_props) $$invalidate(8, sectionColor = $$new_props.sectionColor);
    if ("cellSize" in $$new_props) $$invalidate(9, cellSize = $$new_props.cellSize);
    if ("backgroundColor" in $$new_props) $$invalidate(10, backgroundColor = $$new_props.backgroundColor);
    if ("backgroundOpacity" in $$new_props) $$invalidate(11, backgroundOpacity = $$new_props.backgroundOpacity);
    if ("sectionSize" in $$new_props) $$invalidate(12, sectionSize = $$new_props.sectionSize);
    if ("plane" in $$new_props) $$invalidate(13, plane = $$new_props.plane);
    if ("gridSize" in $$new_props) $$invalidate(1, gridSize = $$new_props.gridSize);
    if ("followCamera" in $$new_props) $$invalidate(14, followCamera = $$new_props.followCamera);
    if ("infiniteGrid" in $$new_props) $$invalidate(15, infiniteGrid = $$new_props.infiniteGrid);
    if ("fadeDistance" in $$new_props) $$invalidate(16, fadeDistance = $$new_props.fadeDistance);
    if ("fadeStrength" in $$new_props) $$invalidate(17, fadeStrength = $$new_props.fadeStrength);
    if ("cellThickness" in $$new_props) $$invalidate(18, cellThickness = $$new_props.cellThickness);
    if ("sectionThickness" in $$new_props) $$invalidate(19, sectionThickness = $$new_props.sectionThickness);
    if ("side" in $$new_props) $$invalidate(2, side = $$new_props.side);
    if ("type" in $$new_props) $$invalidate(20, type = $$new_props.type);
    if ("axis" in $$new_props) $$invalidate(21, axis = $$new_props.axis);
    if ("maxRadius" in $$new_props) $$invalidate(22, maxRadius = $$new_props.maxRadius);
    if ("cellDividers" in $$new_props) $$invalidate(23, cellDividers = $$new_props.cellDividers);
    if ("sectionDividers" in $$new_props) $$invalidate(24, sectionDividers = $$new_props.sectionDividers);
    if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
    if ("$$scope" in $$new_props) $$invalidate(28, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    forwardEventHandlers,
    useTask,
    useThrelte,
    Color,
    DoubleSide,
    Plane,
    Vector3,
    fragmentShader: fragmentShader2,
    vertexShader: vertexShader2,
    cellColor,
    sectionColor,
    cellSize,
    backgroundColor,
    backgroundOpacity,
    sectionSize,
    plane,
    gridSize,
    followCamera,
    infiniteGrid,
    fadeDistance,
    fadeStrength,
    cellThickness,
    sectionThickness,
    side,
    type,
    axis,
    maxRadius,
    cellDividers,
    sectionDividers,
    ref,
    invalidate,
    camera,
    gridPlane,
    upVector,
    zeroVector,
    axisToInt,
    planeToAxes,
    gridType,
    uniforms,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("cellColor" in $$props) $$invalidate(7, cellColor = $$new_props.cellColor);
    if ("sectionColor" in $$props) $$invalidate(8, sectionColor = $$new_props.sectionColor);
    if ("cellSize" in $$props) $$invalidate(9, cellSize = $$new_props.cellSize);
    if ("backgroundColor" in $$props) $$invalidate(10, backgroundColor = $$new_props.backgroundColor);
    if ("backgroundOpacity" in $$props) $$invalidate(11, backgroundOpacity = $$new_props.backgroundOpacity);
    if ("sectionSize" in $$props) $$invalidate(12, sectionSize = $$new_props.sectionSize);
    if ("plane" in $$props) $$invalidate(13, plane = $$new_props.plane);
    if ("gridSize" in $$props) $$invalidate(1, gridSize = $$new_props.gridSize);
    if ("followCamera" in $$props) $$invalidate(14, followCamera = $$new_props.followCamera);
    if ("infiniteGrid" in $$props) $$invalidate(15, infiniteGrid = $$new_props.infiniteGrid);
    if ("fadeDistance" in $$props) $$invalidate(16, fadeDistance = $$new_props.fadeDistance);
    if ("fadeStrength" in $$props) $$invalidate(17, fadeStrength = $$new_props.fadeStrength);
    if ("cellThickness" in $$props) $$invalidate(18, cellThickness = $$new_props.cellThickness);
    if ("sectionThickness" in $$props) $$invalidate(19, sectionThickness = $$new_props.sectionThickness);
    if ("side" in $$props) $$invalidate(2, side = $$new_props.side);
    if ("type" in $$props) $$invalidate(20, type = $$new_props.type);
    if ("axis" in $$props) $$invalidate(21, axis = $$new_props.axis);
    if ("maxRadius" in $$props) $$invalidate(22, maxRadius = $$new_props.maxRadius);
    if ("cellDividers" in $$props) $$invalidate(23, cellDividers = $$new_props.cellDividers);
    if ("sectionDividers" in $$props) $$invalidate(24, sectionDividers = $$new_props.sectionDividers);
    if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*plane*/
    8192) {
      $: {
        const axes = planeToAxes[plane];
        const c0 = axes.charAt(0);
        const c1 = axes.charAt(1);
        const c2 = axes.charAt(2);
        $$invalidate(3, uniforms.coord0.value = axisToInt[c0], uniforms);
        $$invalidate(3, uniforms.coord1.value = axisToInt[c1], uniforms);
        $$invalidate(3, uniforms.coord2.value = axisToInt[c2], uniforms);
      }
    }
    if ($$self.$$.dirty[0] & /*cellSize*/
    512) {
      $: $$invalidate(3, uniforms.cellSize.value = cellSize, uniforms);
    }
    if ($$self.$$.dirty[0] & /*sectionSize*/
    4096) {
      $: $$invalidate(3, uniforms.sectionSize.value = sectionSize, uniforms);
    }
    if ($$self.$$.dirty[0] & /*backgroundOpacity*/
    2048) {
      $: $$invalidate(3, uniforms.backgroundOpacity.value = backgroundOpacity, uniforms);
    }
    if ($$self.$$.dirty[0] & /*fadeDistance*/
    65536) {
      $: $$invalidate(3, uniforms.fadeDistance.value = fadeDistance, uniforms);
    }
    if ($$self.$$.dirty[0] & /*fadeStrength*/
    131072) {
      $: $$invalidate(3, uniforms.fadeStrength.value = fadeStrength, uniforms);
    }
    if ($$self.$$.dirty[0] & /*cellThickness*/
    262144) {
      $: $$invalidate(3, uniforms.cellThickness.value = cellThickness, uniforms);
    }
    if ($$self.$$.dirty[0] & /*sectionThickness*/
    524288) {
      $: $$invalidate(3, uniforms.sectionThickness.value = sectionThickness, uniforms);
    }
    if ($$self.$$.dirty[0] & /*followCamera*/
    16384) {
      $: $$invalidate(3, uniforms.followCamera.value = followCamera, uniforms);
    }
    if ($$self.$$.dirty[0] & /*infiniteGrid*/
    32768) {
      $: $$invalidate(3, uniforms.infiniteGrid.value = infiniteGrid, uniforms);
    }
    if ($$self.$$.dirty[0] & /*type, axis, maxRadius, cellDividers, sectionDividers*/
    32505856) {
      $: {
        switch (type) {
          case "grid": {
            $$invalidate(3, uniforms.gridType.value = gridType.grid, uniforms);
            break;
          }
          case "lines": {
            $$invalidate(3, uniforms.gridType.value = gridType.lines, uniforms);
            $$invalidate(3, uniforms.lineGridCoord.value = axisToInt[axis], uniforms);
            break;
          }
          case "circular": {
            $$invalidate(3, uniforms.gridType.value = gridType.circular, uniforms);
            $$invalidate(3, uniforms.circleGridMaxRadius.value = maxRadius, uniforms);
            break;
          }
          case "polar": {
            $$invalidate(3, uniforms.gridType.value = gridType.polar, uniforms);
            $$invalidate(3, uniforms.circleGridMaxRadius.value = maxRadius, uniforms);
            $$invalidate(3, uniforms.polarCellDividers.value = cellDividers, uniforms);
            $$invalidate(3, uniforms.polarSectionDividers.value = sectionDividers, uniforms);
            break;
          }
        }
        invalidate();
      }
    }
    if ($$self.$$.dirty[0] & /*uniforms, cellColor*/
    136) {
      $: uniforms.cellColor.value.set(cellColor);
    }
    if ($$self.$$.dirty[0] & /*uniforms, sectionColor*/
    264) {
      $: uniforms.sectionColor.value.set(sectionColor);
    }
    if ($$self.$$.dirty[0] & /*uniforms, backgroundColor*/
    1032) {
      $: uniforms.backgroundColor.value.set(backgroundColor);
    }
  };
  return [
    ref,
    gridSize,
    side,
    uniforms,
    $component,
    component,
    $$restProps,
    cellColor,
    sectionColor,
    cellSize,
    backgroundColor,
    backgroundOpacity,
    sectionSize,
    plane,
    followCamera,
    infiniteGrid,
    fadeDistance,
    fadeStrength,
    cellThickness,
    sectionThickness,
    type,
    axis,
    maxRadius,
    cellDividers,
    sectionDividers,
    slots,
    t_mesh_binding,
    t_mesh_ref_binding,
    $$scope
  ];
}
var Grid = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance11,
      create_fragment11,
      safe_not_equal,
      {
        cellColor: 7,
        sectionColor: 8,
        cellSize: 9,
        backgroundColor: 10,
        backgroundOpacity: 11,
        sectionSize: 12,
        plane: 13,
        gridSize: 1,
        followCamera: 14,
        infiniteGrid: 15,
        fadeDistance: 16,
        fadeStrength: 17,
        cellThickness: 18,
        sectionThickness: 19,
        side: 2,
        type: 20,
        axis: 21,
        maxRadius: 22,
        cellDividers: 23,
        sectionDividers: 24,
        ref: 0
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Grid",
      options,
      id: create_fragment11.name
    });
  }
  get cellColor() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cellColor(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sectionColor() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sectionColor(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get cellSize() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cellSize(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get backgroundColor() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set backgroundColor(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get backgroundOpacity() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set backgroundOpacity(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sectionSize() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sectionSize(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get plane() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set plane(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get gridSize() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set gridSize(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get followCamera() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set followCamera(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get infiniteGrid() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set infiniteGrid(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fadeDistance() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fadeDistance(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fadeStrength() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fadeStrength(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get cellThickness() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cellThickness(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sectionThickness() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sectionThickness(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get side() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set side(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get type() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set type(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get axis() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set axis(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get maxRadius() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set maxRadius(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get cellDividers() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cellDividers(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sectionDividers() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sectionDividers(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Grid_default = Grid;

// node_modules/@threlte/extras/dist/components/RoundedBoxGeometry/RoundedBoxGeometry.svelte
var get_default_slot_changes7 = (dirty) => ({ ref: dirty & /*ref*/
131072 });
var get_default_slot_context7 = (ctx) => ({ ref: (
  /*ref*/
  ctx[17]
) });
function create_default_slot9(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_default_slot_context7
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        163840)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_default_slot_changes7
            ),
            get_default_slot_context7
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot9.name,
    type: "slot",
    source: "(35:0) <T.ExtrudeGeometry   let:ref   bind:this={$component}   args={[shape, params]}   on:create={({ ref }) => {     ref.center()     toCreasedNormals(ref, creaseAngle)   }} >",
    ctx
  });
  return block;
}
function create_fragment12(ctx) {
  let t_extrudegeometry;
  let current;
  let t_extrudegeometry_props = {
    args: [
      /*shape*/
      ctx[2],
      /*params*/
      ctx[1]
    ],
    $$slots: {
      default: [
        create_default_slot9,
        ({ ref }) => ({ 17: ref }),
        ({ ref }) => ref ? 131072 : 0
      ]
    },
    $$scope: { ctx }
  };
  t_extrudegeometry = new T.ExtrudeGeometry({
    props: t_extrudegeometry_props,
    $$inline: true
  });
  ctx[13](t_extrudegeometry);
  t_extrudegeometry.$on(
    "create",
    /*create_handler*/
    ctx[14]
  );
  const block = {
    c: function create() {
      create_component(t_extrudegeometry.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_extrudegeometry.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_extrudegeometry, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_extrudegeometry_changes = {};
      if (dirty & /*shape, params*/
      6) t_extrudegeometry_changes.args = [
        /*shape*/
        ctx2[2],
        /*params*/
        ctx2[1]
      ];
      if (dirty & /*$$scope, ref*/
      163840) {
        t_extrudegeometry_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_extrudegeometry.$set(t_extrudegeometry_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_extrudegeometry.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_extrudegeometry.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[13](null);
      destroy_component(t_extrudegeometry, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment12.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var eps = 1e-5;
function instance12($$self, $$props, $$invalidate) {
  let width;
  let height;
  let depth;
  let shape;
  let params;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("RoundedBoxGeometry", slots, ["default"]);
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(3, $component = value));
  let { args = [] } = $$props;
  let { radius = 0.05 } = $$props;
  let { smoothness = 4 } = $$props;
  let { creaseAngle = 0.4 } = $$props;
  let { steps = 1 } = $$props;
  const createShape = (width2, height2, radius0) => {
    const shape2 = new Shape();
    const radius2 = radius0 - eps;
    shape2.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);
    shape2.absarc(eps, height2 - radius2 * 2, eps, Math.PI, Math.PI / 2, true);
    shape2.absarc(width2 - radius2 * 2, height2 - radius2 * 2, eps, Math.PI / 2, 0, true);
    shape2.absarc(width2 - radius2 * 2, eps, eps, 0, -Math.PI / 2, true);
    return shape2;
  };
  const writable_props = ["args", "radius", "smoothness", "creaseAngle", "steps"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<RoundedBoxGeometry> was created with unknown prop '${key}'`);
  });
  function t_extrudegeometry_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  const create_handler = ({ ref }) => {
    ref.center();
    toCreasedNormals(ref, creaseAngle);
  };
  $$self.$$set = ($$props2) => {
    if ("args" in $$props2) $$invalidate(5, args = $$props2.args);
    if ("radius" in $$props2) $$invalidate(6, radius = $$props2.radius);
    if ("smoothness" in $$props2) $$invalidate(7, smoothness = $$props2.smoothness);
    if ("creaseAngle" in $$props2) $$invalidate(0, creaseAngle = $$props2.creaseAngle);
    if ("steps" in $$props2) $$invalidate(8, steps = $$props2.steps);
    if ("$$scope" in $$props2) $$invalidate(15, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    Shape,
    T,
    forwardEventHandlers,
    toCreasedNormals,
    component,
    args,
    radius,
    smoothness,
    creaseAngle,
    steps,
    eps,
    createShape,
    depth,
    params,
    height,
    width,
    shape,
    $component
  });
  $$self.$inject_state = ($$props2) => {
    if ("args" in $$props2) $$invalidate(5, args = $$props2.args);
    if ("radius" in $$props2) $$invalidate(6, radius = $$props2.radius);
    if ("smoothness" in $$props2) $$invalidate(7, smoothness = $$props2.smoothness);
    if ("creaseAngle" in $$props2) $$invalidate(0, creaseAngle = $$props2.creaseAngle);
    if ("steps" in $$props2) $$invalidate(8, steps = $$props2.steps);
    if ("depth" in $$props2) $$invalidate(9, depth = $$props2.depth);
    if ("params" in $$props2) $$invalidate(1, params = $$props2.params);
    if ("height" in $$props2) $$invalidate(10, height = $$props2.height);
    if ("width" in $$props2) $$invalidate(11, width = $$props2.width);
    if ("shape" in $$props2) $$invalidate(2, shape = $$props2.shape);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*args*/
    32) {
      $: $$invalidate(11, width = args[0] ?? 1);
    }
    if ($$self.$$.dirty & /*args*/
    32) {
      $: $$invalidate(10, height = args[1] ?? 1);
    }
    if ($$self.$$.dirty & /*args*/
    32) {
      $: $$invalidate(9, depth = args[2] ?? 1);
    }
    if ($$self.$$.dirty & /*width, height, radius*/
    3136) {
      $: $$invalidate(2, shape = createShape(width, height, radius));
    }
    if ($$self.$$.dirty & /*depth, radius, smoothness, steps*/
    960) {
      $: $$invalidate(1, params = {
        depth: depth - radius * 2,
        bevelEnabled: true,
        bevelSegments: smoothness * 2,
        steps,
        bevelSize: radius - eps,
        bevelThickness: radius,
        curveSegments: smoothness
      });
    }
  };
  return [
    creaseAngle,
    params,
    shape,
    $component,
    component,
    args,
    radius,
    smoothness,
    steps,
    depth,
    height,
    width,
    slots,
    t_extrudegeometry_binding,
    create_handler,
    $$scope
  ];
}
var RoundedBoxGeometry = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance12, create_fragment12, safe_not_equal, {
      args: 5,
      radius: 6,
      smoothness: 7,
      creaseAngle: 0,
      steps: 8
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "RoundedBoxGeometry",
      options,
      id: create_fragment12.name
    });
  }
  get args() {
    throw new Error("<RoundedBoxGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set args(value) {
    throw new Error("<RoundedBoxGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get radius() {
    throw new Error("<RoundedBoxGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set radius(value) {
    throw new Error("<RoundedBoxGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get smoothness() {
    throw new Error("<RoundedBoxGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set smoothness(value) {
    throw new Error("<RoundedBoxGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get creaseAngle() {
    throw new Error("<RoundedBoxGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set creaseAngle(value) {
    throw new Error("<RoundedBoxGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get steps() {
    throw new Error("<RoundedBoxGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set steps(value) {
    throw new Error("<RoundedBoxGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var RoundedBoxGeometry_default = RoundedBoxGeometry;

// node_modules/@threlte/extras/dist/components/controls/useControlsContext.js
var useControlsContext = () => {
  return useThrelteUserContext("threlte-controls", {
    orbitControls: writable(void 0),
    trackballControls: writable(void 0)
  });
};

// node_modules/@threlte/extras/dist/components/controls/TransformControls/TransformControls.svelte
var get_default_slot_changes8 = (dirty) => ({ ref: dirty & /*ref*/
536870912 });
var get_default_slot_context8 = (ctx) => ({ ref: (
  /*ref*/
  ctx[29]
) });
function create_default_slot_13(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*$controlsStore*/
      ctx[1]
    ) },
    /*transformProps*/
    ctx[2]
  ];
  let t_props = {};
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[15](t);
  t.$on(
    "dragging-changed",
    /*onDraggingChanged*/
    ctx[7]
  );
  t.$on(
    "change",
    /*invalidate*/
    ctx[5]
  );
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = dirty & /*$controlsStore, transformProps*/
      6 ? get_spread_update(t_spread_levels, [
        dirty & /*$controlsStore*/
        2 && { is: (
          /*$controlsStore*/
          ctx2[1]
        ) },
        dirty & /*transformProps*/
        4 && get_spread_object(
          /*transformProps*/
          ctx2[2]
        )
      ]) : {};
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[15](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_13.name,
    type: "slot",
    source: "(90:0) <HierarchicalObject   onChildMount={(child) => {     scene.add(child)   }}   onChildDestroy={(child) => {     scene.remove(child)   }} >",
    ctx
  });
  return block;
}
function create_default_slot10(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[18],
    get_default_slot_context8
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        537133056)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[18],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[18]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[18],
              dirty,
              get_default_slot_changes8
            ),
            get_default_slot_context8
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot10.name,
    type: "slot",
    source: "(107:0) <T   is={group}   let:ref   {...objectProps} >",
    ctx
  });
  return block;
}
function create_fragment13(ctx) {
  let hierarchicalobject;
  let t0;
  let t1;
  let current;
  hierarchicalobject = new HierarchicalObject_default({
    props: {
      onChildMount: (
        /*func*/
        ctx[16]
      ),
      onChildDestroy: (
        /*func_1*/
        ctx[17]
      ),
      $$slots: { default: [create_default_slot_13] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const t1_spread_levels = [
    { is: (
      /*group*/
      ctx[0]
    ) },
    /*objectProps*/
    ctx[3]
  ];
  let t1_props = {
    $$slots: {
      default: [
        create_default_slot10,
        ({ ref }) => ({ 29: ref }),
        ({ ref }) => ref ? 536870912 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t1_spread_levels.length; i += 1) {
    t1_props = assign(t1_props, t1_spread_levels[i]);
  }
  t1 = new T({ props: t1_props, $$inline: true });
  const block = {
    c: function create() {
      create_component(hierarchicalobject.$$.fragment);
      t0 = space();
      create_component(t1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(hierarchicalobject.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(hierarchicalobject, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const hierarchicalobject_changes = {};
      if (dirty & /*$$scope, $controlsStore, transformProps, $component*/
      262166) {
        hierarchicalobject_changes.$$scope = { dirty, ctx: ctx2 };
      }
      hierarchicalobject.$set(hierarchicalobject_changes);
      const t1_changes = dirty & /*group, objectProps*/
      9 ? get_spread_update(t1_spread_levels, [
        dirty & /*group*/
        1 && { is: (
          /*group*/
          ctx2[0]
        ) },
        dirty & /*objectProps*/
        8 && get_spread_object(
          /*objectProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      537133056) {
        t1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t1.$set(t1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(hierarchicalobject.$$.fragment, local);
      transition_in(t1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(hierarchicalobject.$$.fragment, local);
      transition_out(t1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
      }
      destroy_component(hierarchicalobject, detaching);
      destroy_component(t1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment13.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance13($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "autoPauseOrbitControls",
    "autoPauseTrackballControls",
    "object",
    "group",
    "controls"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $controlsStore;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("TransformControls", slots, ["default"]);
  let { autoPauseOrbitControls = true } = $$props;
  let { autoPauseTrackballControls = true } = $$props;
  let { object = void 0 } = $$props;
  const { camera, renderer, invalidate, scene } = useThrelte();
  const { orbitControls, trackballControls } = useControlsContext();
  const isDragging = writable(false);
  const useAutoPauseOrbitControls = writable(autoPauseOrbitControls ?? true);
  const useAutoPauseTrackballControls = writable(autoPauseTrackballControls ?? true);
  const onDraggingChanged = (e) => {
    isDragging.set(e.value);
  };
  watch([orbitControls, isDragging, useAutoPauseOrbitControls], ([orbitControls2, isDragging2, useAutoPauseOrbitControls2]) => {
    if (!orbitControls2 || !orbitControls2.enabled && isDragging2) return;
    orbitControls2.enabled = !(isDragging2 && useAutoPauseOrbitControls2);
    return () => {
      orbitControls2.enabled = true;
    };
  });
  watch([trackballControls, isDragging, useAutoPauseTrackballControls], ([trackballControls2, isDragging2, useAutoPausetrackballControls]) => {
    if (!trackballControls2 || !trackballControls2.enabled && isDragging2) return;
    trackballControls2.enabled = !(isDragging2 && useAutoPausetrackballControls);
    return () => {
      trackballControls2.enabled = true;
    };
  });
  const group = new Group();
  const controlsStore = derived(camera, (camera2) => {
    return new TransformControls(camera2, renderer.domElement);
  });
  validate_store(controlsStore, "controlsStore");
  component_subscribe($$self, controlsStore, (value) => $$invalidate(1, $controlsStore = value));
  let { controls = $controlsStore } = $$props;
  const attachTo = writable(object ?? group);
  watch([controlsStore, attachTo], ([controls2, attachTo2]) => {
    controls2.attach(attachTo2);
    return () => {
      controls2.detach();
    };
  });
  const transformOnlyPropNames = [
    "enabled",
    "axis",
    "mode",
    "translationSnap",
    "rotationSnap",
    "scaleSnap",
    "space",
    "size",
    "showX",
    "showY",
    "showZ",
    "visible"
  ];
  let transformProps = {};
  let objectProps = {};
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(4, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  const func3 = (child) => {
    scene.add(child);
  };
  const func_12 = (child) => {
    scene.remove(child);
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("autoPauseOrbitControls" in $$new_props) $$invalidate(11, autoPauseOrbitControls = $$new_props.autoPauseOrbitControls);
    if ("autoPauseTrackballControls" in $$new_props) $$invalidate(12, autoPauseTrackballControls = $$new_props.autoPauseTrackballControls);
    if ("object" in $$new_props) $$invalidate(13, object = $$new_props.object);
    if ("controls" in $$new_props) $$invalidate(10, controls = $$new_props.controls);
    if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    HierarchicalObject: HierarchicalObject_default,
    T,
    useThrelte,
    watch,
    Group,
    TransformControls,
    derived,
    writable,
    useControlsContext,
    autoPauseOrbitControls,
    autoPauseTrackballControls,
    object,
    camera,
    renderer,
    invalidate,
    scene,
    orbitControls,
    trackballControls,
    isDragging,
    useAutoPauseOrbitControls,
    useAutoPauseTrackballControls,
    onDraggingChanged,
    group,
    controlsStore,
    controls,
    attachTo,
    transformOnlyPropNames,
    transformProps,
    objectProps,
    component,
    $controlsStore,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("autoPauseOrbitControls" in $$props) $$invalidate(11, autoPauseOrbitControls = $$new_props.autoPauseOrbitControls);
    if ("autoPauseTrackballControls" in $$props) $$invalidate(12, autoPauseTrackballControls = $$new_props.autoPauseTrackballControls);
    if ("object" in $$props) $$invalidate(13, object = $$new_props.object);
    if ("controls" in $$props) $$invalidate(10, controls = $$new_props.controls);
    if ("transformProps" in $$props) $$invalidate(2, transformProps = $$new_props.transformProps);
    if ("objectProps" in $$props) $$invalidate(3, objectProps = $$new_props.objectProps);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*autoPauseOrbitControls*/
    2048) {
      $: useAutoPauseOrbitControls.set(autoPauseOrbitControls ?? true);
    }
    if ($$self.$$.dirty & /*autoPauseTrackballControls*/
    4096) {
      $: useAutoPauseTrackballControls.set(autoPauseTrackballControls ?? true);
    }
    if ($$self.$$.dirty & /*$controlsStore*/
    2) {
      $: $$invalidate(10, controls = $controlsStore);
    }
    $: {
      $$invalidate(2, transformProps = {});
      $$invalidate(3, objectProps = {});
      for (let [key, value] of Object.entries($$restProps)) {
        if (transformOnlyPropNames.includes(key)) {
          $$invalidate(2, transformProps[key] = value, transformProps);
        } else {
          $$invalidate(3, objectProps[key] = value, objectProps);
        }
      }
    }
  };
  return [
    group,
    $controlsStore,
    transformProps,
    objectProps,
    $component,
    invalidate,
    scene,
    onDraggingChanged,
    controlsStore,
    component,
    controls,
    autoPauseOrbitControls,
    autoPauseTrackballControls,
    object,
    slots,
    t_binding,
    func3,
    func_12,
    $$scope
  ];
}
var TransformControls_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance13, create_fragment13, safe_not_equal, {
      autoPauseOrbitControls: 11,
      autoPauseTrackballControls: 12,
      object: 13,
      group: 0,
      controls: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "TransformControls_1",
      options,
      id: create_fragment13.name
    });
  }
  get autoPauseOrbitControls() {
    throw new Error("<TransformControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoPauseOrbitControls(value) {
    throw new Error("<TransformControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get autoPauseTrackballControls() {
    throw new Error("<TransformControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoPauseTrackballControls(value) {
    throw new Error("<TransformControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get object() {
    throw new Error("<TransformControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set object(value) {
    throw new Error("<TransformControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get group() {
    return this.$$.ctx[0];
  }
  set group(value) {
    throw new Error("<TransformControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get controls() {
    throw new Error("<TransformControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set controls(value) {
    throw new Error("<TransformControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var TransformControls_default = TransformControls_1;

// node_modules/@threlte/extras/dist/components/controls/OrbitControls/OrbitControls.svelte
var { Error: Error_13 } = globals;
var get_default_slot_changes9 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context9 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot11(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_default_slot_context9
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        257)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_default_slot_changes9
            ),
            get_default_slot_context9
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot11.name,
    type: "slot",
    source: "(30:0) <T   is={ref}   let:ref   {...$$restProps}   bind:this={$component}   on:change={invalidate} >",
    ctx
  });
  return block;
}
function create_fragment14(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[5]
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot11, ({ ref }) => ({ 0: ref }), ({ ref }) => ref ? 1 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[7](t);
  t.$on(
    "change",
    /*invalidate*/
    ctx[3]
  );
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      33 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        32 && get_spread_object(
          /*$$restProps*/
          ctx2[5]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      257) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[7](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment14.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance14($$self, $$props, $$invalidate) {
  const omit_props_names = ["ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("OrbitControls", slots, ["default"]);
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(9, $parent = value));
  const isCamera = (p) => {
    return p.isCamera;
  };
  const { renderer, invalidate } = useThrelte();
  if (!isCamera($parent)) {
    throw new Error("Parent missing: <OrbitControls> need to be a child of a <Camera>");
  }
  const ref = new OrbitControls($parent, renderer.domElement);
  const { start, stop } = useTask(ref.update, { autoStart: false, autoInvalidate: false });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  const { orbitControls } = useControlsContext();
  orbitControls.set(ref);
  onDestroy(() => orbitControls.set(void 0));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    useTask,
    useParent,
    useThrelte,
    ThreeOrbitControls: OrbitControls,
    onDestroy,
    useControlsContext,
    parent,
    isCamera,
    renderer,
    invalidate,
    ref,
    start,
    stop,
    component,
    orbitControls,
    $parent,
    $component
  });
  $$self.$$.update = () => {
    $: {
      if ($$restProps.autoRotate || $$restProps.enableDamping) start();
      else stop();
    }
  };
  return [
    ref,
    $component,
    parent,
    invalidate,
    component,
    $$restProps,
    slots,
    t_binding,
    $$scope
  ];
}
var OrbitControls2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance14, create_fragment14, safe_not_equal, { ref: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "OrbitControls",
      options,
      id: create_fragment14.name
    });
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error_13("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var OrbitControls_default = OrbitControls2;

// node_modules/@threlte/extras/dist/components/controls/TrackballControls/TrackballControls.svelte
var { Error: Error_14 } = globals;
var get_default_slot_changes10 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context10 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot12(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_default_slot_context10
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        257)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_default_slot_changes10
            ),
            get_default_slot_context10
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot12.name,
    type: "slot",
    source: "(23:0) <T   is={ref}   let:ref   {...$$restProps}   bind:this={$component}   on:change={invalidate} >",
    ctx
  });
  return block;
}
function create_fragment15(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[5]
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot12, ({ ref }) => ({ 0: ref }), ({ ref }) => ref ? 1 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[7](t);
  t.$on(
    "change",
    /*invalidate*/
    ctx[3]
  );
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      33 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        32 && get_spread_object(
          /*$$restProps*/
          ctx2[5]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      257) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[7](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment15.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance15($$self, $$props, $$invalidate) {
  const omit_props_names = ["ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("TrackballControls", slots, ["default"]);
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(9, $parent = value));
  const isCamera = (p) => {
    return p.isCamera;
  };
  const { renderer, invalidate } = useThrelte();
  if (!isCamera($parent)) {
    throw new Error("Parent missing: <TrackballControls> need to be a child of a <Camera>");
  }
  const ref = new TrackballControls($parent, renderer.domElement);
  useTask(ref.update, { autoInvalidate: false });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  const { trackballControls } = useControlsContext();
  trackballControls.set(ref);
  onDestroy(() => trackballControls.set(void 0));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    useTask,
    useParent,
    useThrelte,
    ThreeTrackballControls: TrackballControls,
    onDestroy,
    useControlsContext,
    parent,
    isCamera,
    renderer,
    invalidate,
    ref,
    component,
    trackballControls,
    $parent,
    $component
  });
  return [
    ref,
    $component,
    parent,
    invalidate,
    component,
    $$restProps,
    slots,
    t_binding,
    $$scope
  ];
}
var TrackballControls2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance15, create_fragment15, safe_not_equal, { ref: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "TrackballControls",
      options,
      id: create_fragment15.name
    });
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error_14("<TrackballControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var TrackballControls_default = TrackballControls2;

// node_modules/@threlte/extras/dist/components/Instancing/api.js
var getContextId = (instancedMeshId) => `threlte-instanced-mesh-${instancedMeshId}`;
var createApi = (instancedMesh, instancedMeshId) => {
  const api = {
    instancedMesh: currentWritable(instancedMesh),
    addInstance(instance44) {
      api.instances.update((arr) => {
        arr.push(instance44);
        return arr;
      });
    },
    removeInstance(instance44) {
      api.instances.update((arr) => {
        const index = arr.indexOf(instance44);
        if (index > -1)
          arr.splice(index, 1);
        return arr;
      });
    },
    instances: currentWritable([])
  };
  setContext(getContextId(instancedMeshId), api);
  return api;
};
var useApi = (instancedMeshId) => {
  const context = getContext(getContextId(instancedMeshId));
  if (!context)
    throw new Error(`No <InstancedMesh> component found for id ${instancedMeshId}`);
  return context;
};

// node_modules/@threlte/extras/dist/components/Instancing/Api.svelte
function create_fragment16(ctx) {
  let t_instancedbufferattribute0;
  let t0;
  let t_instancedbufferattribute1;
  let t1;
  let current;
  t_instancedbufferattribute0 = new T.InstancedBufferAttribute({
    props: {
      attach: "instanceMatrix",
      count: (
        /*matrices*/
        ctx[1].length / 16
      ),
      array: (
        /*matrices*/
        ctx[1]
      ),
      itemSize: 16,
      usage: DynamicDrawUsage
    },
    $$inline: true
  });
  t_instancedbufferattribute1 = new T.InstancedBufferAttribute({
    props: {
      attach: "instanceColor",
      count: (
        /*colors*/
        ctx[2].length / 3
      ),
      array: (
        /*colors*/
        ctx[2]
      ),
      itemSize: 3,
      usage: DynamicDrawUsage
    },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  const block = {
    c: function create() {
      create_component(t_instancedbufferattribute0.$$.fragment);
      t0 = space();
      create_component(t_instancedbufferattribute1.$$.fragment);
      t1 = space();
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      claim_component(t_instancedbufferattribute0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t_instancedbufferattribute1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_instancedbufferattribute0, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t_instancedbufferattribute1, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_instancedbufferattribute0.$$.fragment, local);
      transition_in(t_instancedbufferattribute1.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_instancedbufferattribute0.$$.fragment, local);
      transition_out(t_instancedbufferattribute1.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t1);
      }
      destroy_component(t_instancedbufferattribute0, detaching);
      destroy_component(t_instancedbufferattribute1, detaching);
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment16.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance16($$self, $$props, $$invalidate) {
  let $instances;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Api", slots, ["default"]);
  let { instancedMesh } = $$props;
  let { id } = $$props;
  let { limit } = $$props;
  let { range } = $$props;
  let { update } = $$props;
  const { instances } = createApi(instancedMesh, id);
  validate_store(instances, "instances");
  component_subscribe($$self, instances, (value) => $$invalidate(8, $instances = value));
  const tempMatrix = new Matrix4();
  const matrices = new Float32Array(limit * 16);
  for (let i = 0; i < limit; i++) tempMatrix.identity().toArray(matrices, i * 16);
  const colors = new Float32Array(limit * 3).fill(1);
  const parentMatrix = new Matrix4();
  const instanceMatrix = new Matrix4();
  const translation = new Vector3();
  const rotation = new Quaternion();
  const scale = new Vector3();
  let initialUpdateDone = false;
  useTask(() => {
    instancedMesh.updateMatrix();
    if (update || !initialUpdateDone) {
      instancedMesh.updateMatrixWorld();
      parentMatrix.copy(instancedMesh.matrixWorld).invert();
      if (instancedMesh.instanceColor) {
        $$invalidate(3, instancedMesh.instanceColor.needsUpdate = true, instancedMesh);
      }
      $$invalidate(3, instancedMesh.instanceMatrix.needsUpdate = true, instancedMesh);
      for (let i = 0; i < instances.current.length; i++) {
        const instance44 = instances.current[i];
        instance44.matrixWorld.decompose(translation, rotation, scale);
        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);
        instanceMatrix.toArray(matrices, i * 16);
        instance44.color.toArray(colors, i * 3);
      }
      initialUpdateDone = true;
    }
  });
  $$self.$$.on_mount.push(function() {
    if (instancedMesh === void 0 && !("instancedMesh" in $$props || $$self.$$.bound[$$self.$$.props["instancedMesh"]])) {
      console.warn("<Api> was created without expected prop 'instancedMesh'");
    }
    if (id === void 0 && !("id" in $$props || $$self.$$.bound[$$self.$$.props["id"]])) {
      console.warn("<Api> was created without expected prop 'id'");
    }
    if (limit === void 0 && !("limit" in $$props || $$self.$$.bound[$$self.$$.props["limit"]])) {
      console.warn("<Api> was created without expected prop 'limit'");
    }
    if (range === void 0 && !("range" in $$props || $$self.$$.bound[$$self.$$.props["range"]])) {
      console.warn("<Api> was created without expected prop 'range'");
    }
    if (update === void 0 && !("update" in $$props || $$self.$$.bound[$$self.$$.props["update"]])) {
      console.warn("<Api> was created without expected prop 'update'");
    }
  });
  const writable_props = ["instancedMesh", "id", "limit", "range", "update"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Api> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("instancedMesh" in $$props2) $$invalidate(3, instancedMesh = $$props2.instancedMesh);
    if ("id" in $$props2) $$invalidate(4, id = $$props2.id);
    if ("limit" in $$props2) $$invalidate(5, limit = $$props2.limit);
    if ("range" in $$props2) $$invalidate(6, range = $$props2.range);
    if ("update" in $$props2) $$invalidate(7, update = $$props2.update);
    if ("$$scope" in $$props2) $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useTask,
    revision,
    DynamicDrawUsage,
    Matrix4,
    Quaternion,
    Vector3,
    createApi,
    instancedMesh,
    id,
    limit,
    range,
    update,
    instances,
    tempMatrix,
    matrices,
    colors,
    parentMatrix,
    instanceMatrix,
    translation,
    rotation,
    scale,
    initialUpdateDone,
    $instances
  });
  $$self.$inject_state = ($$props2) => {
    if ("instancedMesh" in $$props2) $$invalidate(3, instancedMesh = $$props2.instancedMesh);
    if ("id" in $$props2) $$invalidate(4, id = $$props2.id);
    if ("limit" in $$props2) $$invalidate(5, limit = $$props2.limit);
    if ("range" in $$props2) $$invalidate(6, range = $$props2.range);
    if ("update" in $$props2) $$invalidate(7, update = $$props2.update);
    if ("initialUpdateDone" in $$props2) initialUpdateDone = $$props2.initialUpdateDone;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*limit, range, $instances, instancedMesh*/
    360) {
      $: {
        const updateRange = Math.min(limit, range !== void 0 ? range : limit, $instances.length);
        $$invalidate(3, instancedMesh.count = updateRange, instancedMesh);
        if (revision >= 159) {
          instancedMesh.instanceMatrix.clearUpdateRanges();
          instancedMesh.instanceMatrix.addUpdateRange(0, updateRange * 16);
        } else {
          $$invalidate(3, instancedMesh.instanceMatrix.updateRange.count = updateRange * 16, instancedMesh);
        }
        if (instancedMesh.instanceColor) {
          if (revision >= 159) {
            instancedMesh.instanceColor.clearUpdateRanges();
            instancedMesh.instanceColor.addUpdateRange(0, updateRange * 3);
          } else {
            $$invalidate(3, instancedMesh.instanceColor.updateRange.count = updateRange * 3, instancedMesh);
          }
        }
      }
    }
  };
  return [
    instances,
    matrices,
    colors,
    instancedMesh,
    id,
    limit,
    range,
    update,
    $instances,
    $$scope,
    slots
  ];
}
var Api = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance16, create_fragment16, safe_not_equal, {
      instancedMesh: 3,
      id: 4,
      limit: 5,
      range: 6,
      update: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Api",
      options,
      id: create_fragment16.name
    });
  }
  get instancedMesh() {
    throw new Error("<Api>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set instancedMesh(value) {
    throw new Error("<Api>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Api>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Api>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get limit() {
    throw new Error("<Api>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set limit(value) {
    throw new Error("<Api>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get range() {
    throw new Error("<Api>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set range(value) {
    throw new Error("<Api>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get update() {
    throw new Error("<Api>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set update(value) {
    throw new Error("<Api>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Api_default = Api;

// node_modules/@threlte/extras/dist/components/Instancing/InstancedMesh.svelte
var get_default_slot_changes11 = (dirty) => ({});
var get_default_slot_context11 = (ctx) => ({ ref: (
  /*ref*/
  ctx[4]
) });
function create_default_slot_14(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_default_slot_context11
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_default_slot_changes11
            ),
            get_default_slot_context11
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_14.name,
    type: "slot",
    source: "(21:2) <Api     instancedMesh={ref}     {id}     {limit}     {range}     {update}   >",
    ctx
  });
  return block;
}
function create_default_slot13(ctx) {
  let api;
  let current;
  api = new Api_default({
    props: {
      instancedMesh: (
        /*ref*/
        ctx[4]
      ),
      id: (
        /*id*/
        ctx[0]
      ),
      limit: (
        /*limit*/
        ctx[1]
      ),
      range: (
        /*range*/
        ctx[2]
      ),
      update: (
        /*update*/
        ctx[3]
      ),
      $$slots: { default: [create_default_slot_14] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(api.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(api.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const api_changes = {};
      if (dirty & /*id*/
      1) api_changes.id = /*id*/
      ctx2[0];
      if (dirty & /*limit*/
      2) api_changes.limit = /*limit*/
      ctx2[1];
      if (dirty & /*range*/
      4) api_changes.range = /*range*/
      ctx2[2];
      if (dirty & /*update*/
      8) api_changes.update = /*update*/
      ctx2[3];
      if (dirty & /*$$scope*/
      2048) {
        api_changes.$$scope = { dirty, ctx: ctx2 };
      }
      api.$set(api_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(api, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot13.name,
    type: "slot",
    source: "(13:0) <T   is={ref}   raycast={() => null}   matrixAutoUpdate={false}   {args}   {...$$restProps}   bind:bind={$dispatchingComponent} >",
    ctx
  });
  return block;
}
function create_fragment17(ctx) {
  let t;
  let updating_bind;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[4]
    ) },
    { raycast: func },
    { matrixAutoUpdate: false },
    { args: (
      /*args*/
      ctx[7]
    ) },
    /*$$restProps*/
    ctx[8]
  ];
  function t_bind_binding(value) {
    ctx[10](value);
  }
  let t_props = {
    $$slots: { default: [create_default_slot13] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  if (
    /*$dispatchingComponent*/
    ctx[5] !== void 0
  ) {
    t_props.bind = /*$dispatchingComponent*/
    ctx[5];
  }
  t = new T({ props: t_props, $$inline: true });
  binding_callbacks.push(() => bind(t, "bind", t_bind_binding));
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, args, $$restProps*/
      400 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        16 && { is: (
          /*ref*/
          ctx2[4]
        ) },
        t_spread_levels[1],
        t_spread_levels[2],
        dirty & /*args*/
        128 && { args: (
          /*args*/
          ctx2[7]
        ) },
        dirty & /*$$restProps*/
        256 && get_spread_object(
          /*$$restProps*/
          ctx2[8]
        )
      ]) : {};
      if (dirty & /*$$scope, id, limit, range, update*/
      2063) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_bind && dirty & /*$dispatchingComponent*/
      32) {
        updating_bind = true;
        t_changes.bind = /*$dispatchingComponent*/
        ctx2[5];
        add_flush_callback(() => updating_bind = false);
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment17.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = () => null;
function instance17($$self, $$props, $$invalidate) {
  const omit_props_names = ["id", "limit", "range", "update", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $dispatchingComponent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("InstancedMesh", slots, ["default"]);
  let { id = "default" } = $$props;
  let { limit = 1e3 } = $$props;
  let { range = 1e3 } = $$props;
  let { update = true } = $$props;
  const ref = new InstancedMesh(null, null, 0);
  const dispatchingComponent = forwardEventHandlers();
  validate_store(dispatchingComponent, "dispatchingComponent");
  component_subscribe($$self, dispatchingComponent, (value) => $$invalidate(5, $dispatchingComponent = value));
  const args = [null, null, 0];
  function t_bind_binding(value) {
    $dispatchingComponent = value;
    dispatchingComponent.set($dispatchingComponent);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
    if ("limit" in $$new_props) $$invalidate(1, limit = $$new_props.limit);
    if ("range" in $$new_props) $$invalidate(2, range = $$new_props.range);
    if ("update" in $$new_props) $$invalidate(3, update = $$new_props.update);
    if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    forwardEventHandlers,
    Api: Api_default,
    InstancedMesh,
    id,
    limit,
    range,
    update,
    ref,
    dispatchingComponent,
    args,
    $dispatchingComponent
  });
  $$self.$inject_state = ($$new_props) => {
    if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
    if ("limit" in $$props) $$invalidate(1, limit = $$new_props.limit);
    if ("range" in $$props) $$invalidate(2, range = $$new_props.range);
    if ("update" in $$props) $$invalidate(3, update = $$new_props.update);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    id,
    limit,
    range,
    update,
    ref,
    $dispatchingComponent,
    dispatchingComponent,
    args,
    $$restProps,
    slots,
    t_bind_binding,
    $$scope
  ];
}
var InstancedMesh_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance17, create_fragment17, safe_not_equal, {
      id: 0,
      limit: 1,
      range: 2,
      update: 3,
      ref: 4
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "InstancedMesh_1",
      options,
      id: create_fragment17.name
    });
  }
  get id() {
    throw new Error("<InstancedMesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<InstancedMesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get limit() {
    throw new Error("<InstancedMesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set limit(value) {
    throw new Error("<InstancedMesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get range() {
    throw new Error("<InstancedMesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set range(value) {
    throw new Error("<InstancedMesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get update() {
    throw new Error("<InstancedMesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set update(value) {
    throw new Error("<InstancedMesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[4];
  }
  set ref(value) {
    throw new Error("<InstancedMesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InstancedMesh_default = InstancedMesh_1;

// node_modules/@threlte/extras/dist/components/Instancing/PositionMesh.js
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _instanceIntersects = [];
var _mesh = new Mesh();
var isMaterial = (o) => {
  return o.isMaterial;
};
var PositionMesh = class extends Group {
  color;
  instancedMesh;
  instances;
  constructor(instancedMesh, instances) {
    super();
    this.color = new Color("white");
    this.instancedMesh = instancedMesh;
    this.instances = instances;
  }
  // This will allow the virtual instance have bounds
  get geometry() {
    return this.instancedMesh.current?.geometry;
  }
  // And this will allow the virtual instance to receive events
  raycast(raycaster, intersects) {
    const parent = this.instancedMesh.current;
    if (!parent)
      return;
    if (!parent.geometry || !parent.material)
      return;
    _mesh.geometry = parent.geometry;
    const matrixWorld = parent.matrixWorld;
    const instanceId = this.instances.current.indexOf(this);
    if (instanceId === -1 || instanceId > parent.count)
      return;
    parent.getMatrixAt(instanceId, _instanceLocalMatrix);
    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
    _mesh.matrixWorld = _instanceWorldMatrix;
    if (isMaterial(parent.material))
      _mesh.material.side = parent.material.side;
    else
      _mesh.material.side = parent.material[0]?.side ?? FrontSide;
    _mesh.raycast(raycaster, _instanceIntersects);
    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
      const intersect = _instanceIntersects[i];
      intersect.instanceId = instanceId;
      intersect.object = this;
      intersects.push(intersect);
    }
    _instanceIntersects.length = 0;
  }
};

// node_modules/@threlte/extras/dist/components/Instancing/Instance.svelte
var get_default_slot_changes12 = (dirty) => ({});
var get_default_slot_context12 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot14(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_default_slot_context12
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_default_slot_changes12
            ),
            get_default_slot_context12
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot14.name,
    type: "slot",
    source: "(15:0) <T   is={ref}   bind:this={$dispatchingComponent}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment18(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot14] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[6](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      128) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[6](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment18.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance18($$self, $$props, $$invalidate) {
  const omit_props_names = ["id", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $dispatchingComponent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Instance", slots, ["default"]);
  let { id = "default" } = $$props;
  const { addInstance, removeInstance, instancedMesh, instances } = useApi(id);
  const ref = new PositionMesh(instancedMesh, instances);
  addInstance(ref);
  onDestroy(() => {
    removeInstance(ref);
  });
  const dispatchingComponent = forwardEventHandlers();
  validate_store(dispatchingComponent, "dispatchingComponent");
  component_subscribe($$self, dispatchingComponent, (value) => $$invalidate(1, $dispatchingComponent = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $dispatchingComponent = $$value;
      dispatchingComponent.set($dispatchingComponent);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
    if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    forwardEventHandlers,
    onDestroy,
    PositionMesh,
    useApi,
    id,
    addInstance,
    removeInstance,
    instancedMesh,
    instances,
    ref,
    dispatchingComponent,
    $dispatchingComponent
  });
  $$self.$inject_state = ($$new_props) => {
    if ("id" in $$props) $$invalidate(4, id = $$new_props.id);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    ref,
    $dispatchingComponent,
    dispatchingComponent,
    $$restProps,
    id,
    slots,
    t_binding,
    $$scope
  ];
}
var Instance = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance18, create_fragment18, safe_not_equal, { id: 4, ref: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Instance",
      options,
      id: create_fragment18.name
    });
  }
  get id() {
    throw new Error("<Instance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Instance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error("<Instance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Instance_default = Instance;

// node_modules/@threlte/extras/dist/components/Instancing/InstancedMeshes/InnerInstancedMeshes.svelte
function create_else_block2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block2.name,
    type: "else",
    source: "(21:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block6(ctx) {
  let instancedmesh;
  let current;
  const instancedmesh_spread_levels = [
    { geometry: (
      /*mesh*/
      ctx[2].geometry
    ) },
    { material: (
      /*mesh*/
      ctx[2].material
    ) },
    { id: (
      /*mesh*/
      ctx[2].uuid
    ) },
    /*$$restProps*/
    ctx[4]
  ];
  let instancedmesh_props = {
    $$slots: { default: [create_default_slot15] },
    $$scope: { ctx }
  };
  for (let i = 0; i < instancedmesh_spread_levels.length; i += 1) {
    instancedmesh_props = assign(instancedmesh_props, instancedmesh_spread_levels[i]);
  }
  instancedmesh = new InstancedMesh_default({
    props: instancedmesh_props,
    $$inline: true
  });
  ctx[7](instancedmesh);
  const block = {
    c: function create() {
      create_component(instancedmesh.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(instancedmesh.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(instancedmesh, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const instancedmesh_changes = dirty & /*mesh, $$restProps*/
      20 ? get_spread_update(instancedmesh_spread_levels, [
        dirty & /*mesh*/
        4 && { geometry: (
          /*mesh*/
          ctx2[2].geometry
        ) },
        dirty & /*mesh*/
        4 && { material: (
          /*mesh*/
          ctx2[2].material
        ) },
        dirty & /*mesh*/
        4 && { id: (
          /*mesh*/
          ctx2[2].uuid
        ) },
        dirty & /*$$restProps*/
        16 && get_spread_object(
          /*$$restProps*/
          ctx2[4]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      256) {
        instancedmesh_changes.$$scope = { dirty, ctx: ctx2 };
      }
      instancedmesh.$set(instancedmesh_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(instancedmesh.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(instancedmesh.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[7](null);
      destroy_component(instancedmesh, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block6.name,
    type: "if",
    source: "(9:0) {#if mesh}",
    ctx
  });
  return block;
}
function create_default_slot_15(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_15.name,
    type: "slot",
    source: "(17:4) <svelte:self meshes={copiedArray}>",
    ctx
  });
  return block;
}
function create_default_slot15(ctx) {
  let innerinstancedmeshes;
  let current;
  innerinstancedmeshes = new InnerInstancedMeshes({
    props: {
      meshes: (
        /*copiedArray*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot_15] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(innerinstancedmeshes.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(innerinstancedmeshes.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(innerinstancedmeshes, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const innerinstancedmeshes_changes = {};
      if (dirty & /*$$scope*/
      256) {
        innerinstancedmeshes_changes.$$scope = { dirty, ctx: ctx2 };
      }
      innerinstancedmeshes.$set(innerinstancedmeshes_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(innerinstancedmeshes.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(innerinstancedmeshes.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(innerinstancedmeshes, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot15.name,
    type: "slot",
    source: "(10:2) <InstancedMesh     geometry={mesh.geometry}     material={mesh.material}     id={mesh.uuid}     bind:this={$dispatchingComponent}     {...$$restProps}   >",
    ctx
  });
  return block;
}
function create_fragment19(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block6, create_else_block2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*mesh*/
      ctx2[2]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if_block.p(ctx2, dirty);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment19.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance19($$self, $$props, $$invalidate) {
  const omit_props_names = ["meshes"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $dispatchingComponent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("InnerInstancedMeshes", slots, ["default"]);
  let { meshes } = $$props;
  const copiedArray = [...meshes];
  const mesh = copiedArray.pop();
  const dispatchingComponent = forwardEventHandlers();
  validate_store(dispatchingComponent, "dispatchingComponent");
  component_subscribe($$self, dispatchingComponent, (value) => $$invalidate(0, $dispatchingComponent = value));
  $$self.$$.on_mount.push(function() {
    if (meshes === void 0 && !("meshes" in $$props || $$self.$$.bound[$$self.$$.props["meshes"]])) {
      console.warn("<InnerInstancedMeshes> was created without expected prop 'meshes'");
    }
  });
  function instancedmesh_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $dispatchingComponent = $$value;
      dispatchingComponent.set($dispatchingComponent);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("meshes" in $$new_props) $$invalidate(5, meshes = $$new_props.meshes);
    if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    InstancedMesh: InstancedMesh_default,
    meshes,
    copiedArray,
    mesh,
    dispatchingComponent,
    $dispatchingComponent
  });
  $$self.$inject_state = ($$new_props) => {
    if ("meshes" in $$props) $$invalidate(5, meshes = $$new_props.meshes);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    $dispatchingComponent,
    copiedArray,
    mesh,
    dispatchingComponent,
    $$restProps,
    meshes,
    slots,
    instancedmesh_binding,
    $$scope
  ];
}
var InnerInstancedMeshes = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance19, create_fragment19, safe_not_equal, { meshes: 5 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "InnerInstancedMeshes",
      options,
      id: create_fragment19.name
    });
  }
  get meshes() {
    throw new Error("<InnerInstancedMeshes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set meshes(value) {
    throw new Error("<InnerInstancedMeshes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InnerInstancedMeshes_default = InnerInstancedMeshes;

// node_modules/@threlte/extras/dist/components/Instancing/InstancedMeshes/InstancedMeshes.svelte
var get_default_slot_changes13 = (dirty) => ({ components: dirty & /*components*/
2 });
var get_default_slot_context13 = (ctx) => ({ components: (
  /*components*/
  ctx[1]
) });
function create_default_slot16(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context13
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, components*/
        514)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_default_slot_changes13
            ),
            get_default_slot_context13
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot16.name,
    type: "slot",
    source: "(39:0) <InnerInstancedMeshes   meshes={filteredMeshesArray}   bind:this={$dispatchingComponent}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment20(ctx) {
  let innerinstancedmeshes;
  let current;
  const innerinstancedmeshes_spread_levels = [
    { meshes: (
      /*filteredMeshesArray*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[4]
  ];
  let innerinstancedmeshes_props = {
    $$slots: { default: [create_default_slot16] },
    $$scope: { ctx }
  };
  for (let i = 0; i < innerinstancedmeshes_spread_levels.length; i += 1) {
    innerinstancedmeshes_props = assign(innerinstancedmeshes_props, innerinstancedmeshes_spread_levels[i]);
  }
  innerinstancedmeshes = new InnerInstancedMeshes_default({
    props: innerinstancedmeshes_props,
    $$inline: true
  });
  ctx[8](innerinstancedmeshes);
  const block = {
    c: function create() {
      create_component(innerinstancedmeshes.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(innerinstancedmeshes.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(innerinstancedmeshes, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const innerinstancedmeshes_changes = dirty & /*filteredMeshesArray, $$restProps*/
      17 ? get_spread_update(innerinstancedmeshes_spread_levels, [
        dirty & /*filteredMeshesArray*/
        1 && { meshes: (
          /*filteredMeshesArray*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        16 && get_spread_object(
          /*$$restProps*/
          ctx2[4]
        )
      ]) : {};
      if (dirty & /*$$scope, components*/
      514) {
        innerinstancedmeshes_changes.$$scope = { dirty, ctx: ctx2 };
      }
      innerinstancedmeshes.$set(innerinstancedmeshes_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(innerinstancedmeshes.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(innerinstancedmeshes.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[8](null);
      destroy_component(innerinstancedmeshes, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment20.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance20($$self, $$props, $$invalidate) {
  let components;
  let meshesArray;
  let filteredMeshesArray;
  const omit_props_names = ["meshes"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $dispatchingComponent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("InstancedMeshes", slots, ["default"]);
  let { meshes } = $$props;
  const getInstance = (id) => {
    return new Proxy(
      Instance_default,
      {
        construct(Instance2, args) {
          const opts = {
            ...args[0],
            props: { ...args[0].props, id }
          };
          return new Instance2(opts);
        }
      }
    );
  };
  const getInstanceComponentsArray = (meshes2) => {
    return meshes2.filter((mesh) => mesh.isMesh).map((mesh) => getInstance(mesh.uuid));
  };
  const getInstanceComponentsObject = (meshes2) => {
    return Object.entries(meshes2).reduce(
      (acc, [id, mesh]) => {
        if (!mesh.isMesh) return acc;
        acc[id] = getInstance(mesh.uuid);
        return acc;
      },
      {}
    );
  };
  const dispatchingComponent = forwardEventHandlers();
  validate_store(dispatchingComponent, "dispatchingComponent");
  component_subscribe($$self, dispatchingComponent, (value) => $$invalidate(2, $dispatchingComponent = value));
  $$self.$$.on_mount.push(function() {
    if (meshes === void 0 && !("meshes" in $$props || $$self.$$.bound[$$self.$$.props["meshes"]])) {
      console.warn("<InstancedMeshes> was created without expected prop 'meshes'");
    }
  });
  function innerinstancedmeshes_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $dispatchingComponent = $$value;
      dispatchingComponent.set($dispatchingComponent);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("meshes" in $$new_props) $$invalidate(5, meshes = $$new_props.meshes);
    if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    Instance: Instance_default,
    InnerInstancedMeshes: InnerInstancedMeshes_default,
    meshes,
    getInstance,
    getInstanceComponentsArray,
    getInstanceComponentsObject,
    dispatchingComponent,
    meshesArray,
    filteredMeshesArray,
    components,
    $dispatchingComponent
  });
  $$self.$inject_state = ($$new_props) => {
    if ("meshes" in $$props) $$invalidate(5, meshes = $$new_props.meshes);
    if ("meshesArray" in $$props) $$invalidate(6, meshesArray = $$new_props.meshesArray);
    if ("filteredMeshesArray" in $$props) $$invalidate(0, filteredMeshesArray = $$new_props.filteredMeshesArray);
    if ("components" in $$props) $$invalidate(1, components = $$new_props.components);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*meshes*/
    32) {
      $: $$invalidate(1, components = Array.isArray(meshes) ? getInstanceComponentsArray(meshes) : getInstanceComponentsObject(meshes));
    }
    if ($$self.$$.dirty & /*meshes*/
    32) {
      $: $$invalidate(6, meshesArray = Array.isArray(meshes) ? meshes : Object.values(meshes));
    }
    if ($$self.$$.dirty & /*meshesArray*/
    64) {
      $: $$invalidate(0, filteredMeshesArray = meshesArray.filter((mesh) => mesh.isMesh));
    }
  };
  return [
    filteredMeshesArray,
    components,
    $dispatchingComponent,
    dispatchingComponent,
    $$restProps,
    meshes,
    meshesArray,
    slots,
    innerinstancedmeshes_binding,
    $$scope
  ];
}
var InstancedMeshes = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance20, create_fragment20, safe_not_equal, { meshes: 5 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "InstancedMeshes",
      options,
      id: create_fragment20.name
    });
  }
  get meshes() {
    throw new Error("<InstancedMeshes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set meshes(value) {
    throw new Error("<InstancedMeshes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InstancedMeshes_default = InstancedMeshes;

// node_modules/@threlte/extras/dist/components/SoftShadows/SoftShadows.svelte
function create_fragment21(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment21.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance21($$self, $$props, $$invalidate) {
  let pcss;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SoftShadows", slots, []);
  const { renderer, camera, scene } = useThrelte();
  let { size = 25 } = $$props;
  let { focus = 0 } = $$props;
  let { samples = 10 } = $$props;
  const original = ShaderChunk.shadowmap_pars_fragment;
  const onUpdate = () => {
    ShaderChunk.shadowmap_pars_fragment = original.replace("#ifdef USE_SHADOWMAP", "#ifdef USE_SHADOWMAP\n" + pcss).replace("#if defined( SHADOWMAP_TYPE_PCF )", "\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )");
    recompile();
  };
  const recompile = () => {
    scene.traverse((o) => {
      const object = o;
      if (object.material) {
        renderer?.properties.remove(object.material);
        object.material.dispose?.();
      }
    });
    if (renderer?.info.programs) renderer.info.programs.length = 0;
    renderer?.compile(scene, camera.current);
  };
  onDestroy(() => {
    ShaderChunk.shadowmap_pars_fragment = original;
    recompile();
  });
  const writable_props = ["size", "focus", "samples"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<SoftShadows> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("size" in $$props2) $$invalidate(0, size = $$props2.size);
    if ("focus" in $$props2) $$invalidate(1, focus = $$props2.focus);
    if ("samples" in $$props2) $$invalidate(2, samples = $$props2.samples);
  };
  $$self.$capture_state = () => ({
    useThrelte,
    onDestroy,
    ShaderChunk,
    renderer,
    camera,
    scene,
    size,
    focus,
    samples,
    original,
    onUpdate,
    recompile,
    pcss
  });
  $$self.$inject_state = ($$props2) => {
    if ("size" in $$props2) $$invalidate(0, size = $$props2.size);
    if ("focus" in $$props2) $$invalidate(1, focus = $$props2.focus);
    if ("samples" in $$props2) $$invalidate(2, samples = $$props2.samples);
    if ("pcss" in $$props2) $$invalidate(3, pcss = $$props2.pcss);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*size, focus, samples*/
    7) {
      $: $$invalidate(3, pcss = `
		#define PENUMBRA_FILTER_SIZE float(${size})
		#define RGB_NOISE_FUNCTION(uv) (randRGB(uv))
		vec3 randRGB(vec2 uv) {
			return vec3(
				fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),
				fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),
				fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)
			);
		}

		vec3 lowPassRandRGB(vec2 uv) {
			// 3x3 convolution (average)
			// can be implemented as separable with an extra buffer for a total of 6 samples instead of 9
			vec3 result = vec3(0);
			result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));
			result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));
			result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));
			result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));
			result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));
			result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));
			result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));
			result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));
			result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));
			result *= 0.111111111; // 1.0 / 9.0
			return result;
		}
		vec3 highPassRandRGB(vec2 uv) {
			// by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal
			// hp(x) = x - lp(x)
			return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;
		}


		vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {
			const float goldenAngle = 2.399963f; // radians
			float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));
			float theta = float(sampleIndex) * goldenAngle + angle;
			float sine = sin(theta);
			float cosine = cos(theta);
			return vec2(cosine, sine) * r;
		}
		float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation
			return (zReceiver - zBlocker) / zBlocker;
		}
		float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {
			float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);
			float blockerDepthSum = float(${focus});
			float blockers = 0.0;

			int j = 0;
			vec2 offset = vec2(0.);
			float depth = 0.;

			#pragma unroll_loop_start
			for(int i = 0; i < ${samples}; i ++) {
				offset = (vogelDiskSample(j, ${samples}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;
				depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));
				if (depth < compare) {
					blockerDepthSum += depth;
					blockers++;
				}
				j++;
			}
			#pragma unroll_loop_end

			if (blockers > 0.0) {
				return blockerDepthSum / blockers;
			}
			return -1.0;
		}


		float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {
			float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);
			float shadow = 0.0f;
			int j = 0;
			vec2 vogelSample = vec2(0.0);
			vec2 offset = vec2(0.0);
			#pragma unroll_loop_start
			for (int i = 0; i < ${samples}; i++) {
				vogelSample = vogelDiskSample(j, ${samples}, angle) * texelSize;
				offset = vogelSample * (1.0 + filterRadius * float(${size}));
				shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );
				j++;
			}
			#pragma unroll_loop_end
			return shadow * 1.0 / ${samples}.0;
		}

		float PCSS (sampler2D shadowMap, vec4 coords) {
			vec2 uv = coords.xy;
			float zReceiver = coords.z; // Assumed to be eye-space z in this code
			float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;
			float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);
			if (avgBlockerDepth == -1.0) {
				return 1.0;
			}
			float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);
			return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);
	}`);
    }
    if ($$self.$$.dirty & /*pcss*/
    8) {
      $: pcss, onUpdate();
    }
  };
  return [size, focus, samples, pcss];
}
var SoftShadows = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance21, create_fragment21, safe_not_equal, { size: 0, focus: 1, samples: 2 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SoftShadows",
      options,
      id: create_fragment21.name
    });
  }
  get size() {
    throw new Error("<SoftShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<SoftShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get focus() {
    throw new Error("<SoftShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set focus(value) {
    throw new Error("<SoftShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get samples() {
    throw new Error("<SoftShadows>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set samples(value) {
    throw new Error("<SoftShadows>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SoftShadows_default = SoftShadows;

// node_modules/@threlte/extras/dist/components/MeshLine/MeshLineGeometry.svelte
var get_default_slot_changes14 = (dirty) => ({});
var get_default_slot_context14 = (ctx) => ({ ref: (
  /*geometry*/
  ctx[1]
) });
function create_default_slot17(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context14
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_default_slot_changes14
            ),
            get_default_slot_context14
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot17.name,
    type: "slot",
    source: "(95:0) <T   is={geometry}   bind:this={$component}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment22(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*geometry*/
      ctx[1]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot17] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[8](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*geometry, $$restProps*/
      10 ? get_spread_update(t_spread_levels, [
        dirty & /*geometry*/
        2 && { is: (
          /*geometry*/
          ctx2[1]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      512) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[8](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment22.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance22($$self, $$props, $$invalidate) {
  const omit_props_names = ["points", "shape", "shapeFunction"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("MeshLineGeometry", slots, ["default"]);
  let { points = [] } = $$props;
  let { shape = "none" } = $$props;
  let { shapeFunction = (p) => 1 } = $$props;
  let pointCount = points.length;
  const { invalidate } = useThrelte();
  const positions = new BufferAttribute(new Float32Array(pointCount * 6), 3);
  const previous = new BufferAttribute(new Float32Array(pointCount * 6), 3);
  const next = new BufferAttribute(new Float32Array(pointCount * 6), 3);
  const counters = new BufferAttribute(new Float32Array(pointCount * 2), 1);
  const side = new BufferAttribute(new Float32Array(pointCount * 2), 1);
  const width = new BufferAttribute(new Float32Array(pointCount * 2), 1);
  const uv = new BufferAttribute(new Float32Array(pointCount * 4), 2);
  const indices = new BufferAttribute(new Uint16Array(pointCount * 6), 1);
  if (shape === "taper") {
    shapeFunction = (p) => 1 * Math.pow(4 * p * (1 - p), 1);
  }
  for (let i = 0, i2 = 0, i3 = 0, i4 = 0; i < pointCount; i += 1, i2 += 2, i3 += 4, i4 += 6) {
    counters.setX(i2, i / points.length);
    counters.setX(i2 + 1, i / points.length);
    side.setX(i2, 1);
    side.setX(i2 + 1, -1);
    const w = shape === "none" ? 1 : shapeFunction(i / (pointCount - 1));
    width.setX(i2, w);
    width.setX(i2 + 1, w);
    uv.setXYZW(i3, i / (pointCount - 1), 0, i / (pointCount - 1), 1);
    if (i < pointCount - 1) {
      const n = i * 2;
      indices.setX(i4 + 0, n + 0);
      indices.setX(i4 + 1, n + 1);
      indices.setX(i4 + 2, n + 2);
      indices.setX(i4 + 3, n + 2);
      indices.setX(i4 + 4, n + 1);
      indices.setX(i4 + 5, n + 3);
    }
  }
  const geometry = new BufferGeometry();
  geometry.setAttribute("position", positions);
  geometry.setAttribute("previous", previous);
  geometry.setAttribute("next", next);
  geometry.setAttribute("counters", counters);
  geometry.setAttribute("side", side);
  geometry.setAttribute("width", width);
  geometry.setAttribute("uv", uv);
  geometry.setIndex(indices);
  const setPoints = (points2) => {
    if (points2.length === 0) return;
    if (points2.length !== pointCount) return;
    let positionIndex = 0;
    let previousIndex = 0;
    let nextIndex = 0;
    const p1 = points2[0];
    previous.setXYZ(previousIndex, p1.x, p1.y, p1.z);
    previousIndex += 1;
    previous.setXYZ(previousIndex, p1.x, p1.y, p1.z);
    previousIndex += 1;
    for (let i = 0; i < pointCount; i++) {
      const p = points2[i];
      positions.setXYZ(positionIndex, p.x, p.y, p.z);
      positionIndex += 1;
      positions.setXYZ(positionIndex, p.x, p.y, p.z);
      positionIndex += 1;
      if (i < pointCount - 1) {
        previous.setXYZ(previousIndex, p.x, p.y, p.z);
        previousIndex += 1;
        previous.setXYZ(previousIndex, p.x, p.y, p.z);
        previousIndex += 1;
      }
      if (i > 0 && i + 1 <= pointCount) {
        next.setXYZ(nextIndex, p.x, p.y, p.z);
        nextIndex += 1;
        next.setXYZ(nextIndex, p.x, p.y, p.z);
        nextIndex += 1;
      }
    }
    const p2 = points2[pointCount - 1];
    next.setXYZ(nextIndex, p2.x, p2.y, p2.z);
    nextIndex += 1;
    next.setXYZ(nextIndex, p2.x, p2.y, p2.z);
    nextIndex += 1;
    positions.needsUpdate = true;
    previous.needsUpdate = true;
    next.needsUpdate = true;
    geometry.computeBoundingSphere();
    invalidate();
  };
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(0, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("points" in $$new_props) $$invalidate(5, points = $$new_props.points);
    if ("shape" in $$new_props) $$invalidate(6, shape = $$new_props.shape);
    if ("shapeFunction" in $$new_props) $$invalidate(4, shapeFunction = $$new_props.shapeFunction);
    if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useThrelte,
    forwardEventHandlers,
    BufferGeometry,
    Vector3,
    BufferAttribute,
    points,
    shape,
    shapeFunction,
    pointCount,
    invalidate,
    positions,
    previous,
    next,
    counters,
    side,
    width,
    uv,
    indices,
    geometry,
    setPoints,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("points" in $$props) $$invalidate(5, points = $$new_props.points);
    if ("shape" in $$props) $$invalidate(6, shape = $$new_props.shape);
    if ("shapeFunction" in $$props) $$invalidate(4, shapeFunction = $$new_props.shapeFunction);
    if ("pointCount" in $$props) pointCount = $$new_props.pointCount;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*points*/
    32) {
      $: setPoints(points);
    }
  };
  return [
    $component,
    geometry,
    component,
    $$restProps,
    shapeFunction,
    points,
    shape,
    slots,
    t_binding,
    $$scope
  ];
}
var MeshLineGeometry = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance22, create_fragment22, safe_not_equal, { points: 5, shape: 6, shapeFunction: 4 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "MeshLineGeometry",
      options,
      id: create_fragment22.name
    });
  }
  get points() {
    throw new Error("<MeshLineGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set points(value) {
    throw new Error("<MeshLineGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get shape() {
    throw new Error("<MeshLineGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set shape(value) {
    throw new Error("<MeshLineGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get shapeFunction() {
    throw new Error("<MeshLineGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set shapeFunction(value) {
    throw new Error("<MeshLineGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MeshLineGeometry_default = MeshLineGeometry;

// node_modules/@threlte/extras/dist/components/MeshLine/fragment.js
var fragmentShader3 = `
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>

uniform float useDash;
uniform float dashArray;
uniform float dashOffset;
uniform float dashRatio;
uniform sampler2D alphaMap;
uniform float useAlphaMap;

varying vec2 vUV;
varying vec4 vColor;
varying float vCounters;

void main()	{
	#include <logdepthbuf_fragment>
	#include <${revision2 < 154 ? "encodings_fragment" : "colorspace_fragment"}>

	vec4 c = vColor;

	if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV ).r;

	if( useDash == 1. ){
			c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));
	}

	gl_FragColor = LinearTosRGB(c);
}
`;

// node_modules/@threlte/extras/dist/components/MeshLine/vertex.js
var vertexShader3 = `
    ${ShaderChunk.logdepthbuf_pars_vertex}
    ${ShaderChunk.fog_pars_vertex}

    attribute vec3 previous;
    attribute vec3 next;
    attribute float side;
    attribute float width;
    attribute float counters;

    uniform vec2 resolution;
    uniform float lineWidth;
    uniform vec3 color;
    uniform float opacity;
    uniform float sizeAttenuation;
    uniform float scaleDown;

    varying vec2 vUV;
    varying vec4 vColor;
    varying float vCounters;

    vec2 intoScreen(vec4 i) {
        return resolution * (0.5 * i.xy / i.w + 0.5);
    }

    void main() {
        float aspect = resolution.y / resolution.x;

        mat4 m = projectionMatrix * modelViewMatrix;

        vec4 currentClip = m * vec4( position, 1.0 );
        vec4 prevClip = m * vec4( previous, 1.0 );
        vec4 nextClip = m * vec4( next, 1.0 );

        vec4 currentNormed = currentClip / currentClip.w;
        vec4 prevNormed = prevClip / prevClip.w;
        vec4 nextNormed = nextClip / nextClip.w;

        vec2 currentScreen = intoScreen(currentNormed);
        vec2 prevScreen = intoScreen(prevNormed);
        vec2 nextScreen = intoScreen(nextNormed);

        float actualWidth = lineWidth * width;

        vec2 dir;
        if(nextScreen == currentScreen) {
            dir = normalize( currentScreen - prevScreen );
        } else if(prevScreen == currentScreen) {
            dir = normalize( nextScreen - currentScreen );
        } else {
            vec2 inDir = currentScreen - prevScreen;
            vec2 outDir = nextScreen - currentScreen;
            vec2 fullDir = nextScreen - prevScreen;

            if(length(fullDir) > 0.0) {
                dir = normalize(fullDir);
            } else if(length(inDir) > 0.0){
                dir = normalize(inDir);
            } else {
                dir = normalize(outDir);
            }
        }

        vec2 normal = vec2(-dir.y, dir.x);

        if(sizeAttenuation != 0.0) {
            normal /= currentClip.w;
            normal *= min(resolution.x, resolution.y);
        }

        if (scaleDown > 0.0) {
            float dist = length(nextNormed - prevNormed);
            normal *= smoothstep(0.0, scaleDown, dist);
        }

        vec2 offsetInScreen = actualWidth * normal * side * 0.5;

        vec2 withOffsetScreen = currentScreen + offsetInScreen;
        vec3 withOffsetNormed = vec3((2.0 * withOffsetScreen/resolution - 1.0), currentNormed.z);

        vCounters = counters;
        vColor = vec4( color, opacity );
        vUV = uv;

        gl_Position = currentClip.w * vec4(withOffsetNormed, 1.0);

        ${ShaderChunk.logdepthbuf_vertex}
        ${ShaderChunk.fog_vertex}
    }
`;

// node_modules/@threlte/extras/dist/components/MeshLine/MeshLineMaterial.svelte
var get_default_slot_changes15 = (dirty) => ({});
var get_default_slot_context15 = (ctx) => ({ ref: (
  /*material*/
  ctx[2]
) });
function create_default_slot18(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[18],
    get_default_slot_context15
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        262144)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[18],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[18]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[18],
              dirty,
              get_default_slot_changes15
            ),
            get_default_slot_context15
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot18.name,
    type: "slot",
    source: "(47:0) <T   is={material}   bind:this={$component}   {...$$restProps}   {fragmentShader}   {vertexShader} >",
    ctx
  });
  return block;
}
function create_fragment23(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*material*/
      ctx[2]
    ) },
    /*$$restProps*/
    ctx[4],
    { fragmentShader: fragmentShader3 },
    { vertexShader: vertexShader3 }
  ];
  let t_props = {
    $$slots: { default: [create_default_slot18] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[17](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*material, $$restProps*/
      20 ? get_spread_update(t_spread_levels, [
        dirty & /*material*/
        4 && { is: (
          /*material*/
          ctx2[2]
        ) },
        dirty & /*$$restProps*/
        16 && get_spread_object(
          /*$$restProps*/
          ctx2[4]
        ),
        t_spread_levels[2],
        t_spread_levels[3]
      ]) : {};
      if (dirty & /*$$scope*/
      262144) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[17](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment23.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance23($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "opacity",
    "color",
    "dashOffset",
    "dashArray",
    "dashRatio",
    "attenuate",
    "width",
    "scaleDown",
    "alphaMap"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $size;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("MeshLineMaterial", slots, ["default"]);
  let { opacity = 1 } = $$props;
  let { color = "#ffffff" } = $$props;
  let { dashOffset = 0 } = $$props;
  let { dashArray = 0 } = $$props;
  let { dashRatio = 0 } = $$props;
  let { attenuate = true } = $$props;
  let { width = 1 } = $$props;
  let { scaleDown = 0 } = $$props;
  let { alphaMap = void 0 } = $$props;
  let { invalidate, size } = useThrelte();
  validate_store(size, "size");
  component_subscribe($$self, size, (value) => $$invalidate(15, $size = value));
  const uniforms = {
    lineWidth: { value: width },
    color: { value: new Color(color) },
    opacity: { value: opacity },
    resolution: { value: new Vector2(1, 1) },
    sizeAttenuation: { value: attenuate ? 1 : 0 },
    dashArray: { value: dashArray },
    dashOffset: { value: dashOffset },
    dashRatio: { value: dashRatio },
    useDash: { value: dashArray > 0 ? 1 : 0 },
    scaleDown: { value: scaleDown / 10 },
    alphaTest: { value: 0 },
    alphaMap: { value: alphaMap },
    useAlphaMap: { value: alphaMap ? 1 : 0 }
  };
  const material = new ShaderMaterial({ uniforms });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(0, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("opacity" in $$new_props) $$invalidate(5, opacity = $$new_props.opacity);
    if ("color" in $$new_props) $$invalidate(6, color = $$new_props.color);
    if ("dashOffset" in $$new_props) $$invalidate(7, dashOffset = $$new_props.dashOffset);
    if ("dashArray" in $$new_props) $$invalidate(8, dashArray = $$new_props.dashArray);
    if ("dashRatio" in $$new_props) $$invalidate(9, dashRatio = $$new_props.dashRatio);
    if ("attenuate" in $$new_props) $$invalidate(10, attenuate = $$new_props.attenuate);
    if ("width" in $$new_props) $$invalidate(11, width = $$new_props.width);
    if ("scaleDown" in $$new_props) $$invalidate(12, scaleDown = $$new_props.scaleDown);
    if ("alphaMap" in $$new_props) $$invalidate(13, alphaMap = $$new_props.alphaMap);
    if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useThrelte,
    forwardEventHandlers,
    ShaderMaterial,
    Color,
    Vector2,
    fragmentShader: fragmentShader3,
    vertexShader: vertexShader3,
    opacity,
    color,
    dashOffset,
    dashArray,
    dashRatio,
    attenuate,
    width,
    scaleDown,
    alphaMap,
    invalidate,
    size,
    uniforms,
    material,
    component,
    $size,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("opacity" in $$props) $$invalidate(5, opacity = $$new_props.opacity);
    if ("color" in $$props) $$invalidate(6, color = $$new_props.color);
    if ("dashOffset" in $$props) $$invalidate(7, dashOffset = $$new_props.dashOffset);
    if ("dashArray" in $$props) $$invalidate(8, dashArray = $$new_props.dashArray);
    if ("dashRatio" in $$props) $$invalidate(9, dashRatio = $$new_props.dashRatio);
    if ("attenuate" in $$props) $$invalidate(10, attenuate = $$new_props.attenuate);
    if ("width" in $$props) $$invalidate(11, width = $$new_props.width);
    if ("scaleDown" in $$props) $$invalidate(12, scaleDown = $$new_props.scaleDown);
    if ("alphaMap" in $$props) $$invalidate(13, alphaMap = $$new_props.alphaMap);
    if ("invalidate" in $$props) $$invalidate(19, invalidate = $$new_props.invalidate);
    if ("size" in $$props) $$invalidate(1, size = $$new_props.size);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*dashRatio, dashArray, dashOffset, width, opacity, uniforms, color*/
    19424) {
      $: {
        $$invalidate(14, uniforms.dashRatio.value = dashRatio, uniforms);
        $$invalidate(14, uniforms.dashArray.value = dashArray, uniforms);
        $$invalidate(14, uniforms.dashOffset.value = dashOffset, uniforms);
        $$invalidate(14, uniforms.lineWidth.value = width, uniforms);
        $$invalidate(14, uniforms.opacity.value = opacity, uniforms);
        uniforms.color.value.set(color);
        invalidate();
      }
    }
    if ($$self.$$.dirty & /*uniforms, $size*/
    49152) {
      $: {
        uniforms.resolution.value.set($size.width, $size.height);
        invalidate();
      }
    }
  };
  return [
    $component,
    size,
    material,
    component,
    $$restProps,
    opacity,
    color,
    dashOffset,
    dashArray,
    dashRatio,
    attenuate,
    width,
    scaleDown,
    alphaMap,
    uniforms,
    $size,
    slots,
    t_binding,
    $$scope
  ];
}
var MeshLineMaterial = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance23, create_fragment23, safe_not_equal, {
      opacity: 5,
      color: 6,
      dashOffset: 7,
      dashArray: 8,
      dashRatio: 9,
      attenuate: 10,
      width: 11,
      scaleDown: 12,
      alphaMap: 13
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "MeshLineMaterial",
      options,
      id: create_fragment23.name
    });
  }
  get opacity() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set opacity(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dashOffset() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dashOffset(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dashArray() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dashArray(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dashRatio() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dashRatio(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get attenuate() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set attenuate(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get width() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set width(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scaleDown() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scaleDown(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get alphaMap() {
    throw new Error("<MeshLineMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set alphaMap(value) {
    throw new Error("<MeshLineMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MeshLineMaterial_default = MeshLineMaterial;

// node_modules/@threlte/extras/dist/components/Sky/Sky.svelte
var { console: console_13 } = globals;
var get_default_slot_changes16 = (dirty) => ({ renderTarget: dirty & /*renderTarget*/
1 });
var get_default_slot_context16 = (ctx) => ({
  sunPosition: (
    /*sunPosition*/
    ctx[2]
  ),
  renderTarget: (
    /*renderTarget*/
    ctx[0]
  )
});
function create_default_slot19(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    get_default_slot_context16
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, renderTarget*/
        16385)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              get_default_slot_changes16
            ),
            get_default_slot_context16
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot19.name,
    type: "slot",
    source: "(90:0) <T is={sky}>",
    ctx
  });
  return block;
}
function create_fragment24(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*sky*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot19] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = {};
      if (dirty & /*$$scope, renderTarget*/
      16385) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment24.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance24($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Sky", slots, ["default"]);
  let { scale = 1e3 } = $$props;
  let { turbidity = 10 } = $$props;
  let { rayleigh = 3 } = $$props;
  let { mieCoefficient = 5e-3 } = $$props;
  let { mieDirectionalG = 0.7 } = $$props;
  let { elevation = 2 } = $$props;
  let { azimuth = 180 } = $$props;
  let { setEnvironment = true } = $$props;
  let { cubeMapSize = 128 } = $$props;
  let { webGLRenderTargetOptions = {} } = $$props;
  const sky = new Sky();
  const sunPosition = new Vector3();
  const uniforms = sky.material.uniforms;
  const { renderer, scene, invalidate } = useThrelte();
  let renderTarget;
  let cubeCamera;
  const init2 = () => {
    $$invalidate(0, renderTarget = new WebGLCubeRenderTarget(
      cubeMapSize,
      {
        type: HalfFloatType,
        generateMipmaps: true,
        minFilter: LinearMipmapLinearFilter,
        ...webGLRenderTargetOptions
      }
    ));
    cubeCamera = new CubeCamera(1, 1.1, renderTarget);
  };
  const originalEnvironment = scene.environment;
  const { start: scheduleUpdate, stop } = useTask(
    () => {
      sky.scale.setScalar(scale);
      uniforms.turbidity.value = turbidity;
      uniforms.rayleigh.value = rayleigh;
      uniforms.mieCoefficient.value = mieCoefficient;
      uniforms.mieDirectionalG.value = mieDirectionalG;
      const phi = MathUtils.degToRad(90 - elevation);
      const theta = MathUtils.degToRad(azimuth);
      sunPosition.setFromSphericalCoords(1, phi, theta);
      uniforms.sunPosition.value.copy(sunPosition);
      if (setEnvironment) {
        if (!renderTarget || !cubeCamera) init2();
        cubeCamera?.update(renderer, sky);
      }
      invalidate();
      stop();
    },
    { autoStart: false, autoInvalidate: false }
  );
  onDestroy(() => {
    sky.material.dispose();
    scene.environment = originalEnvironment;
    try {
      renderTarget?.dispose();
    } catch (error) {
      console.warn("Could not dispose renderTarget:", error);
    }
  });
  const writable_props = [
    "scale",
    "turbidity",
    "rayleigh",
    "mieCoefficient",
    "mieDirectionalG",
    "elevation",
    "azimuth",
    "setEnvironment",
    "cubeMapSize",
    "webGLRenderTargetOptions"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console_13.warn(`<Sky> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("scale" in $$props2) $$invalidate(3, scale = $$props2.scale);
    if ("turbidity" in $$props2) $$invalidate(4, turbidity = $$props2.turbidity);
    if ("rayleigh" in $$props2) $$invalidate(5, rayleigh = $$props2.rayleigh);
    if ("mieCoefficient" in $$props2) $$invalidate(6, mieCoefficient = $$props2.mieCoefficient);
    if ("mieDirectionalG" in $$props2) $$invalidate(7, mieDirectionalG = $$props2.mieDirectionalG);
    if ("elevation" in $$props2) $$invalidate(8, elevation = $$props2.elevation);
    if ("azimuth" in $$props2) $$invalidate(9, azimuth = $$props2.azimuth);
    if ("setEnvironment" in $$props2) $$invalidate(10, setEnvironment = $$props2.setEnvironment);
    if ("cubeMapSize" in $$props2) $$invalidate(11, cubeMapSize = $$props2.cubeMapSize);
    if ("webGLRenderTargetOptions" in $$props2) $$invalidate(12, webGLRenderTargetOptions = $$props2.webGLRenderTargetOptions);
    if ("$$scope" in $$props2) $$invalidate(14, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useTask,
    useThrelte,
    onDestroy,
    CubeCamera,
    HalfFloatType,
    LinearMipmapLinearFilter,
    MathUtils,
    Vector3,
    WebGLCubeRenderTarget,
    Sky,
    scale,
    turbidity,
    rayleigh,
    mieCoefficient,
    mieDirectionalG,
    elevation,
    azimuth,
    setEnvironment,
    cubeMapSize,
    webGLRenderTargetOptions,
    sky,
    sunPosition,
    uniforms,
    renderer,
    scene,
    invalidate,
    renderTarget,
    cubeCamera,
    init: init2,
    originalEnvironment,
    scheduleUpdate,
    stop
  });
  $$self.$inject_state = ($$props2) => {
    if ("scale" in $$props2) $$invalidate(3, scale = $$props2.scale);
    if ("turbidity" in $$props2) $$invalidate(4, turbidity = $$props2.turbidity);
    if ("rayleigh" in $$props2) $$invalidate(5, rayleigh = $$props2.rayleigh);
    if ("mieCoefficient" in $$props2) $$invalidate(6, mieCoefficient = $$props2.mieCoefficient);
    if ("mieDirectionalG" in $$props2) $$invalidate(7, mieDirectionalG = $$props2.mieDirectionalG);
    if ("elevation" in $$props2) $$invalidate(8, elevation = $$props2.elevation);
    if ("azimuth" in $$props2) $$invalidate(9, azimuth = $$props2.azimuth);
    if ("setEnvironment" in $$props2) $$invalidate(10, setEnvironment = $$props2.setEnvironment);
    if ("cubeMapSize" in $$props2) $$invalidate(11, cubeMapSize = $$props2.cubeMapSize);
    if ("webGLRenderTargetOptions" in $$props2) $$invalidate(12, webGLRenderTargetOptions = $$props2.webGLRenderTargetOptions);
    if ("renderTarget" in $$props2) $$invalidate(0, renderTarget = $$props2.renderTarget);
    if ("cubeCamera" in $$props2) cubeCamera = $$props2.cubeCamera;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*setEnvironment, renderTarget*/
    1025) {
      $: if (setEnvironment && renderTarget) {
        scene.environment = renderTarget.texture;
        invalidate();
      } else if (!setEnvironment) {
        scene.environment = originalEnvironment;
        invalidate();
      }
    }
    if ($$self.$$.dirty & /*scale, turbidity, rayleigh, mieCoefficient, mieDirectionalG, elevation, azimuth*/
    1016) {
      $: scale, turbidity, rayleigh, mieCoefficient, mieDirectionalG, elevation, azimuth, scheduleUpdate();
    }
  };
  return [
    renderTarget,
    sky,
    sunPosition,
    scale,
    turbidity,
    rayleigh,
    mieCoefficient,
    mieDirectionalG,
    elevation,
    azimuth,
    setEnvironment,
    cubeMapSize,
    webGLRenderTargetOptions,
    slots,
    $$scope
  ];
}
var Sky_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance24, create_fragment24, safe_not_equal, {
      scale: 3,
      turbidity: 4,
      rayleigh: 5,
      mieCoefficient: 6,
      mieDirectionalG: 7,
      elevation: 8,
      azimuth: 9,
      setEnvironment: 10,
      cubeMapSize: 11,
      webGLRenderTargetOptions: 12
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Sky_1",
      options,
      id: create_fragment24.name
    });
  }
  get scale() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scale(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get turbidity() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set turbidity(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rayleigh() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rayleigh(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get mieCoefficient() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set mieCoefficient(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get mieDirectionalG() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set mieDirectionalG(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get elevation() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set elevation(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get azimuth() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set azimuth(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setEnvironment() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set setEnvironment(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get cubeMapSize() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set cubeMapSize(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get webGLRenderTargetOptions() {
    throw new Error("<Sky>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set webGLRenderTargetOptions(value) {
    throw new Error("<Sky>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Sky_default = Sky_1;

// node_modules/@threlte/extras/dist/components/Align/alignPlugin.js
var isObject3D = (object) => object.isObject3D;
var injectAlignPlugin = (align) => {
  injectPlugin("align-plugin", ({ ref }) => {
    if (!isObject3D(ref))
      return;
    onMount(() => {
      align();
      return align;
    });
    const waitForTickAndAlign = async () => {
      await tick();
      align();
    };
    return {
      onRefChange() {
        waitForTickAndAlign();
      }
    };
  });
};

// node_modules/@threlte/extras/dist/components/Align/Align.svelte
var get_default_slot_changes17 = (dirty) => ({ ref: dirty & /*ref*/
2097152 });
var get_default_slot_context17 = (ctx) => ({
  align: (
    /*scheduleAligning*/
    ctx[4]
  ),
  ref: (
    /*ref*/
    ctx[21]
  )
});
function create_default_slot_22(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[17],
    get_default_slot_context17
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        2228224)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[17],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[17]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[17],
              dirty,
              get_default_slot_changes17
            ),
            get_default_slot_context17
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_22.name,
    type: "slot",
    source: "(93:4) <T is={innerGroup}>",
    ctx
  });
  return block;
}
function create_default_slot_16(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*innerGroup*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = {};
      if (dirty & /*$$scope, ref*/
      2228224) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_16.name,
    type: "slot",
    source: "(92:2) <T is={outerGroup}>",
    ctx
  });
  return block;
}
function create_default_slot20(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*outerGroup*/
        ctx[3]
      ),
      $$slots: { default: [create_default_slot_16] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = {};
      if (dirty & /*$$scope, ref*/
      2228224) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot20.name,
    type: "slot",
    source: "(86:0) <T   is={containerGroup}   {...$$restProps}   bind:this={$component}   let:ref >",
    ctx
  });
  return block;
}
function create_fragment25(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*containerGroup*/
      ctx[1]
    ) },
    /*$$restProps*/
    ctx[6]
  ];
  let t_props = {
    $$slots: {
      default: [
        create_default_slot20,
        ({ ref }) => ({ 21: ref }),
        ({ ref }) => ref ? 2097152 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[16](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*containerGroup, $$restProps*/
      66 ? get_spread_update(t_spread_levels, [
        dirty & /*containerGroup*/
        2 && { is: (
          /*containerGroup*/
          ctx2[1]
        ) },
        dirty & /*$$restProps*/
        64 && get_spread_object(
          /*$$restProps*/
          ctx2[6]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      2228224) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[16](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment25.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance25($$self, $$props, $$invalidate) {
  const omit_props_names = ["x", "y", "z", "precise", "auto", "calculate", "align"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Align", slots, ["default"]);
  let { x = 0 } = $$props;
  let { y = 0 } = $$props;
  let { z = 0 } = $$props;
  let { precise = false } = $$props;
  let { auto = false } = $$props;
  const dispatch = createRawEventDispatcher();
  const { invalidate } = useThrelte();
  const containerGroup = new Group();
  const innerGroup = new Group();
  const outerGroup = new Group();
  let mounted = false;
  onMount(() => {
    $$invalidate(14, mounted = true);
  });
  const calculate = () => {
    if (!mounted) return;
    if (x === false && y === false && z === false) return;
    outerGroup.matrixWorld.identity();
    const box3 = new Box3().setFromObject(innerGroup, precise);
    const align2 = new Vector3();
    const sphere = new Sphere();
    const width = box3.max.x - box3.min.x;
    const height = box3.max.y - box3.min.y;
    const depth = box3.max.z - box3.min.z;
    box3.getCenter(align2);
    box3.getBoundingSphere(sphere);
    const vAlign = (y || 0) * height / 2;
    const hAlign = (x || 0) * width / 2;
    const dAlign = (z || 0) * depth / 2;
    outerGroup.position.set(x === false ? 0 : -align2.x + hAlign, y === false ? 0 : -align2.y + vAlign, z === false ? 0 : -align2.z + dAlign);
    const eventData = {
      boundingBox: box3,
      center: outerGroup.position.clone(),
      boundingSphere: sphere,
      container: containerGroup,
      depth,
      depthAlignment: dAlign,
      height,
      verticalAlignment: vAlign,
      width,
      horizontalAlignment: hAlign
    };
    dispatch("align", eventData);
  };
  const { start: scheduleAligning, stop } = useTask(
    () => {
      calculate();
      invalidate();
      stop();
    },
    { autoStart: false, autoInvalidate: false }
  );
  const align = () => {
    scheduleAligning();
  };
  if (auto) injectAlignPlugin(scheduleAligning);
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(0, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("x" in $$new_props) $$invalidate(7, x = $$new_props.x);
    if ("y" in $$new_props) $$invalidate(8, y = $$new_props.y);
    if ("z" in $$new_props) $$invalidate(9, z = $$new_props.z);
    if ("precise" in $$new_props) $$invalidate(10, precise = $$new_props.precise);
    if ("auto" in $$new_props) $$invalidate(11, auto = $$new_props.auto);
    if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    createRawEventDispatcher,
    forwardEventHandlers,
    useTask,
    useThrelte,
    onMount,
    Box3,
    Group,
    Sphere,
    Vector3,
    injectAlignPlugin,
    x,
    y,
    z,
    precise,
    auto,
    dispatch,
    invalidate,
    containerGroup,
    innerGroup,
    outerGroup,
    mounted,
    calculate,
    scheduleAligning,
    stop,
    align,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("x" in $$props) $$invalidate(7, x = $$new_props.x);
    if ("y" in $$props) $$invalidate(8, y = $$new_props.y);
    if ("z" in $$props) $$invalidate(9, z = $$new_props.z);
    if ("precise" in $$props) $$invalidate(10, precise = $$new_props.precise);
    if ("auto" in $$props) $$invalidate(11, auto = $$new_props.auto);
    if ("mounted" in $$props) $$invalidate(14, mounted = $$new_props.mounted);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*mounted, x, y, z, precise*/
    18304) {
      $: mounted === true && x, y, z, precise, scheduleAligning();
    }
  };
  return [
    $component,
    containerGroup,
    innerGroup,
    outerGroup,
    scheduleAligning,
    component,
    $$restProps,
    x,
    y,
    z,
    precise,
    auto,
    calculate,
    align,
    mounted,
    slots,
    t_binding,
    $$scope
  ];
}
var Align = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance25, create_fragment25, safe_not_equal, {
      x: 7,
      y: 8,
      z: 9,
      precise: 10,
      auto: 11,
      calculate: 12,
      align: 13
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Align",
      options,
      id: create_fragment25.name
    });
  }
  get x() {
    throw new Error("<Align>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set x(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get y() {
    throw new Error("<Align>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set y(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get z() {
    throw new Error("<Align>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set z(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get precise() {
    throw new Error("<Align>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set precise(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get auto() {
    throw new Error("<Align>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set auto(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get calculate() {
    return this.$$.ctx[12];
  }
  set calculate(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get align() {
    return this.$$.ctx[13];
  }
  set align(value) {
    throw new Error("<Align>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Align_default = Align;

// node_modules/@threlte/extras/dist/components/CSM/useMaterials.js
var useMaterials = () => {
  let setupCallback = void 0;
  const allMaterials = /* @__PURE__ */ new Set();
  const isSupportedMaterial = (material) => {
    return material.isMeshStandardMaterial || material.isMeshPhongMaterial;
  };
  const isMesh = (ref) => {
    return ref.isMesh;
  };
  const addMaterial = (material) => {
    if (allMaterials.has(material))
      return;
    allMaterials.add(material);
    setupCallback?.(material);
  };
  const extractMaterials = (ref) => {
    if (isSupportedMaterial(ref)) {
      addMaterial(ref);
    } else if (isMesh(ref)) {
      if (Array.isArray(ref.material)) {
        ref.material.forEach((material) => {
          if (isSupportedMaterial(material)) {
            addMaterial(material);
          }
        });
      } else {
        if (isSupportedMaterial(ref.material)) {
          addMaterial(ref.material);
        }
      }
    }
  };
  const onNewMaterial = (callback) => {
    setupCallback = callback;
  };
  injectPlugin("csm", ({ ref }) => {
    onMount(() => {
      extractMaterials(ref);
    });
  });
  onDestroy(() => setupCallback = void 0);
  return { onNewMaterial, allMaterials };
};

// node_modules/@threlte/extras/dist/components/CSM/CSM.svelte
var get_disabled_slot_changes = (dirty) => ({});
var get_disabled_slot_context = (ctx) => ({});
function create_if_block7(ctx) {
  let current;
  const disabled_slot_template = (
    /*#slots*/
    ctx[10].disabled
  );
  const disabled_slot = create_slot(
    disabled_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_disabled_slot_context
  );
  const block = {
    c: function create() {
      if (disabled_slot) disabled_slot.c();
    },
    l: function claim(nodes) {
      if (disabled_slot) disabled_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (disabled_slot) {
        disabled_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (disabled_slot) {
        if (disabled_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            disabled_slot,
            disabled_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              disabled_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_disabled_slot_changes
            ),
            get_disabled_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(disabled_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(disabled_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (disabled_slot) disabled_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block7.name,
    type: "if",
    source: "(99:0) {#if !enabled}",
    ctx
  });
  return block;
}
function create_fragment26(ctx) {
  let t;
  let if_block_anchor;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  let if_block = !/*enabled*/
  ctx[0] && create_if_block7(ctx);
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
      t = space();
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
      t = claim_space(nodes);
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      insert_hydration_dev(target, t, anchor);
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!/*enabled*/
      ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*enabled*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
        detach_dev(if_block_anchor);
      }
      if (default_slot) default_slot.d(detaching);
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment26.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance26($$self, $$props, $$invalidate) {
  let $csm;
  let $defaultCamera;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("CSM", slots, ["default", "disabled"]);
  let { enabled = true } = $$props;
  let { args = {} } = $$props;
  let { camera = void 0 } = $$props;
  let { configure = void 0 } = $$props;
  let { lightIntensity = void 0 } = $$props;
  let { lightColor = void 0 } = $$props;
  let { lightDirection = [1, -1, 1] } = $$props;
  const enabledStore = writable(enabled);
  const { camera: defaultCamera, scene, size, useLegacyLights } = useThrelte();
  validate_store(defaultCamera, "defaultCamera");
  component_subscribe($$self, defaultCamera, (value) => $$invalidate(12, $defaultCamera = value));
  const csm = currentWritable(void 0);
  validate_store(csm, "csm");
  component_subscribe($$self, csm, (value) => $$invalidate(11, $csm = value));
  useTask(() => $csm?.update(), { autoInvalidate: false });
  const { onNewMaterial, allMaterials } = useMaterials();
  const disposeCsm = () => {
    $csm?.remove();
    $csm?.dispose();
    set_store_value(csm, $csm = void 0, $csm);
  };
  watch([size, csm], ([_, csm2]) => {
    if (!csm2) return;
    csm2.updateFrustums();
  });
  const cameraStore = writable(camera);
  watch([defaultCamera, cameraStore, csm], ([defaultCamera2, camera2, csm2]) => {
    if (!csm2) return;
    csm2.camera = camera2 ?? defaultCamera2;
    if (args.maxFar !== void 0) csm2.maxFar = args.maxFar;
    if (args.mode !== void 0) csm2.mode = args.mode;
    csm2.updateFrustums();
  });
  watch(enabledStore, (enabled2) => {
    if (enabled2) {
      set_store_value(
        csm,
        $csm = new CSM({
          camera: camera ?? $defaultCamera,
          parent: scene,
          ...args
        }),
        $csm
      );
      configure?.($csm);
      for (const material of allMaterials) {
        $csm.setupMaterial(material);
      }
      onNewMaterial((material) => $csm?.setupMaterial(material));
    } else {
      onNewMaterial(void 0);
      disposeCsm();
    }
  });
  const lightIntensityStore = writable(lightIntensity);
  const lightColorStore = writable(lightColor);
  watch([csm, lightIntensityStore, lightColorStore, useLegacyLights], ([csm2, intensity, color, useLegacyLights2]) => {
    csm2?.lights.forEach((light) => {
      if (intensity !== void 0) {
        light.intensity = intensity / (useLegacyLights2 ? 1 : Math.PI);
      }
      if (color !== void 0) {
        light.color.set(color);
      }
    });
  });
  const lightDirectionStore = writable(lightDirection);
  watch([csm, lightDirectionStore], ([csm2, direction]) => {
    csm2?.lightDirection.set(...direction).normalize();
  });
  onDestroy(disposeCsm);
  const writable_props = [
    "enabled",
    "args",
    "camera",
    "configure",
    "lightIntensity",
    "lightColor",
    "lightDirection"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<CSM> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("enabled" in $$props2) $$invalidate(0, enabled = $$props2.enabled);
    if ("args" in $$props2) $$invalidate(3, args = $$props2.args);
    if ("camera" in $$props2) $$invalidate(4, camera = $$props2.camera);
    if ("configure" in $$props2) $$invalidate(5, configure = $$props2.configure);
    if ("lightIntensity" in $$props2) $$invalidate(6, lightIntensity = $$props2.lightIntensity);
    if ("lightColor" in $$props2) $$invalidate(7, lightColor = $$props2.lightColor);
    if ("lightDirection" in $$props2) $$invalidate(8, lightDirection = $$props2.lightDirection);
    if ("$$scope" in $$props2) $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    currentWritable,
    useTask,
    useThrelte,
    watch,
    onDestroy,
    writable,
    CSM,
    useMaterials,
    enabled,
    args,
    camera,
    configure,
    lightIntensity,
    lightColor,
    lightDirection,
    enabledStore,
    defaultCamera,
    scene,
    size,
    useLegacyLights,
    csm,
    onNewMaterial,
    allMaterials,
    disposeCsm,
    cameraStore,
    lightIntensityStore,
    lightColorStore,
    lightDirectionStore,
    $csm,
    $defaultCamera
  });
  $$self.$inject_state = ($$props2) => {
    if ("enabled" in $$props2) $$invalidate(0, enabled = $$props2.enabled);
    if ("args" in $$props2) $$invalidate(3, args = $$props2.args);
    if ("camera" in $$props2) $$invalidate(4, camera = $$props2.camera);
    if ("configure" in $$props2) $$invalidate(5, configure = $$props2.configure);
    if ("lightIntensity" in $$props2) $$invalidate(6, lightIntensity = $$props2.lightIntensity);
    if ("lightColor" in $$props2) $$invalidate(7, lightColor = $$props2.lightColor);
    if ("lightDirection" in $$props2) $$invalidate(8, lightDirection = $$props2.lightDirection);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*enabled*/
    1) {
      $: enabledStore.set(enabled);
    }
    if ($$self.$$.dirty & /*camera*/
    16) {
      $: cameraStore.set(camera);
    }
    if ($$self.$$.dirty & /*lightIntensity*/
    64) {
      $: lightIntensityStore.set(lightIntensity);
    }
    if ($$self.$$.dirty & /*lightColor*/
    128) {
      $: lightColorStore.set(lightColor);
    }
    if ($$self.$$.dirty & /*lightDirection*/
    256) {
      $: lightDirectionStore.set(lightDirection);
    }
  };
  return [
    enabled,
    defaultCamera,
    csm,
    args,
    camera,
    configure,
    lightIntensity,
    lightColor,
    lightDirection,
    $$scope,
    slots
  ];
}
var CSM_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance26, create_fragment26, safe_not_equal, {
      enabled: 0,
      args: 3,
      camera: 4,
      configure: 5,
      lightIntensity: 6,
      lightColor: 7,
      lightDirection: 8
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "CSM_1",
      options,
      id: create_fragment26.name
    });
  }
  get enabled() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set enabled(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get args() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set args(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get camera() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set camera(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get configure() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set configure(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lightIntensity() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lightIntensity(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lightColor() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lightColor(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lightDirection() {
    throw new Error("<CSM>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lightDirection(value) {
    throw new Error("<CSM>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CSM_default = CSM_1;

// node_modules/@threlte/extras/dist/components/Billboard/Billboard.svelte
var get_default_slot_changes18 = (dirty) => ({ ref: dirty & /*localRef*/
1 });
var get_default_slot_context18 = (ctx) => ({ ref: (
  /*localRef*/
  ctx[0]
) });
function create_default_slot_17(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_default_slot_context18
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, localRef*/
        2049)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_default_slot_changes18
            ),
            get_default_slot_context18
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_17.name,
    type: "slot",
    source: "(42:2) <T.Group bind:ref={inner}>",
    ctx
  });
  return block;
}
function create_default_slot21(ctx) {
  let t_group;
  let updating_ref;
  let current;
  function t_group_ref_binding(value) {
    ctx[9](value);
  }
  let t_group_props = {
    $$slots: { default: [create_default_slot_17] },
    $$scope: { ctx }
  };
  if (
    /*inner*/
    ctx[1] !== void 0
  ) {
    t_group_props.ref = /*inner*/
    ctx[1];
  }
  t_group = new T.Group({ props: t_group_props, $$inline: true });
  binding_callbacks.push(() => bind(t_group, "ref", t_group_ref_binding));
  const block = {
    c: function create() {
      create_component(t_group.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_group.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_group, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_group_changes = {};
      if (dirty & /*$$scope, localRef*/
      2049) {
        t_group_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty & /*inner*/
      2) {
        updating_ref = true;
        t_group_changes.ref = /*inner*/
        ctx2[1];
        add_flush_callback(() => updating_ref = false);
      }
      t_group.$set(t_group_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_group.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_group.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_group, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot21.name,
    type: "slot",
    source: "(36:0) <T.Group   bind:ref={localRef}   matrixAutoUpdate={false}   matrixWorldAutoUpdate={false}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment27(ctx) {
  let t_group;
  let updating_ref;
  let current;
  const t_group_spread_levels = [
    { matrixAutoUpdate: false },
    { matrixWorldAutoUpdate: false },
    /*$$restProps*/
    ctx[3]
  ];
  function t_group_ref_binding_1(value) {
    ctx[10](value);
  }
  let t_group_props = {
    $$slots: { default: [create_default_slot21] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_group_spread_levels.length; i += 1) {
    t_group_props = assign(t_group_props, t_group_spread_levels[i]);
  }
  if (
    /*localRef*/
    ctx[0] !== void 0
  ) {
    t_group_props.ref = /*localRef*/
    ctx[0];
  }
  t_group = new T.Group({ props: t_group_props, $$inline: true });
  binding_callbacks.push(() => bind(t_group, "ref", t_group_ref_binding_1));
  const block = {
    c: function create() {
      create_component(t_group.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_group.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_group, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_group_changes = dirty & /*$$restProps*/
      8 ? get_spread_update(t_group_spread_levels, [
        t_group_spread_levels[0],
        t_group_spread_levels[1],
        get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, inner, localRef*/
      2051) {
        t_group_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty & /*localRef*/
      1) {
        updating_ref = true;
        t_group_changes.ref = /*localRef*/
        ctx2[0];
        add_flush_callback(() => updating_ref = false);
      }
      t_group.$set(t_group_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_group.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_group.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_group, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment27.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance27($$self, $$props, $$invalidate) {
  const omit_props_names = ["follow", "lockX", "lockY", "lockZ"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $camera;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Billboard", slots, ["default"]);
  let { follow = true } = $$props;
  let { lockX = false } = $$props;
  let { lockY = false } = $$props;
  let { lockZ = false } = $$props;
  let inner;
  let localRef;
  const { camera } = useThrelte();
  validate_store(camera, "camera");
  component_subscribe($$self, camera, (value) => $$invalidate(12, $camera = value));
  const q = new Quaternion();
  const prevRotation = new Euler();
  const { start, stop } = useTask(
    () => {
      prevRotation.copy(localRef.rotation);
      localRef.updateMatrix();
      localRef.updateWorldMatrix(false, false);
      localRef.getWorldQuaternion(q);
      $camera.getWorldQuaternion(inner.quaternion).premultiply(q.invert());
      if (lockX) $$invalidate(0, localRef.rotation.x = prevRotation.x, localRef);
      if (lockY) $$invalidate(0, localRef.rotation.y = prevRotation.y, localRef);
      if (lockZ) $$invalidate(0, localRef.rotation.z = prevRotation.z, localRef);
    },
    { autoStart: false }
  );
  function t_group_ref_binding(value) {
    inner = value;
    $$invalidate(1, inner);
  }
  function t_group_ref_binding_1(value) {
    localRef = value;
    $$invalidate(0, localRef);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("follow" in $$new_props) $$invalidate(4, follow = $$new_props.follow);
    if ("lockX" in $$new_props) $$invalidate(5, lockX = $$new_props.lockX);
    if ("lockY" in $$new_props) $$invalidate(6, lockY = $$new_props.lockY);
    if ("lockZ" in $$new_props) $$invalidate(7, lockZ = $$new_props.lockZ);
    if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    Euler,
    Group,
    Quaternion,
    T,
    useTask,
    useThrelte,
    follow,
    lockX,
    lockY,
    lockZ,
    inner,
    localRef,
    camera,
    q,
    prevRotation,
    start,
    stop,
    $camera
  });
  $$self.$inject_state = ($$new_props) => {
    if ("follow" in $$props) $$invalidate(4, follow = $$new_props.follow);
    if ("lockX" in $$props) $$invalidate(5, lockX = $$new_props.lockX);
    if ("lockY" in $$props) $$invalidate(6, lockY = $$new_props.lockY);
    if ("lockZ" in $$props) $$invalidate(7, lockZ = $$new_props.lockZ);
    if ("inner" in $$props) $$invalidate(1, inner = $$new_props.inner);
    if ("localRef" in $$props) $$invalidate(0, localRef = $$new_props.localRef);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*follow, localRef*/
    17) {
      $: if (follow && localRef) {
        start();
      } else {
        stop();
      }
    }
  };
  return [
    localRef,
    inner,
    camera,
    $$restProps,
    follow,
    lockX,
    lockY,
    lockZ,
    slots,
    t_group_ref_binding,
    t_group_ref_binding_1,
    $$scope
  ];
}
var Billboard = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance27, create_fragment27, safe_not_equal, { follow: 4, lockX: 5, lockY: 6, lockZ: 7 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Billboard",
      options,
      id: create_fragment27.name
    });
  }
  get follow() {
    throw new Error("<Billboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set follow(value) {
    throw new Error("<Billboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lockX() {
    throw new Error("<Billboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lockX(value) {
    throw new Error("<Billboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lockY() {
    throw new Error("<Billboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lockY(value) {
    throw new Error("<Billboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lockZ() {
    throw new Error("<Billboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lockZ(value) {
    throw new Error("<Billboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Billboard_default = Billboard;

// node_modules/@threlte/extras/dist/components/FakeGlowMaterial/fragment.js
var fragmentShader4 = `
uniform vec3 glowColor;
uniform float falloffAmount;
uniform float glowSharpness;
uniform float glowInternalRadius;

varying vec3 vPosition;
varying vec3 vNormal;

void main()
{
	// Normal
	vec3 normal = normalize(vNormal);
	if(!gl_FrontFacing)
			normal *= - 1.0;
	vec3 viewDirection = normalize(cameraPosition - vPosition);
	float fresnel = dot(viewDirection, normal);
	fresnel = pow(fresnel, glowInternalRadius + 0.1);
	float falloff = smoothstep(0., falloffAmount, fresnel);
	float fakeGlow = fresnel;
	fakeGlow += fresnel * glowSharpness;
	fakeGlow *= falloff;
	gl_FragColor = vec4(clamp(glowColor * fresnel, 0., 1.0), clamp(fakeGlow, 0., 1.0));

	${ShaderChunk.tonemapping_fragment}
	${ShaderChunk.colorspace_fragment}
}`;

// node_modules/@threlte/extras/dist/components/FakeGlowMaterial/vertex.js
var vertexShader4 = `varying vec3 vPosition;
varying vec3 vNormal;

void main() {
	vec4 modelPosition = modelMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewMatrix * modelPosition;
	vec4 modelNormal = modelMatrix * vec4(normal, 0.0);
	vPosition = modelPosition.xyz;
	vNormal = modelNormal.xyz;
}`;

// node_modules/@threlte/extras/dist/components/FakeGlowMaterial/FakeGlowMaterial.svelte
var get_default_slot_changes19 = (dirty) => ({ ref: dirty & /*material*/
1 });
var get_default_slot_context19 = (ctx) => ({ ref: (
  /*material*/
  ctx[0]
) });
function create_default_slot22(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    get_default_slot_context19
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, material*/
        1025)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[10]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              get_default_slot_changes19
            ),
            get_default_slot_context19
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot22.name,
    type: "slot",
    source: "(28:0) <T   is={material}   bind:this={$component}   {fragmentShader}   {vertexShader}   transparent={true}   blending={AdditiveBlending}   depthTest={false}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment28(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*material*/
      ctx[0]
    ) },
    { fragmentShader: fragmentShader4 },
    { vertexShader: vertexShader4 },
    { transparent: true },
    { blending: AdditiveBlending },
    { depthTest: false },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot22] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[9](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*material, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*material*/
        1 && { is: (
          /*material*/
          ctx2[0]
        ) },
        t_spread_levels[1],
        t_spread_levels[2],
        t_spread_levels[3],
        t_spread_levels[4],
        t_spread_levels[5],
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, material*/
      1025) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[9](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment28.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance28($$self, $$props, $$invalidate) {
  const omit_props_names = ["falloff", "glowInternalRadius", "glowColor", "glowSharpness"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("FakeGlowMaterial", slots, ["default"]);
  let { falloff = 0.1 } = $$props;
  let { glowInternalRadius = 6 } = $$props;
  let { glowColor = "green" } = $$props;
  let { glowSharpness = 1 } = $$props;
  let material = new ShaderMaterial({
    uniforms: {
      falloff: { value: falloff },
      glowInternalRadius: { value: glowInternalRadius },
      glowColor: { value: new Color(glowColor) },
      glowSharpness: { value: glowSharpness }
    }
  });
  let { invalidate } = useThrelte();
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("falloff" in $$new_props) $$invalidate(4, falloff = $$new_props.falloff);
    if ("glowInternalRadius" in $$new_props) $$invalidate(5, glowInternalRadius = $$new_props.glowInternalRadius);
    if ("glowColor" in $$new_props) $$invalidate(6, glowColor = $$new_props.glowColor);
    if ("glowSharpness" in $$new_props) $$invalidate(7, glowSharpness = $$new_props.glowSharpness);
    if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useThrelte,
    forwardEventHandlers,
    Color,
    AdditiveBlending,
    ShaderMaterial,
    fragmentShader: fragmentShader4,
    vertexShader: vertexShader4,
    falloff,
    glowInternalRadius,
    glowColor,
    glowSharpness,
    material,
    invalidate,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("falloff" in $$props) $$invalidate(4, falloff = $$new_props.falloff);
    if ("glowInternalRadius" in $$props) $$invalidate(5, glowInternalRadius = $$new_props.glowInternalRadius);
    if ("glowColor" in $$props) $$invalidate(6, glowColor = $$new_props.glowColor);
    if ("glowSharpness" in $$props) $$invalidate(7, glowSharpness = $$new_props.glowSharpness);
    if ("material" in $$props) $$invalidate(0, material = $$new_props.material);
    if ("invalidate" in $$props) $$invalidate(11, invalidate = $$new_props.invalidate);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*falloff, glowInternalRadius, glowColor, glowSharpness*/
    240) {
      $: {
        $$invalidate(0, material.uniforms.falloff.value = falloff, material);
        $$invalidate(0, material.uniforms.glowInternalRadius.value = glowInternalRadius, material);
        $$invalidate(0, material.uniforms.glowColor.value = new Color(glowColor), material);
        $$invalidate(0, material.uniforms.glowSharpness.value = glowSharpness, material);
        invalidate();
      }
    }
  };
  return [
    material,
    $component,
    component,
    $$restProps,
    falloff,
    glowInternalRadius,
    glowColor,
    glowSharpness,
    slots,
    t_binding,
    $$scope
  ];
}
var FakeGlowMaterial = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance28, create_fragment28, safe_not_equal, {
      falloff: 4,
      glowInternalRadius: 5,
      glowColor: 6,
      glowSharpness: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "FakeGlowMaterial",
      options,
      id: create_fragment28.name
    });
  }
  get falloff() {
    throw new Error("<FakeGlowMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set falloff(value) {
    throw new Error("<FakeGlowMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get glowInternalRadius() {
    throw new Error("<FakeGlowMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set glowInternalRadius(value) {
    throw new Error("<FakeGlowMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get glowColor() {
    throw new Error("<FakeGlowMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set glowColor(value) {
    throw new Error("<FakeGlowMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get glowSharpness() {
    throw new Error("<FakeGlowMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set glowSharpness(value) {
    throw new Error("<FakeGlowMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var FakeGlowMaterial_default = FakeGlowMaterial;

// node_modules/@threlte/extras/dist/components/Stars/fragment.js
var fragmentShader5 = `
uniform sampler2D pointTexture;
uniform float fade;
uniform float opacity;

varying vec3 vColor;
void main() {
	float pointOpacity = 1.0;
	if (fade == 1.0) {
		float d = distance(gl_PointCoord, vec2(0.5, 0.5));
		pointOpacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));
	}
	gl_FragColor = vec4(vColor, pointOpacity * opacity);

	${ShaderChunk.tonemapping_fragment}
	${ShaderChunk.colorspace_fragment}
}`;

// node_modules/@threlte/extras/dist/components/Stars/vertex.js
var vertexShader5 = `uniform float time;
attribute float size;
varying vec3 vColor;
void main() {
	vColor = color;
	vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);
	gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));
	gl_Position = projectionMatrix * mvPosition;
}`;

// node_modules/@threlte/extras/dist/components/Stars/Stars.svelte
var get_default_slot_changes20 = (dirty) => ({ ref: dirty & /*ref*/
33554432 });
var get_default_slot_context20 = (ctx) => ({ ref: (
  /*ref*/
  ctx[25]
) });
function create_default_slot_18(ctx) {
  let t_bufferattribute0;
  let t0;
  let t_bufferattribute1;
  let t1;
  let t_bufferattribute2;
  let current;
  t_bufferattribute0 = new T.BufferAttribute({
    props: {
      attach: func2,
      args: [
        /*positionsArray*/
        ctx[2],
        3
      ]
    },
    $$inline: true
  });
  t_bufferattribute1 = new T.BufferAttribute({
    props: {
      attach: func_1,
      args: [
        /*colorsArray*/
        ctx[3],
        3
      ]
    },
    $$inline: true
  });
  t_bufferattribute2 = new T.BufferAttribute({
    props: {
      attach: func_2,
      args: [
        /*sizesArray*/
        ctx[4],
        1
      ]
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t_bufferattribute0.$$.fragment);
      t0 = space();
      create_component(t_bufferattribute1.$$.fragment);
      t1 = space();
      create_component(t_bufferattribute2.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_bufferattribute0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t_bufferattribute1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(t_bufferattribute2.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_bufferattribute0, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t_bufferattribute1, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      mount_component(t_bufferattribute2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_bufferattribute0_changes = {};
      if (dirty & /*positionsArray*/
      4) t_bufferattribute0_changes.args = [
        /*positionsArray*/
        ctx2[2],
        3
      ];
      t_bufferattribute0.$set(t_bufferattribute0_changes);
      const t_bufferattribute1_changes = {};
      if (dirty & /*colorsArray*/
      8) t_bufferattribute1_changes.args = [
        /*colorsArray*/
        ctx2[3],
        3
      ];
      t_bufferattribute1.$set(t_bufferattribute1_changes);
      const t_bufferattribute2_changes = {};
      if (dirty & /*sizesArray*/
      16) t_bufferattribute2_changes.args = [
        /*sizesArray*/
        ctx2[4],
        1
      ];
      t_bufferattribute2.$set(t_bufferattribute2_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_bufferattribute0.$$.fragment, local);
      transition_in(t_bufferattribute1.$$.fragment, local);
      transition_in(t_bufferattribute2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_bufferattribute0.$$.fragment, local);
      transition_out(t_bufferattribute1.$$.fragment, local);
      transition_out(t_bufferattribute2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t1);
      }
      destroy_component(t_bufferattribute0, detaching);
      destroy_component(t_bufferattribute1, detaching);
      destroy_component(t_bufferattribute2, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_18.name,
    type: "slot",
    source: "(63:2) <T.BufferGeometry>",
    ctx
  });
  return block;
}
function create_default_slot23(ctx) {
  let t_buffergeometry;
  let t0;
  let t1;
  let t2;
  let current;
  t_buffergeometry = new T.BufferGeometry({
    props: {
      $$slots: { default: [create_default_slot_18] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  t1 = new T({
    props: {
      is: (
        /*material*/
        ctx[8]
      ),
      blending: AdditiveBlending,
      "uniforms.fade.value": (
        /*fade*/
        ctx[0] ? 1 : 0
      ),
      "uniforms.time.value": (
        /*time*/
        ctx[5]
      ),
      "uniforms.opacity.value": (
        /*opacity*/
        ctx[1]
      ),
      depthWrite: false,
      transparent: true,
      vertexColors: true
    },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[19],
    get_default_slot_context20
  );
  const block = {
    c: function create() {
      create_component(t_buffergeometry.$$.fragment);
      t0 = space();
      create_component(t1.$$.fragment);
      t2 = space();
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      claim_component(t_buffergeometry.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(t1.$$.fragment, nodes);
      t2 = claim_space(nodes);
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_buffergeometry, target, anchor);
      insert_hydration_dev(target, t0, anchor);
      mount_component(t1, target, anchor);
      insert_hydration_dev(target, t2, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_buffergeometry_changes = {};
      if (dirty & /*$$scope, sizesArray, colorsArray, positionsArray*/
      524316) {
        t_buffergeometry_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_buffergeometry.$set(t_buffergeometry_changes);
      const t1_changes = {};
      if (dirty & /*fade*/
      1) t1_changes["uniforms.fade.value"] = /*fade*/
      ctx2[0] ? 1 : 0;
      if (dirty & /*time*/
      32) t1_changes["uniforms.time.value"] = /*time*/
      ctx2[5];
      if (dirty & /*opacity*/
      2) t1_changes["uniforms.opacity.value"] = /*opacity*/
      ctx2[1];
      t1.$set(t1_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        34078720)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[19],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[19]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[19],
              dirty,
              get_default_slot_changes20
            ),
            get_default_slot_context20
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_buffergeometry.$$.fragment, local);
      transition_in(t1.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_buffergeometry.$$.fragment, local);
      transition_out(t1.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t0);
        detach_dev(t2);
      }
      destroy_component(t_buffergeometry, detaching);
      destroy_component(t1, detaching);
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot23.name,
    type: "slot",
    source: "(58:0) <T.Points   bind:this={$component}   {...$$restProps}   let:ref >",
    ctx
  });
  return block;
}
function create_fragment29(ctx) {
  let t_points;
  let current;
  const t_points_spread_levels = [
    /*$$restProps*/
    ctx[9]
  ];
  let t_points_props = {
    $$slots: {
      default: [
        create_default_slot23,
        ({ ref }) => ({ 25: ref }),
        ({ ref }) => ref ? 33554432 : 0
      ]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_points_spread_levels.length; i += 1) {
    t_points_props = assign(t_points_props, t_points_spread_levels[i]);
  }
  t_points = new T.Points({ props: t_points_props, $$inline: true });
  ctx[18](t_points);
  const block = {
    c: function create() {
      create_component(t_points.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_points.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_points, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_points_changes = dirty & /*$$restProps*/
      512 ? get_spread_update(t_points_spread_levels, [get_spread_object(
        /*$$restProps*/
        ctx2[9]
      )]) : {};
      if (dirty & /*$$scope, ref, fade, time, opacity, sizesArray, colorsArray, positionsArray*/
      34078783) {
        t_points_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t_points.$set(t_points_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_points.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_points.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[18](null);
      destroy_component(t_points, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment29.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func2 = (parent, self) => {
  parent.setAttribute("position", self);
  return () => {
  };
};
var func_1 = (parent, self) => {
  parent.setAttribute("color", self);
  return () => {
  };
};
var func_2 = (parent, self) => {
  parent.setAttribute("size", self);
  return () => {
  };
};
function instance29($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "count",
    "radius",
    "depth",
    "factor",
    "saturation",
    "lightness",
    "speed",
    "fade",
    "opacity"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Stars", slots, ["default"]);
  let { count = 5e3 } = $$props;
  let { radius = 50 } = $$props;
  let { depth = 50 } = $$props;
  let { factor = 6 } = $$props;
  let { saturation = 1 } = $$props;
  let { lightness = 0.8 } = $$props;
  let { speed = 1 } = $$props;
  let { fade = true } = $$props;
  let { opacity = 1 } = $$props;
  const vec3 = new Vector3();
  const spherical = new Spherical();
  const genStar = (r) => {
    return vec3.setFromSpherical(spherical.set(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
  };
  let positionsArray;
  let colorsArray;
  let sizesArray;
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(6, $component = value));
  let time = 0;
  const { stop, start } = useTask(
    (dt) => {
      $$invalidate(5, time += dt * speed);
    },
    { autoStart: false }
  );
  const material = new ShaderMaterial({
    uniforms: {
      time: { value: 0 },
      fade: { value: 1 },
      opacity: { value: 1 }
    },
    vertexShader: vertexShader5,
    fragmentShader: fragmentShader5
  });
  function t_points_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("count" in $$new_props) $$invalidate(10, count = $$new_props.count);
    if ("radius" in $$new_props) $$invalidate(11, radius = $$new_props.radius);
    if ("depth" in $$new_props) $$invalidate(12, depth = $$new_props.depth);
    if ("factor" in $$new_props) $$invalidate(13, factor = $$new_props.factor);
    if ("saturation" in $$new_props) $$invalidate(14, saturation = $$new_props.saturation);
    if ("lightness" in $$new_props) $$invalidate(15, lightness = $$new_props.lightness);
    if ("speed" in $$new_props) $$invalidate(16, speed = $$new_props.speed);
    if ("fade" in $$new_props) $$invalidate(0, fade = $$new_props.fade);
    if ("opacity" in $$new_props) $$invalidate(1, opacity = $$new_props.opacity);
    if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    AdditiveBlending,
    Color,
    ShaderMaterial,
    Spherical,
    Vector3,
    T,
    forwardEventHandlers,
    useTask,
    fragmentShader: fragmentShader5,
    vertexShader: vertexShader5,
    count,
    radius,
    depth,
    factor,
    saturation,
    lightness,
    speed,
    fade,
    opacity,
    vec3,
    spherical,
    genStar,
    positionsArray,
    colorsArray,
    sizesArray,
    component,
    time,
    stop,
    start,
    material,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("count" in $$props) $$invalidate(10, count = $$new_props.count);
    if ("radius" in $$props) $$invalidate(11, radius = $$new_props.radius);
    if ("depth" in $$props) $$invalidate(12, depth = $$new_props.depth);
    if ("factor" in $$props) $$invalidate(13, factor = $$new_props.factor);
    if ("saturation" in $$props) $$invalidate(14, saturation = $$new_props.saturation);
    if ("lightness" in $$props) $$invalidate(15, lightness = $$new_props.lightness);
    if ("speed" in $$props) $$invalidate(16, speed = $$new_props.speed);
    if ("fade" in $$props) $$invalidate(0, fade = $$new_props.fade);
    if ("opacity" in $$props) $$invalidate(1, opacity = $$new_props.opacity);
    if ("positionsArray" in $$props) $$invalidate(2, positionsArray = $$new_props.positionsArray);
    if ("colorsArray" in $$props) $$invalidate(3, colorsArray = $$new_props.colorsArray);
    if ("sizesArray" in $$props) $$invalidate(4, sizesArray = $$new_props.sizesArray);
    if ("time" in $$props) $$invalidate(5, time = $$new_props.time);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*count, factor, radius, depth, saturation, lightness*/
    64512) {
      $: {
        const positions = [];
        const colors = [];
        const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor);
        const color = new Color();
        let r = radius + depth;
        const increment = depth / count;
        for (let i = 0; i < count; i++) {
          r -= increment * Math.random();
          const position = genStar(r);
          positions.push(position.x, position.y, position.z);
          color.setHSL(i / count, saturation, lightness);
          colors.push(color.r, color.g, color.b);
        }
        $$invalidate(2, positionsArray = new Float32Array(positions));
        $$invalidate(3, colorsArray = new Float32Array(colors));
        $$invalidate(4, sizesArray = new Float32Array(sizes));
      }
    }
    if ($$self.$$.dirty & /*speed*/
    65536) {
      $: if (speed !== 0) {
        start();
      } else {
        stop();
      }
    }
  };
  return [
    fade,
    opacity,
    positionsArray,
    colorsArray,
    sizesArray,
    time,
    $component,
    component,
    material,
    $$restProps,
    count,
    radius,
    depth,
    factor,
    saturation,
    lightness,
    speed,
    slots,
    t_points_binding,
    $$scope
  ];
}
var Stars = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance29, create_fragment29, safe_not_equal, {
      count: 10,
      radius: 11,
      depth: 12,
      factor: 13,
      saturation: 14,
      lightness: 15,
      speed: 16,
      fade: 0,
      opacity: 1
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Stars",
      options,
      id: create_fragment29.name
    });
  }
  get count() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set count(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get radius() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set radius(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get depth() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set depth(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get factor() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set factor(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get saturation() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set saturation(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lightness() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lightness(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get speed() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set speed(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fade() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fade(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get opacity() {
    throw new Error("<Stars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set opacity(value) {
    throw new Error("<Stars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Stars_default = Stars;

// node_modules/@threlte/extras/dist/components/MeshRefractionMaterial/fragment.js
var fragmentShader6 = `#define ENVMAP_TYPE_CUBE_UV
precision highp isampler2D;
precision highp usampler2D;
varying vec3 vWorldPosition;
varying vec3 vNormal;
varying mat4 vModelMatrixInverse;

#ifdef USE_INSTANCING_COLOR
	varying vec3 vInstanceColor;
#endif

#ifdef ENVMAP_TYPE_CUBEM
	uniform samplerCube envMap;
#else
	uniform sampler2D envMap;
#endif

uniform float bounces;
${shaderStructs}
${shaderIntersectFunction}
uniform BVH bvh;
uniform float ior;
uniform bool correctMips;
uniform vec2 resolution;
uniform float fresnel;
uniform mat4 modelMatrix;
uniform mat4 projectionMatrixInverse;
uniform mat4 viewMatrixInverse;
uniform float aberrationStrength;
uniform vec3 color;

float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {
	return pow( 1.0 + dot( viewDirection, worldNormal), 10.0 );
}

vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 normal, float ior, mat4 modelMatrixInverse) {
	vec3 rayOrigin = ro;
	vec3 rayDirection = rd;
	rayDirection = refract(rayDirection, normal, 1.0 / ior);
	rayOrigin = vWorldPosition + rayDirection * 0.001;
	rayOrigin = (modelMatrixInverse * vec4(rayOrigin, 1.0)).xyz;
	rayDirection = normalize((modelMatrixInverse * vec4(rayDirection, 0.0)).xyz);
	for(float i = 0.0; i < bounces; i++) {
		uvec4 faceIndices = uvec4( 0u );
		vec3 faceNormal = vec3( 0.0, 0.0, 1.0 );
		vec3 barycoord = vec3( 0.0 );
		float side = 1.0;
		float dist = 0.0;
		bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );
		vec3 hitPos = rayOrigin + rayDirection * max(dist - 0.001, 0.0);
		vec3 tempDir = refract(rayDirection, faceNormal, ior);
		if (length(tempDir) != 0.0) {
			rayDirection = tempDir;
			break;
		}
		rayDirection = reflect(rayDirection, faceNormal);
		rayOrigin = hitPos + rayDirection * 0.01;
	}
	rayDirection = normalize((modelMatrix * vec4(rayDirection, 0.0)).xyz);
	return rayDirection;
}

#include <common>
#include <cube_uv_reflection_fragment>

#ifdef ENVMAP_TYPE_CUBEM
	vec4 textureGradient(samplerCube envMap, vec3 rayDirection, vec3 directionCamPerfect) {
		return textureGrad(envMap, rayDirection, dFdx(correctMips ? directionCamPerfect: rayDirection), dFdy(correctMips ? directionCamPerfect: rayDirection));
	}
#else
	vec4 textureGradient(sampler2D envMap, vec3 rayDirection, vec3 directionCamPerfect) {
		vec2 uvv = equirectUv( rayDirection );
		vec2 smoothUv = equirectUv( directionCamPerfect );
		return textureGrad(envMap, uvv, dFdx(correctMips ? smoothUv : uvv), dFdy(correctMips ? smoothUv : uvv));
	}
#endif

void main() {
	vec2 uv = gl_FragCoord.xy / resolution;
	vec3 directionCamPerfect = (projectionMatrixInverse * vec4(uv * 2.0 - 1.0, 0.0, 1.0)).xyz;
	directionCamPerfect = (viewMatrixInverse * vec4(directionCamPerfect, 0.0)).xyz;
	directionCamPerfect = normalize(directionCamPerfect);
	vec3 normal = vNormal;
	vec3 rayOrigin = cameraPosition;
	vec3 rayDirection = normalize(vWorldPosition - cameraPosition);
	vec3 finalColor;
	#ifdef CHROMATIC_ABERRATIONS
		vec3 rayDirectionG = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), vModelMatrixInverse);
		#ifdef FAST_CHROMA
			vec3 rayDirectionR = normalize(rayDirectionG + 1.0 * vec3(aberrationStrength / 2.0));
			vec3 rayDirectionB = normalize(rayDirectionG - 1.0 * vec3(aberrationStrength / 2.0));
		#else
			vec3 rayDirectionR = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 - aberrationStrength), 1.0), vModelMatrixInverse);
			vec3 rayDirectionB = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 + aberrationStrength), 1.0), vModelMatrixInverse);
		#endif
		float finalColorR = textureGradient(envMap, rayDirectionR, directionCamPerfect).r;
		float finalColorG = textureGradient(envMap, rayDirectionG, directionCamPerfect).g;
		float finalColorB = textureGradient(envMap, rayDirectionB, directionCamPerfect).b;
		finalColor = vec3(finalColorR, finalColorG, finalColorB);
	#else
		rayDirection = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), vModelMatrixInverse);
		finalColor = textureGradient(envMap, rayDirection, directionCamPerfect).rgb;
	#endif

	finalColor *= color;
	#ifdef USE_INSTANCING_COLOR
		finalColor *= vInstanceColor;
	#endif

	vec3 viewDirection = normalize(vWorldPosition - cameraPosition);
	float nFresnel = fresnelFunc(viewDirection, normal) * fresnel;
	gl_FragColor = vec4(mix(finalColor, vec3(1.0), nFresnel), 1.0);
	${ShaderChunk.tonemapping_fragment}
	${ShaderChunk.colorspace_fragment}
}`;

// node_modules/@threlte/extras/dist/components/MeshRefractionMaterial/vertex.js
var vertexShader6 = `uniform mat4 viewMatrixInverse;

varying vec3 vWorldPosition;
varying vec3 vNormal;
varying mat4 vModelMatrixInverse;

#ifdef USE_INSTANCING_COLOR
	varying vec3 vInstanceColor;
#endif

void main() {
	vec4 transformedNormal = vec4(normal, 0.0);
	vec4 transformedPosition = vec4(position, 1.0);
	#ifdef USE_INSTANCING
		transformedNormal = instanceMatrix * transformedNormal;
		transformedPosition = instanceMatrix * transformedPosition;
	#endif

	#ifdef USE_INSTANCING
		vModelMatrixInverse = inverse(modelMatrix * instanceMatrix);
	#else
		vModelMatrixInverse = inverse(modelMatrix);
	#endif

	#ifdef USE_INSTANCING_COLOR
		vInstanceColor = instanceColor.rgb;
	#endif

	vWorldPosition = (modelMatrix * transformedPosition).xyz;
	vNormal = normalize((viewMatrixInverse * vec4(normalMatrix * transformedNormal.xyz, 0.0)).xyz);
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * transformedPosition;
}`;

// node_modules/@threlte/extras/dist/components/MeshRefractionMaterial/MeshRefractionMaterial.svelte
function create_fragment30(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*material*/
        ctx[5]
      ),
      "uniforms.envMap.value": (
        /*envMap*/
        ctx[0]
      ),
      "uniforms.bounces.value": (
        /*bounces*/
        ctx[1]
      ),
      "uniforms.ior.value": (
        /*ior*/
        ctx[2]
      ),
      "uniforms.fresnel.value": (
        /*fresnel*/
        ctx[3]
      ),
      "uniforms.aberrationStrength.value": (
        /*aberrationStrength*/
        ctx[4]
      ),
      "uniforms.color.value": (
        /*colorObj*/
        ctx[10]
      ),
      "uniforms.resolution.value": [
        /*$size*/
        ctx[7].width,
        /*$size*/
        ctx[7].height
      ],
      defines: (
        /*defines*/
        ctx[6]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = {};
      if (dirty & /*material*/
      32) t_changes.is = /*material*/
      ctx2[5];
      if (dirty & /*envMap*/
      1) t_changes["uniforms.envMap.value"] = /*envMap*/
      ctx2[0];
      if (dirty & /*bounces*/
      2) t_changes["uniforms.bounces.value"] = /*bounces*/
      ctx2[1];
      if (dirty & /*ior*/
      4) t_changes["uniforms.ior.value"] = /*ior*/
      ctx2[2];
      if (dirty & /*fresnel*/
      8) t_changes["uniforms.fresnel.value"] = /*fresnel*/
      ctx2[3];
      if (dirty & /*aberrationStrength*/
      16) t_changes["uniforms.aberrationStrength.value"] = /*aberrationStrength*/
      ctx2[4];
      if (dirty & /*$size*/
      128) t_changes["uniforms.resolution.value"] = [
        /*$size*/
        ctx2[7].width,
        /*$size*/
        ctx2[7].height
      ];
      if (dirty & /*defines*/
      64) t_changes.defines = /*defines*/
      ctx2[6];
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment30.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance30($$self, $$props, $$invalidate) {
  let $parent;
  let $size;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("MeshRefractionMaterial", slots, []);
  let { envMap } = $$props;
  let { bounces = 2 } = $$props;
  let { ior = 2.4 } = $$props;
  let { fresnel = 0 } = $$props;
  let { aberrationStrength = 0 } = $$props;
  let { color = "white" } = $$props;
  let { fastChroma = true } = $$props;
  let material = new ShaderMaterial({
    fragmentShader: fragmentShader6,
    vertexShader: vertexShader6,
    uniforms: {
      envMap: { value: null },
      bounces: { value: 2 },
      ior: { value: 2.4 },
      correctMips: { value: true },
      aberrationStrength: { value: 0.01 },
      fresnel: { value: 0 },
      bvh: { value: new MeshBVHUniformStruct() },
      color: { value: new Color("white") },
      resolution: { value: new Vector2() },
      viewMatrixInverse: { value: new Matrix4() },
      projectionMatrixInverse: { value: new Matrix4() }
    }
  });
  const { size, invalidate, camera } = useThrelte();
  validate_store(size, "size");
  component_subscribe($$self, size, (value) => $$invalidate(7, $size = value));
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(13, $parent = value));
  const isCubeTexture = (def) => def && def.isCubeTexture;
  let defines = {};
  const updateDefines = (envMap2, aberrationStrength2, fastChroma2) => {
    const temp = {};
    const isCubeMap = isCubeTexture(envMap2);
    const w = (isCubeMap ? envMap2.image[0]?.width : envMap2.image.width) ?? 1024;
    const cubeSize = w / 4;
    const lodMax = Math.floor(Math.log2(cubeSize));
    const _cubeSize = Math.pow(2, lodMax);
    const width = 3 * Math.max(_cubeSize, 16 * 7);
    const height = 4 * _cubeSize;
    if (isCubeMap) temp.ENVMAP_TYPE_CUBEM = "";
    temp.CUBEUV_TEXEL_WIDTH = `${1 / width}`;
    temp.CUBEUV_TEXEL_HEIGHT = `${1 / height}`;
    temp.CUBEUV_MAX_MIP = `${lodMax}.0`;
    if (aberrationStrength2 > 0) temp.CHROMATIC_ABERRATIONS = "";
    if (fastChroma2) temp.FAST_CHROMA = "";
    return temp;
  };
  onMount(() => {
    if ($parent && $parent instanceof Mesh && $parent.geometry) {
      $$invalidate(5, material.uniforms.bvh.value = new MeshBVHUniformStruct(), material);
      material.uniforms.bvh.value.updateFrom(new MeshBVH($parent?.geometry.clone().toNonIndexed(), { strategy: SAH }));
    }
  });
  useTask(
    () => {
      $$invalidate(5, material.uniforms.viewMatrixInverse.value = camera.current.matrixWorld, material);
      $$invalidate(5, material.uniforms.projectionMatrixInverse.value = camera.current.projectionMatrixInverse, material);
    },
    { autoInvalidate: false }
  );
  const colorObj = new Color(color);
  $$self.$$.on_mount.push(function() {
    if (envMap === void 0 && !("envMap" in $$props || $$self.$$.bound[$$self.$$.props["envMap"]])) {
      console.warn("<MeshRefractionMaterial> was created without expected prop 'envMap'");
    }
  });
  const writable_props = [
    "envMap",
    "bounces",
    "ior",
    "fresnel",
    "aberrationStrength",
    "color",
    "fastChroma"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MeshRefractionMaterial> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("envMap" in $$props2) $$invalidate(0, envMap = $$props2.envMap);
    if ("bounces" in $$props2) $$invalidate(1, bounces = $$props2.bounces);
    if ("ior" in $$props2) $$invalidate(2, ior = $$props2.ior);
    if ("fresnel" in $$props2) $$invalidate(3, fresnel = $$props2.fresnel);
    if ("aberrationStrength" in $$props2) $$invalidate(4, aberrationStrength = $$props2.aberrationStrength);
    if ("color" in $$props2) $$invalidate(11, color = $$props2.color);
    if ("fastChroma" in $$props2) $$invalidate(12, fastChroma = $$props2.fastChroma);
  };
  $$self.$capture_state = () => ({
    T,
    useParent,
    useTask,
    useThrelte,
    Color,
    Matrix4,
    Mesh,
    ShaderMaterial,
    Texture,
    Vector2,
    onMount,
    MeshBVH,
    MeshBVHUniformStruct,
    SAH,
    fragmentShader: fragmentShader6,
    vertexShader: vertexShader6,
    envMap,
    bounces,
    ior,
    fresnel,
    aberrationStrength,
    color,
    fastChroma,
    material,
    size,
    invalidate,
    camera,
    parent,
    isCubeTexture,
    defines,
    updateDefines,
    colorObj,
    $parent,
    $size
  });
  $$self.$inject_state = ($$props2) => {
    if ("envMap" in $$props2) $$invalidate(0, envMap = $$props2.envMap);
    if ("bounces" in $$props2) $$invalidate(1, bounces = $$props2.bounces);
    if ("ior" in $$props2) $$invalidate(2, ior = $$props2.ior);
    if ("fresnel" in $$props2) $$invalidate(3, fresnel = $$props2.fresnel);
    if ("aberrationStrength" in $$props2) $$invalidate(4, aberrationStrength = $$props2.aberrationStrength);
    if ("color" in $$props2) $$invalidate(11, color = $$props2.color);
    if ("fastChroma" in $$props2) $$invalidate(12, fastChroma = $$props2.fastChroma);
    if ("material" in $$props2) $$invalidate(5, material = $$props2.material);
    if ("defines" in $$props2) $$invalidate(6, defines = $$props2.defines);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*envMap, aberrationStrength, fastChroma*/
    4113) {
      $: $$invalidate(6, defines = updateDefines(envMap, aberrationStrength, fastChroma));
    }
    if ($$self.$$.dirty & /*color*/
    2048) {
      $: {
        colorObj.set(color);
        invalidate();
      }
    }
  };
  return [
    envMap,
    bounces,
    ior,
    fresnel,
    aberrationStrength,
    material,
    defines,
    $size,
    size,
    parent,
    colorObj,
    color,
    fastChroma
  ];
}
var MeshRefractionMaterial = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance30, create_fragment30, safe_not_equal, {
      envMap: 0,
      bounces: 1,
      ior: 2,
      fresnel: 3,
      aberrationStrength: 4,
      color: 11,
      fastChroma: 12
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "MeshRefractionMaterial",
      options,
      id: create_fragment30.name
    });
  }
  get envMap() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set envMap(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bounces() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bounces(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ior() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ior(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fresnel() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fresnel(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get aberrationStrength() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set aberrationStrength(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fastChroma() {
    throw new Error("<MeshRefractionMaterial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fastChroma(value) {
    throw new Error("<MeshRefractionMaterial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MeshRefractionMaterial_default = MeshRefractionMaterial;

// node_modules/@threlte/extras/dist/components/Text3DGeometry/Text3DGeometry.svelte
var get_default_slot_changes21 = (dirty) => ({ ref: dirty & /*ref*/
134217728 });
var get_default_slot_context21 = (ctx) => ({ ref: (
  /*ref*/
  ctx[27]
) });
function create_if_block8(ctx) {
  let t;
  let current;
  let t_props = {
    is: (
      /*$creasedGeometry*/
      ctx[1]
    ),
    $$slots: {
      default: [
        create_default_slot24,
        ({ ref }) => ({ 27: ref }),
        ({ ref }) => ref ? 134217728 : 0
      ]
    },
    $$scope: { ctx }
  };
  t = new T({ props: t_props, $$inline: true });
  ctx[24](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = {};
      if (dirty & /*$creasedGeometry*/
      2) t_changes.is = /*$creasedGeometry*/
      ctx2[1];
      if (dirty & /*$$scope, ref*/
      167772160) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[24](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block8.name,
    type: "if",
    source: "(67:0) {#if $creasedGeometry}",
    ctx
  });
  return block;
}
function create_default_slot24(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[23].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[25],
    get_default_slot_context21
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        167772160)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[25],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[25]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[25],
              dirty,
              get_default_slot_changes21
            ),
            get_default_slot_context21
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot24.name,
    type: "slot",
    source: "(68:2) <T     is={$creasedGeometry}     bind:this={$component}     let:ref   >",
    ctx
  });
  return block;
}
function create_fragment31(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$creasedGeometry*/
    ctx[1] && create_if_block8(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*$creasedGeometry*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$creasedGeometry*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment31.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance31($$self, $$props, $$invalidate) {
  let loadedFont;
  let options;
  let baseGeometry;
  let smoothStore;
  let creasedGeometry;
  let $creasedGeometry, $$unsubscribe_creasedGeometry = noop, $$subscribe_creasedGeometry = () => ($$unsubscribe_creasedGeometry(), $$unsubscribe_creasedGeometry = subscribe(creasedGeometry, ($$value) => $$invalidate(1, $creasedGeometry = $$value)), creasedGeometry);
  let $component;
  $$self.$$.on_destroy.push(() => $$unsubscribe_creasedGeometry());
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Text3DGeometry", slots, ["default"]);
  let { text } = $$props;
  let { font = "https://cdn.jsdelivr.net/npm/three/examples/fonts/helvetiker_regular.typeface.json" } = $$props;
  let { size = void 0 } = $$props;
  let { height = void 0 } = $$props;
  let { curveSegments = void 0 } = $$props;
  let { bevelEnabled = void 0 } = $$props;
  let { bevelThickness = void 0 } = $$props;
  let { bevelSize = void 0 } = $$props;
  let { bevelOffset = void 0 } = $$props;
  let { bevelSegments = void 0 } = $$props;
  let { smooth = void 0 } = $$props;
  let { depth = void 0 } = $$props;
  let { extrudePath = void 0 } = $$props;
  let { steps = void 0 } = $$props;
  let { UVGenerator = void 0 } = $$props;
  const suspend = useSuspense();
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(2, $component = value));
  $$self.$$.on_mount.push(function() {
    if (text === void 0 && !("text" in $$props || $$self.$$.bound[$$self.$$.props["text"]])) {
      console.warn("<Text3DGeometry> was created without expected prop 'text'");
    }
  });
  const writable_props = [
    "text",
    "font",
    "size",
    "height",
    "curveSegments",
    "bevelEnabled",
    "bevelThickness",
    "bevelSize",
    "bevelOffset",
    "bevelSegments",
    "smooth",
    "depth",
    "extrudePath",
    "steps",
    "UVGenerator"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Text3DGeometry> was created with unknown prop '${key}'`);
  });
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2) $$invalidate(4, text = $$props2.text);
    if ("font" in $$props2) $$invalidate(5, font = $$props2.font);
    if ("size" in $$props2) $$invalidate(6, size = $$props2.size);
    if ("height" in $$props2) $$invalidate(7, height = $$props2.height);
    if ("curveSegments" in $$props2) $$invalidate(8, curveSegments = $$props2.curveSegments);
    if ("bevelEnabled" in $$props2) $$invalidate(9, bevelEnabled = $$props2.bevelEnabled);
    if ("bevelThickness" in $$props2) $$invalidate(10, bevelThickness = $$props2.bevelThickness);
    if ("bevelSize" in $$props2) $$invalidate(11, bevelSize = $$props2.bevelSize);
    if ("bevelOffset" in $$props2) $$invalidate(12, bevelOffset = $$props2.bevelOffset);
    if ("bevelSegments" in $$props2) $$invalidate(13, bevelSegments = $$props2.bevelSegments);
    if ("smooth" in $$props2) $$invalidate(14, smooth = $$props2.smooth);
    if ("depth" in $$props2) $$invalidate(15, depth = $$props2.depth);
    if ("extrudePath" in $$props2) $$invalidate(16, extrudePath = $$props2.extrudePath);
    if ("steps" in $$props2) $$invalidate(17, steps = $$props2.steps);
    if ("UVGenerator" in $$props2) $$invalidate(18, UVGenerator = $$props2.UVGenerator);
    if ("$$scope" in $$props2) $$invalidate(25, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    asyncWritable,
    forwardEventHandlers,
    useLoader,
    derived,
    writable,
    TextGeometry,
    FontLoader,
    toCreasedNormals,
    useSuspense,
    text,
    font,
    size,
    height,
    curveSegments,
    bevelEnabled,
    bevelThickness,
    bevelSize,
    bevelOffset,
    bevelSegments,
    smooth,
    depth,
    extrudePath,
    steps,
    UVGenerator,
    suspend,
    component,
    smoothStore,
    baseGeometry,
    creasedGeometry,
    options,
    loadedFont,
    $creasedGeometry,
    $component
  });
  $$self.$inject_state = ($$props2) => {
    if ("text" in $$props2) $$invalidate(4, text = $$props2.text);
    if ("font" in $$props2) $$invalidate(5, font = $$props2.font);
    if ("size" in $$props2) $$invalidate(6, size = $$props2.size);
    if ("height" in $$props2) $$invalidate(7, height = $$props2.height);
    if ("curveSegments" in $$props2) $$invalidate(8, curveSegments = $$props2.curveSegments);
    if ("bevelEnabled" in $$props2) $$invalidate(9, bevelEnabled = $$props2.bevelEnabled);
    if ("bevelThickness" in $$props2) $$invalidate(10, bevelThickness = $$props2.bevelThickness);
    if ("bevelSize" in $$props2) $$invalidate(11, bevelSize = $$props2.bevelSize);
    if ("bevelOffset" in $$props2) $$invalidate(12, bevelOffset = $$props2.bevelOffset);
    if ("bevelSegments" in $$props2) $$invalidate(13, bevelSegments = $$props2.bevelSegments);
    if ("smooth" in $$props2) $$invalidate(14, smooth = $$props2.smooth);
    if ("depth" in $$props2) $$invalidate(15, depth = $$props2.depth);
    if ("extrudePath" in $$props2) $$invalidate(16, extrudePath = $$props2.extrudePath);
    if ("steps" in $$props2) $$invalidate(17, steps = $$props2.steps);
    if ("UVGenerator" in $$props2) $$invalidate(18, UVGenerator = $$props2.UVGenerator);
    if ("smoothStore" in $$props2) $$invalidate(19, smoothStore = $$props2.smoothStore);
    if ("baseGeometry" in $$props2) $$invalidate(20, baseGeometry = $$props2.baseGeometry);
    if ("creasedGeometry" in $$props2) $$subscribe_creasedGeometry($$invalidate(0, creasedGeometry = $$props2.creasedGeometry));
    if ("options" in $$props2) $$invalidate(21, options = $$props2.options);
    if ("loadedFont" in $$props2) $$invalidate(22, loadedFont = $$props2.loadedFont);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*font*/
    32) {
      $: $$invalidate(22, loadedFont = suspend(typeof font === "string" ? useLoader(FontLoader).load(font) : asyncWritable(new Promise((resolve) => resolve(font)))));
    }
    if ($$self.$$.dirty & /*text, size, height, curveSegments, bevelEnabled, bevelThickness, bevelSize, bevelOffset, bevelSegments*/
    16336) {
      $: $$invalidate(21, options = writable({
        text,
        size,
        height,
        curveSegments,
        bevelEnabled,
        bevelThickness,
        bevelSize,
        bevelOffset,
        bevelSegments
      }));
    }
    if ($$self.$$.dirty & /*loadedFont, options, depth, extrudePath, steps, UVGenerator*/
    6782976) {
      $: $$invalidate(20, baseGeometry = derived([loadedFont, options], ([font2, options2]) => {
        if (!font2) return;
        return new TextGeometry(
          options2.text,
          {
            font: font2,
            size: options2.size,
            height: options2.height,
            curveSegments: options2.curveSegments,
            bevelEnabled: options2.bevelEnabled,
            bevelThickness: options2.bevelThickness,
            bevelSize: options2.bevelSize,
            bevelOffset: options2.bevelOffset,
            bevelSegments: options2.bevelSegments,
            depth,
            extrudePath,
            steps,
            UVGenerator
          }
        );
      }));
    }
    if ($$self.$$.dirty & /*smooth*/
    16384) {
      $: $$invalidate(19, smoothStore = writable(smooth));
    }
    if ($$self.$$.dirty & /*baseGeometry, smoothStore*/
    1572864) {
      $: $$subscribe_creasedGeometry($$invalidate(0, creasedGeometry = derived([baseGeometry, smoothStore], ([baseGeometry2, smooth2]) => {
        if (!baseGeometry2) return;
        if (smooth2 === 0) return baseGeometry2;
        return toCreasedNormals(baseGeometry2, smooth2);
      })));
    }
  };
  return [
    creasedGeometry,
    $creasedGeometry,
    $component,
    component,
    text,
    font,
    size,
    height,
    curveSegments,
    bevelEnabled,
    bevelThickness,
    bevelSize,
    bevelOffset,
    bevelSegments,
    smooth,
    depth,
    extrudePath,
    steps,
    UVGenerator,
    smoothStore,
    baseGeometry,
    options,
    loadedFont,
    slots,
    t_binding,
    $$scope
  ];
}
var Text3DGeometry = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance31, create_fragment31, safe_not_equal, {
      text: 4,
      font: 5,
      size: 6,
      height: 7,
      curveSegments: 8,
      bevelEnabled: 9,
      bevelThickness: 10,
      bevelSize: 11,
      bevelOffset: 12,
      bevelSegments: 13,
      smooth: 14,
      depth: 15,
      extrudePath: 16,
      steps: 17,
      UVGenerator: 18
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Text3DGeometry",
      options,
      id: create_fragment31.name
    });
  }
  get text() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get font() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set font(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get size() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get height() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set height(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get curveSegments() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set curveSegments(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bevelEnabled() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bevelEnabled(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bevelThickness() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bevelThickness(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bevelSize() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bevelSize(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bevelOffset() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bevelOffset(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bevelSegments() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bevelSegments(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get smooth() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set smooth(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get depth() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set depth(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get extrudePath() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set extrudePath(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get steps() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set steps(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get UVGenerator() {
    throw new Error("<Text3DGeometry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set UVGenerator(value) {
    throw new Error("<Text3DGeometry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Text3DGeometry_default = Text3DGeometry;

// node_modules/@threlte/extras/dist/components/PerfMonitor/PerfMonitor.svelte
function create_fragment32(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment32.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance32($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("PerfMonitor", slots, []);
  let { domElement = document.body } = $$props;
  let { logsPerSecond = 10 } = $$props;
  let { showGraph = true } = $$props;
  let { memory = true } = $$props;
  let { enabled = true } = $$props;
  let { visible = true } = $$props;
  let { actionToCallUI = "" } = $$props;
  let { guiVisible = false } = $$props;
  let { backgroundOpacity = 0.7 } = $$props;
  let { scale = 1 } = $$props;
  let { anchorX = "left" } = $$props;
  let { anchorY = "top" } = $$props;
  const { renderer, renderStage, mainStage } = useThrelte();
  let perf;
  const domElementStore = writable(domElement);
  watch([domElementStore], ([domElement2]) => {
    if (perf) perf.dispose();
    perf = new ThreePerf({
      domElement: domElement2 || document.body,
      renderer
    });
  });
  useTask(
    () => {
      perf.begin();
    },
    {
      stage: useStage("monitor-begin", { before: mainStage })
    }
  );
  useTask(
    () => {
      perf.end();
    },
    {
      stage: useStage("monitor-end", { after: renderStage })
    }
  );
  onDestroy(() => {
    if (perf) perf.dispose();
  });
  const writable_props = [
    "domElement",
    "logsPerSecond",
    "showGraph",
    "memory",
    "enabled",
    "visible",
    "actionToCallUI",
    "guiVisible",
    "backgroundOpacity",
    "scale",
    "anchorX",
    "anchorY"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<PerfMonitor> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("domElement" in $$props2) $$invalidate(0, domElement = $$props2.domElement);
    if ("logsPerSecond" in $$props2) $$invalidate(1, logsPerSecond = $$props2.logsPerSecond);
    if ("showGraph" in $$props2) $$invalidate(2, showGraph = $$props2.showGraph);
    if ("memory" in $$props2) $$invalidate(3, memory = $$props2.memory);
    if ("enabled" in $$props2) $$invalidate(4, enabled = $$props2.enabled);
    if ("visible" in $$props2) $$invalidate(5, visible = $$props2.visible);
    if ("actionToCallUI" in $$props2) $$invalidate(6, actionToCallUI = $$props2.actionToCallUI);
    if ("guiVisible" in $$props2) $$invalidate(7, guiVisible = $$props2.guiVisible);
    if ("backgroundOpacity" in $$props2) $$invalidate(8, backgroundOpacity = $$props2.backgroundOpacity);
    if ("scale" in $$props2) $$invalidate(9, scale = $$props2.scale);
    if ("anchorX" in $$props2) $$invalidate(10, anchorX = $$props2.anchorX);
    if ("anchorY" in $$props2) $$invalidate(11, anchorY = $$props2.anchorY);
  };
  $$self.$capture_state = () => ({
    useStage,
    useTask,
    useThrelte,
    watch,
    ThreePerf,
    onDestroy,
    writable,
    domElement,
    logsPerSecond,
    showGraph,
    memory,
    enabled,
    visible,
    actionToCallUI,
    guiVisible,
    backgroundOpacity,
    scale,
    anchorX,
    anchorY,
    renderer,
    renderStage,
    mainStage,
    perf,
    domElementStore
  });
  $$self.$inject_state = ($$props2) => {
    if ("domElement" in $$props2) $$invalidate(0, domElement = $$props2.domElement);
    if ("logsPerSecond" in $$props2) $$invalidate(1, logsPerSecond = $$props2.logsPerSecond);
    if ("showGraph" in $$props2) $$invalidate(2, showGraph = $$props2.showGraph);
    if ("memory" in $$props2) $$invalidate(3, memory = $$props2.memory);
    if ("enabled" in $$props2) $$invalidate(4, enabled = $$props2.enabled);
    if ("visible" in $$props2) $$invalidate(5, visible = $$props2.visible);
    if ("actionToCallUI" in $$props2) $$invalidate(6, actionToCallUI = $$props2.actionToCallUI);
    if ("guiVisible" in $$props2) $$invalidate(7, guiVisible = $$props2.guiVisible);
    if ("backgroundOpacity" in $$props2) $$invalidate(8, backgroundOpacity = $$props2.backgroundOpacity);
    if ("scale" in $$props2) $$invalidate(9, scale = $$props2.scale);
    if ("anchorX" in $$props2) $$invalidate(10, anchorX = $$props2.anchorX);
    if ("anchorY" in $$props2) $$invalidate(11, anchorY = $$props2.anchorY);
    if ("perf" in $$props2) perf = $$props2.perf;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*domElement*/
    1) {
      $: domElementStore.set(domElement);
    }
    if ($$self.$$.dirty & /*logsPerSecond*/
    2) {
      $: perf.logsPerSecond = logsPerSecond;
    }
    if ($$self.$$.dirty & /*showGraph*/
    4) {
      $: perf.showGraph = showGraph;
    }
    if ($$self.$$.dirty & /*memory*/
    8) {
      $: perf.memory = memory;
    }
    if ($$self.$$.dirty & /*enabled*/
    16) {
      $: perf.enabled = enabled;
    }
    if ($$self.$$.dirty & /*visible*/
    32) {
      $: perf.visible = visible;
    }
    if ($$self.$$.dirty & /*actionToCallUI*/
    64) {
      $: perf.actionToCallUI = actionToCallUI;
    }
    if ($$self.$$.dirty & /*guiVisible*/
    128) {
      $: perf.guiVisible = guiVisible;
    }
    if ($$self.$$.dirty & /*backgroundOpacity*/
    256) {
      $: perf.backgroundOpacity = backgroundOpacity;
    }
    if ($$self.$$.dirty & /*scale*/
    512) {
      $: perf.scale = scale;
    }
    if ($$self.$$.dirty & /*anchorX*/
    1024) {
      $: perf.anchorX = anchorX;
    }
    if ($$self.$$.dirty & /*anchorY*/
    2048) {
      $: perf.anchorY = anchorY;
    }
  };
  return [
    domElement,
    logsPerSecond,
    showGraph,
    memory,
    enabled,
    visible,
    actionToCallUI,
    guiVisible,
    backgroundOpacity,
    scale,
    anchorX,
    anchorY
  ];
}
var PerfMonitor = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance32, create_fragment32, safe_not_equal, {
      domElement: 0,
      logsPerSecond: 1,
      showGraph: 2,
      memory: 3,
      enabled: 4,
      visible: 5,
      actionToCallUI: 6,
      guiVisible: 7,
      backgroundOpacity: 8,
      scale: 9,
      anchorX: 10,
      anchorY: 11
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PerfMonitor",
      options,
      id: create_fragment32.name
    });
  }
  get domElement() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set domElement(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get logsPerSecond() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set logsPerSecond(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showGraph() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showGraph(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get memory() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set memory(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get enabled() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set enabled(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get visible() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set visible(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get actionToCallUI() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set actionToCallUI(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get guiVisible() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set guiVisible(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get backgroundOpacity() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set backgroundOpacity(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scale() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scale(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchorX() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchorX(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchorY() {
    throw new Error("<PerfMonitor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchorY(value) {
    throw new Error("<PerfMonitor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var PerfMonitor_default = PerfMonitor;

// node_modules/@threlte/extras/dist/components/Outlines/shaders.js
var vertexShader7 = `
#include <common>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>

uniform float thickness;
uniform bool screenspace;
uniform vec2 size;

void main() {
  #if defined (USE_SKINNING)
    #include <beginnormal_vertex>
    #include <morphnormal_vertex>
    #include <skinbase_vertex>
    #include <skinnormal_vertex>
    #include <defaultnormal_vertex>
  #endif
  #include <begin_vertex>
  #include <morphtarget_vertex>
  #include <skinning_vertex>
  #include <project_vertex>
  vec4 tNormal = vec4(normal, 0.0);
  vec4 tPosition = vec4(transformed, 1.0);
  #ifdef USE_INSTANCING
    tNormal = instanceMatrix * tNormal;
    tPosition = instanceMatrix * tPosition;
  #endif
  if (!screenspace) {
    vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
  } else {
    vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;
    vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;
    vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;
    clipPosition.xy += offset;
    gl_Position = clipPosition;
  }
}`;
var fragmentShader7 = `
uniform vec3 color;
uniform float opacity;
void main(){
  gl_FragColor = vec4(color, opacity);
  #include <tonemapping_fragment>
  #include <${revision2 >= 154 ? "colorspace_fragment" : "encodings_fragment"}>
}
`;

// node_modules/@threlte/extras/dist/components/Outlines/Outlines.svelte
var get_default_slot_changes22 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context22 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot25(ctx) {
  let t0;
  let t1;
  let current;
  t0 = new T({
    props: { is: (
      /*mesh*/
      ctx[1]
    ) },
    $$inline: true
  });
  const default_slot_template = (
    /*#slots*/
    ctx[20].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[22],
    get_default_slot_context22
  );
  const block = {
    c: function create() {
      create_component(t0.$$.fragment);
      t1 = space();
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      claim_component(t0.$$.fragment, nodes);
      t1 = claim_space(nodes);
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t0, target, anchor);
      insert_hydration_dev(target, t1, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t0_changes = {};
      if (dirty & /*mesh*/
      2) t0_changes.is = /*mesh*/
      ctx2[1];
      t0.$set(t0_changes);
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        4194305)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[22],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[22]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[22],
              dirty,
              get_default_slot_changes22
            ),
            get_default_slot_context22
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t0.$$.fragment, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t0.$$.fragment, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t1);
      }
      destroy_component(t0, detaching);
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot25.name,
    type: "slot",
    source: "(84:0) <T   is={ref}   {...$$restProps}   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment33(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[5]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot25] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[21](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      33 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        32 && get_spread_object(
          /*$$restProps*/
          ctx2[5]
        )
      ]) : {};
      if (dirty & /*$$scope, ref, mesh*/
      4194307) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[21](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment33.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance33($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "color",
    "screenspace",
    "opacity",
    "transparent",
    "thickness",
    "toneMapped",
    "angle",
    "polygonOffset",
    "polygonOffsetFactor",
    "renderOrder",
    "ref"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $parent;
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Outlines", slots, ["default"]);
  let { color = "black" } = $$props;
  let { screenspace = false } = $$props;
  let { opacity = 1 } = $$props;
  let { transparent = false } = $$props;
  let { thickness = 0.05 } = $$props;
  let { toneMapped = true } = $$props;
  let { angle = Math.PI } = $$props;
  let { polygonOffset = false } = $$props;
  let { polygonOffsetFactor = 0 } = $$props;
  let { renderOrder = 0 } = $$props;
  const { renderer } = useThrelte();
  const uniforms = {
    screenspace: { value: screenspace },
    color: { value: new Color(color) },
    opacity: { value: opacity },
    thickness: { value: thickness },
    size: { value: new Vector2() }
  };
  let { ref = new Group() } = $$props;
  const material = new ShaderMaterial({
    side: BackSide,
    uniforms,
    vertexShader: vertexShader7,
    fragmentShader: fragmentShader7
  });
  let oldAngle = 0;
  let oldGeometry;
  let mesh;
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(19, $parent = value));
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(2, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("color" in $$new_props) $$invalidate(6, color = $$new_props.color);
    if ("screenspace" in $$new_props) $$invalidate(7, screenspace = $$new_props.screenspace);
    if ("opacity" in $$new_props) $$invalidate(8, opacity = $$new_props.opacity);
    if ("transparent" in $$new_props) $$invalidate(9, transparent = $$new_props.transparent);
    if ("thickness" in $$new_props) $$invalidate(10, thickness = $$new_props.thickness);
    if ("toneMapped" in $$new_props) $$invalidate(11, toneMapped = $$new_props.toneMapped);
    if ("angle" in $$new_props) $$invalidate(12, angle = $$new_props.angle);
    if ("polygonOffset" in $$new_props) $$invalidate(13, polygonOffset = $$new_props.polygonOffset);
    if ("polygonOffsetFactor" in $$new_props) $$invalidate(14, polygonOffsetFactor = $$new_props.polygonOffsetFactor);
    if ("renderOrder" in $$new_props) $$invalidate(15, renderOrder = $$new_props.renderOrder);
    if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
    if ("$$scope" in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    useParent,
    useThrelte,
    forwardEventHandlers,
    Color,
    Vector2,
    ShaderMaterial,
    Group,
    SkinnedMesh,
    InstancedMesh,
    Mesh,
    BackSide,
    toCreasedNormals,
    vertexShader: vertexShader7,
    fragmentShader: fragmentShader7,
    color,
    screenspace,
    opacity,
    transparent,
    thickness,
    toneMapped,
    angle,
    polygonOffset,
    polygonOffsetFactor,
    renderOrder,
    renderer,
    uniforms,
    ref,
    material,
    oldAngle,
    oldGeometry,
    mesh,
    parent,
    component,
    $parent,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("color" in $$props) $$invalidate(6, color = $$new_props.color);
    if ("screenspace" in $$props) $$invalidate(7, screenspace = $$new_props.screenspace);
    if ("opacity" in $$props) $$invalidate(8, opacity = $$new_props.opacity);
    if ("transparent" in $$props) $$invalidate(9, transparent = $$new_props.transparent);
    if ("thickness" in $$props) $$invalidate(10, thickness = $$new_props.thickness);
    if ("toneMapped" in $$props) $$invalidate(11, toneMapped = $$new_props.toneMapped);
    if ("angle" in $$props) $$invalidate(12, angle = $$new_props.angle);
    if ("polygonOffset" in $$props) $$invalidate(13, polygonOffset = $$new_props.polygonOffset);
    if ("polygonOffsetFactor" in $$props) $$invalidate(14, polygonOffsetFactor = $$new_props.polygonOffsetFactor);
    if ("renderOrder" in $$props) $$invalidate(15, renderOrder = $$new_props.renderOrder);
    if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
    if ("oldAngle" in $$props) $$invalidate(17, oldAngle = $$new_props.oldAngle);
    if ("oldGeometry" in $$props) $$invalidate(18, oldGeometry = $$new_props.oldGeometry);
    if ("mesh" in $$props) $$invalidate(1, mesh = $$new_props.mesh);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*transparent*/
    512) {
      $: $$invalidate(16, material.transparent = transparent, material);
    }
    if ($$self.$$.dirty & /*toneMapped*/
    2048) {
      $: $$invalidate(16, material.toneMapped = toneMapped, material);
    }
    if ($$self.$$.dirty & /*polygonOffset*/
    8192) {
      $: $$invalidate(16, material.polygonOffset = polygonOffset, material);
    }
    if ($$self.$$.dirty & /*polygonOffsetFactor*/
    16384) {
      $: $$invalidate(16, material.polygonOffsetFactor = polygonOffsetFactor, material);
    }
    if ($$self.$$.dirty & /*screenspace*/
    128) {
      $: $$invalidate(16, material.uniforms.screenspace.value = screenspace, material);
    }
    if ($$self.$$.dirty & /*opacity*/
    256) {
      $: $$invalidate(16, material.uniforms.opacity.value = opacity, material);
    }
    if ($$self.$$.dirty & /*thickness*/
    1024) {
      $: $$invalidate(16, material.uniforms.thickness.value = thickness, material);
    }
    if ($$self.$$.dirty & /*$parent, oldAngle, angle, oldGeometry, mesh, ref, material, renderOrder*/
    1019907) {
      $: {
        const parentMesh = $parent;
        if (parentMesh?.geometry !== void 0) {
          if (oldAngle !== angle || oldGeometry !== parentMesh.geometry) {
            $$invalidate(17, oldAngle = angle);
            $$invalidate(18, oldGeometry = parentMesh.geometry);
            if (mesh) {
              if (angle) mesh.geometry.dispose();
              ref.remove(mesh);
            }
            const geometry = angle ? toCreasedNormals(parentMesh.geometry, angle) : parentMesh.geometry;
            if ("skeleton" in parentMesh) {
              const nextMesh = new SkinnedMesh(geometry, material);
              nextMesh.bind(parentMesh.skeleton, parentMesh.bindMatrix);
              $$invalidate(1, mesh = nextMesh);
            } else if ("isInstancedMesh" in parentMesh) {
              const nextMesh = new InstancedMesh(geometry, material, parentMesh.count);
              nextMesh.instanceMatrix = parentMesh.instanceMatrix;
              $$invalidate(1, mesh = nextMesh);
            } else {
              $$invalidate(1, mesh = new Mesh(geometry, material));
            }
            $$invalidate(1, mesh.renderOrder = renderOrder, mesh);
          }
        }
      }
    }
    if ($$self.$$.dirty & /*mesh, renderOrder*/
    32770) {
      $: if (mesh) {
        $$invalidate(1, mesh.renderOrder = renderOrder, mesh);
      }
    }
    if ($$self.$$.dirty & /*material, color*/
    65600) {
      $: material.uniforms.color.value.set(color);
    }
    if ($$self.$$.dirty & /*material*/
    65536) {
      $: renderer.getDrawingBufferSize(material.uniforms.size.value);
    }
  };
  return [
    ref,
    mesh,
    $component,
    parent,
    component,
    $$restProps,
    color,
    screenspace,
    opacity,
    transparent,
    thickness,
    toneMapped,
    angle,
    polygonOffset,
    polygonOffsetFactor,
    renderOrder,
    material,
    oldAngle,
    oldGeometry,
    $parent,
    slots,
    t_binding,
    $$scope
  ];
}
var Outlines = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance33, create_fragment33, safe_not_equal, {
      color: 6,
      screenspace: 7,
      opacity: 8,
      transparent: 9,
      thickness: 10,
      toneMapped: 11,
      angle: 12,
      polygonOffset: 13,
      polygonOffsetFactor: 14,
      renderOrder: 15,
      ref: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Outlines",
      options,
      id: create_fragment33.name
    });
  }
  get color() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get screenspace() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set screenspace(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get opacity() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set opacity(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get transparent() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transparent(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get thickness() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set thickness(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toneMapped() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set toneMapped(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get angle() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set angle(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get polygonOffset() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set polygonOffset(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get polygonOffsetFactor() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set polygonOffsetFactor(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get renderOrder() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set renderOrder(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<Outlines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<Outlines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Outlines_default = Outlines;

// node_modules/@threlte/extras/dist/components/Mask/Mask.svelte
var get_default_slot_changes23 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context23 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot26(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_default_slot_context23
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        129)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_default_slot_changes23
            ),
            get_default_slot_context23
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot26.name,
    type: "slot",
    source: "(33:0) <T.Mesh   {...$$restProps}   renderOrder={-id}   bind:ref >",
    ctx
  });
  return block;
}
function create_fragment34(ctx) {
  let t_mesh;
  let updating_ref;
  let current;
  const t_mesh_spread_levels = [
    /*$$restProps*/
    ctx[2],
    { renderOrder: -/*id*/
    ctx[1] }
  ];
  function t_mesh_ref_binding(value) {
    ctx[6](value);
  }
  let t_mesh_props = {
    $$slots: { default: [create_default_slot26] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_mesh_spread_levels.length; i += 1) {
    t_mesh_props = assign(t_mesh_props, t_mesh_spread_levels[i]);
  }
  if (
    /*ref*/
    ctx[0] !== void 0
  ) {
    t_mesh_props.ref = /*ref*/
    ctx[0];
  }
  t_mesh = new T.Mesh({ props: t_mesh_props, $$inline: true });
  binding_callbacks.push(() => bind(t_mesh, "ref", t_mesh_ref_binding));
  const block = {
    c: function create() {
      create_component(t_mesh.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t_mesh.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t_mesh, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_mesh_changes = dirty & /*$$restProps, id*/
      6 ? get_spread_update(t_mesh_spread_levels, [
        dirty & /*$$restProps*/
        4 && get_spread_object(
          /*$$restProps*/
          ctx2[2]
        ),
        dirty & /*id*/
        2 && { renderOrder: -/*id*/
        ctx2[1] }
      ]) : {};
      if (dirty & /*$$scope, ref*/
      129) {
        t_mesh_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty & /*ref*/
      1) {
        updating_ref = true;
        t_mesh_changes.ref = /*ref*/
        ctx2[0];
        add_flush_callback(() => updating_ref = false);
      }
      t_mesh.$set(t_mesh_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t_mesh.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t_mesh.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t_mesh, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment34.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance34($$self, $$props, $$invalidate) {
  const omit_props_names = ["id", "colorWrite", "depthWrite", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Mask", slots, ["default"]);
  let { id = 1 } = $$props;
  let { colorWrite = false } = $$props;
  let { depthWrite = false } = $$props;
  let { ref = new Mesh() } = $$props;
  const meshLoaded = (mesh) => {
    if (!mesh) return;
    const material = mesh.material;
    if (Array.isArray(material)) return;
    material.colorWrite = colorWrite;
    material.depthWrite = depthWrite;
    material.stencilWrite = true;
    material.stencilRef = id;
    material.stencilFunc = AlwaysStencilFunc;
    material.stencilFail = ReplaceStencilOp;
    material.stencilZFail = ReplaceStencilOp;
    material.stencilZPass = ReplaceStencilOp;
  };
  function t_mesh_ref_binding(value) {
    ref = value;
    $$invalidate(0, ref);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
    if ("colorWrite" in $$new_props) $$invalidate(3, colorWrite = $$new_props.colorWrite);
    if ("depthWrite" in $$new_props) $$invalidate(4, depthWrite = $$new_props.depthWrite);
    if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
    if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    T,
    ReplaceStencilOp,
    AlwaysStencilFunc,
    Mesh,
    id,
    colorWrite,
    depthWrite,
    ref,
    meshLoaded
  });
  $$self.$inject_state = ($$new_props) => {
    if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
    if ("colorWrite" in $$props) $$invalidate(3, colorWrite = $$new_props.colorWrite);
    if ("depthWrite" in $$props) $$invalidate(4, depthWrite = $$new_props.depthWrite);
    if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*ref*/
    1) {
      $: meshLoaded(ref);
    }
    if ($$self.$$.dirty & /*ref, id*/
    3) {
      $: {
        meshLoaded(ref);
        id;
      }
    }
  };
  return [
    ref,
    id,
    $$restProps,
    colorWrite,
    depthWrite,
    slots,
    t_mesh_ref_binding,
    $$scope
  ];
}
var Mask = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance34, create_fragment34, safe_not_equal, {
      id: 1,
      colorWrite: 3,
      depthWrite: 4,
      ref: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Mask",
      options,
      id: create_fragment34.name
    });
  }
  get id() {
    throw new Error("<Mask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Mask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get colorWrite() {
    throw new Error("<Mask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set colorWrite(value) {
    throw new Error("<Mask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get depthWrite() {
    throw new Error("<Mask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set depthWrite(value) {
    throw new Error("<Mask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<Mask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<Mask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Mask_default = Mask;

// node_modules/@threlte/extras/dist/suspense/Suspense.svelte
var get_fallback_slot_changes = (dirty) => ({});
var get_fallback_slot_context = (ctx) => ({});
var get_error_slot_changes = (dirty) => ({ errors: dirty & /*$errors*/
1 });
var get_error_slot_context = (ctx) => ({ errors: (
  /*$errors*/
  ctx[0]
) });
var get_default_slot_changes24 = (dirty) => ({
  suspended: dirty & /*$suspended*/
  2,
  errors: dirty & /*$errors*/
  1
});
var get_default_slot_context24 = (ctx) => ({
  suspended: (
    /*$suspended*/
    ctx[1]
  ),
  errors: (
    /*$errors*/
    ctx[0]
  )
});
function create_default_slot_19(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_default_slot_context24
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, $suspended, $errors*/
        131)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_default_slot_changes24
            ),
            get_default_slot_context24
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_19.name,
    type: "slot",
    source: "(34:2) <T is={group}>",
    ctx
  });
  return block;
}
function create_default_slot27(ctx) {
  let t;
  let current;
  t = new T({
    props: {
      is: (
        /*group*/
        ctx[4]
      ),
      $$slots: { default: [create_default_slot_19] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const t_changes = {};
      if (dirty & /*$$scope, $suspended, $errors*/
      131) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot27.name,
    type: "slot",
    source: "(33:0) <HierarchicalObject>",
    ctx
  });
  return block;
}
function create_if_block_13(ctx) {
  let current;
  const fallback_slot_template = (
    /*#slots*/
    ctx[6].fallback
  );
  const fallback_slot = create_slot(
    fallback_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_fallback_slot_context
  );
  const block = {
    c: function create() {
      if (fallback_slot) fallback_slot.c();
    },
    l: function claim(nodes) {
      if (fallback_slot) fallback_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (fallback_slot) {
        fallback_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (fallback_slot) {
        if (fallback_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            fallback_slot,
            fallback_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              fallback_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_fallback_slot_changes
            ),
            get_fallback_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(fallback_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(fallback_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (fallback_slot) fallback_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_13.name,
    type: "if",
    source: "(47:21) ",
    ctx
  });
  return block;
}
function create_if_block9(ctx) {
  let current;
  const error_slot_template = (
    /*#slots*/
    ctx[6].error
  );
  const error_slot = create_slot(
    error_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_error_slot_context
  );
  const block = {
    c: function create() {
      if (error_slot) error_slot.c();
    },
    l: function claim(nodes) {
      if (error_slot) error_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (error_slot) {
        error_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (error_slot) {
        if (error_slot.p && (!current || dirty & /*$$scope, $errors*/
        129)) {
          update_slot_base(
            error_slot,
            error_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              error_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_error_slot_changes
            ),
            get_error_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(error_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(error_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (error_slot) error_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block9.name,
    type: "if",
    source: "(42:0) {#if $errors.length}",
    ctx
  });
  return block;
}
function create_fragment35(ctx) {
  let hierarchicalobject;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  hierarchicalobject = new HierarchicalObject_default({
    props: {
      $$slots: { default: [create_default_slot27] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const if_block_creators = [create_if_block9, create_if_block_13];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$errors*/
      ctx2[0].length
    ) return 0;
    if (
      /*$suspended*/
      ctx2[1]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, -1))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  const block = {
    c: function create() {
      create_component(hierarchicalobject.$$.fragment);
      t = space();
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      claim_component(hierarchicalobject.$$.fragment, nodes);
      t = claim_space(nodes);
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      mount_component(hierarchicalobject, target, anchor);
      insert_hydration_dev(target, t, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const hierarchicalobject_changes = {};
      if (dirty & /*$$scope, $suspended, $errors*/
      131) {
        hierarchicalobject_changes.$$scope = { dirty, ctx: ctx2 };
      }
      hierarchicalobject.$set(hierarchicalobject_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(hierarchicalobject.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(hierarchicalobject.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
        detach_dev(if_block_anchor);
      }
      destroy_component(hierarchicalobject, detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment35.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance35($$self, $$props, $$invalidate) {
  let $errors;
  let $suspended;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Suspense", slots, ["default", "error", "fallback"]);
  let { final = false } = $$props;
  const dispatch = createRawEventDispatcher();
  const { suspended, errors, setFinal } = createSuspenseContext({ final });
  validate_store(suspended, "suspended");
  component_subscribe($$self, suspended, (value) => $$invalidate(1, $suspended = value));
  validate_store(errors, "errors");
  component_subscribe($$self, errors, (value) => $$invalidate(0, $errors = value));
  const group = new Group();
  const parent = useParent();
  watch([parent, suspended, errors], ([parent2, suspended2, errors2]) => {
    if (!parent2) return;
    if (suspended2 || errors2.length) {
      parent2.remove(group);
      return;
    }
    parent2.add(group);
    return () => {
      parent2.remove(group);
    };
  });
  const writable_props = ["final"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Suspense> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("final" in $$props2) $$invalidate(5, final = $$props2.final);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    HierarchicalObject: HierarchicalObject_default,
    T,
    createRawEventDispatcher,
    useParent,
    watch,
    Group,
    createSuspenseContext,
    final,
    dispatch,
    suspended,
    errors,
    setFinal,
    group,
    parent,
    $errors,
    $suspended
  });
  $$self.$inject_state = ($$props2) => {
    if ("final" in $$props2) $$invalidate(5, final = $$props2.final);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*final*/
    32) {
      $: setFinal(final);
    }
    if ($$self.$$.dirty & /*$suspended*/
    2) {
      $: if (!$suspended) dispatch("load");
    }
    if ($$self.$$.dirty & /*$suspended*/
    2) {
      $: if ($suspended) dispatch("suspend");
    }
    if ($$self.$$.dirty & /*$errors*/
    1) {
      $: if ($errors.length) dispatch("error", $errors);
    }
  };
  return [$errors, $suspended, suspended, errors, group, final, slots, $$scope];
}
var Suspense = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance35, create_fragment35, safe_not_equal, { final: 5 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Suspense",
      options,
      id: create_fragment35.name
    });
  }
  get final() {
    throw new Error("<Suspense>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set final(value) {
    throw new Error("<Suspense>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Suspense_default = Suspense;

// node_modules/@threlte/extras/dist/suspense/onReveal.js
var onReveal = (callback) => {
  const ctx = getContext(suspenseContextIdentifier);
  let cleanup;
  const mounted = writable(false);
  onMount(() => {
    if (!ctx)
      cleanup = callback();
    mounted.set(true);
  });
  if (!ctx) {
    onDestroy(() => cleanup?.());
    return;
  }
  watch([ctx.suspended, mounted], ([suspended, mounted2]) => {
    if (mounted2 && !suspended)
      cleanup = callback();
    return () => cleanup?.();
  });
};

// node_modules/@threlte/extras/dist/suspense/onSuspend.js
var onSuspend = (callback) => {
  const ctx = getContext(suspenseContextIdentifier);
  if (!ctx)
    return;
  const mounted = writable(false);
  onMount(() => {
    mounted.set(true);
  });
  watch([ctx.suspended, mounted], ([suspended, mounted2]) => {
    if (mounted2 && suspended)
      callback();
  });
};

// node_modules/@threlte/extras/dist/components/portals/usePortalContext.js
var createPortalContext = () => {
  const ctx = {
    portals: currentWritable(/* @__PURE__ */ new Map()),
    addPortal(object, id) {
      ctx.portals.update((portals) => {
        if (portals.has(id)) {
          console.warn(`Portal with id ${id} already exists. Skipping portal creation.`);
        } else {
          portals.set(id, object);
        }
        return portals;
      });
    },
    removePortal(id) {
      ctx.portals.update((portals) => {
        if (!portals.has(id)) {
          console.warn(`Portal with id ${id} does not exist. Skipping portal removal.`);
        } else {
          portals.delete(id);
        }
        return portals;
      });
    },
    getPortal(id) {
      return derived(ctx.portals, (portals) => portals.get(id));
    },
    hasPortal(id) {
      return ctx.portals.current.has(id);
    }
  };
  return ctx;
};
var usePortalContext = () => {
  return useThrelteUserContext("threlte-portals", createPortalContext());
};

// node_modules/@threlte/extras/dist/components/portals/Portal/Portal.svelte
function create_if_block10(ctx) {
  let hierarchicalobject;
  let current;
  hierarchicalobject = new HierarchicalObject_default({
    props: {
      onChildMount: (
        /*func*/
        ctx[8]
      ),
      onChildDestroy: (
        /*func_1*/
        ctx[9]
      ),
      $$slots: { default: [create_default_slot28] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(hierarchicalobject.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(hierarchicalobject.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(hierarchicalobject, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const hierarchicalobject_changes = {};
      if (dirty & /*$$scope*/
      1024) {
        hierarchicalobject_changes.$$scope = { dirty, ctx: ctx2 };
      }
      hierarchicalobject.$set(hierarchicalobject_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(hierarchicalobject.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(hierarchicalobject.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(hierarchicalobject, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block10.name,
    type: "if",
    source: "(29:0) {#if $target}",
    ctx
  });
  return block;
}
function create_default_slot28(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    null
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1024)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[10]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot28.name,
    type: "slot",
    source: "(30:2) <HierarchicalObject     onChildMount={(child) =>       children.update((array) => {         array.push(child)         return array       })}     onChildDestroy={(child) =>       children.update((array) => {         array.splice(array.indexOf(child), 1)         return array       })}   >",
    ctx
  });
  return block;
}
function create_fragment36(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$target*/
    ctx[1] && create_if_block10(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*$target*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$target*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment36.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance36($$self, $$props, $$invalidate) {
  let portal;
  let $portal, $$unsubscribe_portal = noop, $$subscribe_portal = () => ($$unsubscribe_portal(), $$unsubscribe_portal = subscribe(portal, ($$value) => $$invalidate(6, $portal = $$value)), portal);
  let $target;
  $$self.$$.on_destroy.push(() => $$unsubscribe_portal());
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Portal", slots, ["default"]);
  let { id = "default" } = $$props;
  let { object = void 0 } = $$props;
  const { getPortal } = usePortalContext();
  const children2 = writable([]);
  const target = writable();
  validate_store(target, "target");
  component_subscribe($$self, target, (value) => $$invalidate(1, $target = value));
  watch([children2, target], ([children3, target2]) => {
    if (target2 === void 0) return;
    for (const child of children3) {
      if (target2.children.includes(child)) continue;
      target2.add(child);
    }
    return () => {
      for (const child of children3) {
        if (target2.children.includes(child)) {
          target2.remove(child);
        }
      }
    };
  });
  const writable_props = ["id", "object"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Portal> was created with unknown prop '${key}'`);
  });
  const func3 = (child) => children2.update((array) => {
    array.push(child);
    return array;
  });
  const func_12 = (child) => children2.update((array) => {
    array.splice(array.indexOf(child), 1);
    return array;
  });
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2) $$invalidate(4, id = $$props2.id);
    if ("object" in $$props2) $$invalidate(5, object = $$props2.object);
    if ("$$scope" in $$props2) $$invalidate(10, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    HierarchicalObject: HierarchicalObject_default,
    watch,
    usePortalContext,
    writable,
    id,
    object,
    getPortal,
    children: children2,
    target,
    portal,
    $portal,
    $target
  });
  $$self.$inject_state = ($$props2) => {
    if ("id" in $$props2) $$invalidate(4, id = $$props2.id);
    if ("object" in $$props2) $$invalidate(5, object = $$props2.object);
    if ("portal" in $$props2) $$subscribe_portal($$invalidate(0, portal = $$props2.portal));
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*id*/
    16) {
      $: $$subscribe_portal($$invalidate(0, portal = getPortal(id)));
    }
    if ($$self.$$.dirty & /*object, $portal*/
    96) {
      $: target.set(object ?? $portal);
    }
  };
  return [
    portal,
    $target,
    children2,
    target,
    id,
    object,
    $portal,
    slots,
    func3,
    func_12,
    $$scope
  ];
}
var Portal = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance36, create_fragment36, safe_not_equal, { id: 4, object: 5 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Portal",
      options,
      id: create_fragment36.name
    });
  }
  get id() {
    throw new Error("<Portal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Portal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get object() {
    throw new Error("<Portal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set object(value) {
    throw new Error("<Portal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Portal_default = Portal;

// node_modules/@threlte/extras/dist/components/portals/PortalTarget/PortalTarget.svelte
var { Error: Error_15 } = globals;
function create_fragment37(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment37.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance37($$self, $$props, $$invalidate) {
  let $parent;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("PortalTarget", slots, []);
  const parent = useParent();
  validate_store(parent, "parent");
  component_subscribe($$self, parent, (value) => $$invalidate(2, $parent = value));
  if (!$parent) {
    throw new Error("<PortalTarget> must be used within a <Canvas> component.");
  }
  let { id = "default" } = $$props;
  const { addPortal, removePortal } = usePortalContext();
  watch(parent, (parent2) => {
    if (!parent2) return;
    addPortal(parent2, id);
    return () => {
      removePortal(id);
    };
  });
  const writable_props = ["id"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<PortalTarget> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2) $$invalidate(1, id = $$props2.id);
  };
  $$self.$capture_state = () => ({
    useParent,
    watch,
    usePortalContext,
    parent,
    id,
    addPortal,
    removePortal,
    $parent
  });
  $$self.$inject_state = ($$props2) => {
    if ("id" in $$props2) $$invalidate(1, id = $$props2.id);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [parent, id];
}
var PortalTarget = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance37, create_fragment37, safe_not_equal, { id: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PortalTarget",
      options,
      id: create_fragment37.name
    });
  }
  get id() {
    throw new Error_15("<PortalTarget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error_15("<PortalTarget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var PortalTarget_default = PortalTarget;

// node_modules/@threlte/extras/dist/components/Text/Text.svelte
var get_default_slot_changes25 = (dirty) => ({ ref: dirty & /*ref*/
8 });
var get_default_slot_context25 = (ctx) => ({ ref: (
  /*ref*/
  ctx[3]
) });
function create_default_slot29(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context25
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        520)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_default_slot_changes25
            ),
            get_default_slot_context25
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot29.name,
    type: "slot",
    source: "(24:0) <T   is={ref}   let:ref   {...$$restProps}   {font}   {characters}   {sdfGlyphSize}   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment38(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[3]
    ) },
    /*$$restProps*/
    ctx[6],
    { font: (
      /*font*/
      ctx[0]
    ) },
    { characters: (
      /*characters*/
      ctx[1]
    ) },
    { sdfGlyphSize: (
      /*sdfGlyphSize*/
      ctx[2]
    ) }
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot29, ({ ref }) => ({ 3: ref }), ({ ref }) => ref ? 8 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[8](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps, font, characters, sdfGlyphSize*/
      79 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        8 && { is: (
          /*ref*/
          ctx2[3]
        ) },
        dirty & /*$$restProps*/
        64 && get_spread_object(
          /*$$restProps*/
          ctx2[6]
        ),
        dirty & /*font*/
        1 && { font: (
          /*font*/
          ctx2[0]
        ) },
        dirty & /*characters*/
        2 && { characters: (
          /*characters*/
          ctx2[1]
        ) },
        dirty & /*sdfGlyphSize*/
        4 && { sdfGlyphSize: (
          /*sdfGlyphSize*/
          ctx2[2]
        ) }
      ]) : {};
      if (dirty & /*$$scope, ref*/
      520) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[8](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment38.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance38($$self, $$props, $$invalidate) {
  const omit_props_names = ["font", "characters", "sdfGlyphSize", "ref"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Text", slots, ["default"]);
  let { font = void 0 } = $$props;
  let { characters = void 0 } = $$props;
  let { sdfGlyphSize = void 0 } = $$props;
  const ref = new Text();
  const { invalidate } = useThrelte();
  const dispatch = createEventDispatcher();
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(4, $component = value));
  const onUpdate = async () => {
    await tick();
    ref.sync(() => {
      invalidate();
      dispatch("sync");
    });
  };
  const suspend = useSuspense();
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("font" in $$new_props) $$invalidate(0, font = $$new_props.font);
    if ("characters" in $$new_props) $$invalidate(1, characters = $$new_props.characters);
    if ("sdfGlyphSize" in $$new_props) $$invalidate(2, sdfGlyphSize = $$new_props.sdfGlyphSize);
    if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    useThrelte,
    createEventDispatcher,
    tick,
    preloadFont,
    Text,
    useSuspense,
    font,
    characters,
    sdfGlyphSize,
    ref,
    invalidate,
    dispatch,
    component,
    onUpdate,
    suspend,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("font" in $$props) $$invalidate(0, font = $$new_props.font);
    if ("characters" in $$props) $$invalidate(1, characters = $$new_props.characters);
    if ("sdfGlyphSize" in $$props) $$invalidate(2, sdfGlyphSize = $$new_props.sdfGlyphSize);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    $: $$restProps && onUpdate();
    if ($$self.$$.dirty & /*font, characters, sdfGlyphSize*/
    7) {
      $: suspend(new Promise((res) => preloadFont({ font, characters, sdfGlyphSize }, res)));
    }
  };
  return [
    font,
    characters,
    sdfGlyphSize,
    ref,
    $component,
    component,
    $$restProps,
    slots,
    t_binding,
    $$scope
  ];
}
var Text_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance38, create_fragment38, safe_not_equal, {
      font: 0,
      characters: 1,
      sdfGlyphSize: 2,
      ref: 3
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Text_1",
      options,
      id: create_fragment38.name
    });
  }
  get font() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set font(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get characters() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set characters(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sdfGlyphSize() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sdfGlyphSize(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[3];
  }
  set ref(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Text_default = Text_1;

// node_modules/@threlte/extras/dist/audio/useThrelteAudio.js
function useThrelteAudio() {
  const audioCtx = {
    audioListeners: /* @__PURE__ */ new Map(),
    addAudioListener: (listener, id) => {
      id = id ?? "default";
      if (audioCtx.audioListeners.has(id)) {
        console.warn(`An AudioListener with the id "${id}" has already been added, aborting.`);
        return;
      }
      audioCtx.audioListeners.set(id, listener);
    },
    removeAudioListener: (id) => {
      id = id ?? "default";
      if (!audioCtx.audioListeners.has(id)) {
        console.warn(`No AudioListener with the id "${id}" found, aborting.`);
        return;
      }
      audioCtx.audioListeners.delete(id);
    },
    getAudioListener: (id) => {
      id = id ?? "default";
      if (!audioCtx.audioListeners.has(id)) {
        console.warn(`No AudioListener with the id "${id}" found, aborting.`);
        return;
      }
      return audioCtx.audioListeners.get(id);
    }
  };
  return useThrelteUserContext("threlte-audio", audioCtx);
}

// node_modules/@threlte/extras/dist/audio/AudioListener/AudioListener.svelte
var get_default_slot_changes26 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context26 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot30(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    get_default_slot_context26
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        1025)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[10]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              get_default_slot_changes26
            ),
            get_default_slot_context26
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot30.name,
    type: "slot",
    source: "(20:0) <T   is={ref}   {...$$restProps}   let:ref   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment39(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot30, ({ ref }) => ({ 0: ref }), ({ ref }) => ref ? 1 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[9](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      1025) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[9](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment39.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance39($$self, $$props, $$invalidate) {
  const omit_props_names = ["id", "masterVolume", "ref", "audioContext", "resumeContext"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("AudioListener", slots, ["default"]);
  let { id = void 0 } = $$props;
  let { masterVolume = void 0 } = $$props;
  const ref = new AudioListener();
  const audioContext = ref.context;
  const resumeContext = async () => await ref.context.resume();
  const { addAudioListener, removeAudioListener } = useThrelteAudio();
  addAudioListener(ref, id);
  onDestroy(() => {
    removeAudioListener(id);
  });
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
    if ("masterVolume" in $$new_props) $$invalidate(5, masterVolume = $$new_props.masterVolume);
    if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    onDestroy,
    ThreeAudioListener: AudioListener,
    useThrelteAudio,
    id,
    masterVolume,
    ref,
    audioContext,
    resumeContext,
    addAudioListener,
    removeAudioListener,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("id" in $$props) $$invalidate(4, id = $$new_props.id);
    if ("masterVolume" in $$props) $$invalidate(5, masterVolume = $$new_props.masterVolume);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*masterVolume*/
    32) {
      $: if (masterVolume !== void 0) ref.setMasterVolume(masterVolume);
    }
  };
  return [
    ref,
    $component,
    component,
    $$restProps,
    id,
    masterVolume,
    audioContext,
    resumeContext,
    slots,
    t_binding,
    $$scope
  ];
}
var AudioListener2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance39, create_fragment39, safe_not_equal, {
      id: 4,
      masterVolume: 5,
      ref: 0,
      audioContext: 6,
      resumeContext: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "AudioListener",
      options,
      id: create_fragment39.name
    });
  }
  get id() {
    throw new Error("<AudioListener>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<AudioListener>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get masterVolume() {
    throw new Error("<AudioListener>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set masterVolume(value) {
    throw new Error("<AudioListener>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error("<AudioListener>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get audioContext() {
    return this.$$.ctx[6];
  }
  set audioContext(value) {
    throw new Error("<AudioListener>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get resumeContext() {
    return this.$$.ctx[7];
  }
  set resumeContext(value) {
    throw new Error("<AudioListener>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var AudioListener_default = AudioListener2;

// node_modules/@threlte/extras/dist/audio/utils/useAudio.js
var useAudio = (audio) => {
  const loaded = currentWritable(false);
  const autoplay = currentWritable(false);
  const shouldPlay = currentWritable(false);
  let audioDestroyed = false;
  const loader = useLoader(AudioLoader);
  const dispatch = createRawEventDispatcher();
  const setSrc = async (source) => {
    loaded.set(false);
    try {
      if (typeof source === "string") {
        const audioBuffer = await loader.load(source, {
          onProgress(event) {
            dispatch("progress", event);
          }
        });
        audio.setBuffer(audioBuffer);
      } else if (source instanceof AudioBuffer) {
        audio.setBuffer(source);
      } else if (source instanceof HTMLMediaElement) {
        audio.setMediaElementSource(source);
      } else if (source instanceof AudioBufferSourceNode) {
        audio.setNodeSource(source);
      } else if (source instanceof MediaStream) {
        audio.setMediaStreamSource(source);
      }
      loaded.set(true);
      audio.source?.buffer ? dispatch("load", audio.source.buffer) : dispatch("load");
    } catch (error) {
      dispatch("error", error);
    }
  };
  const setVolume = (volume) => {
    audio.setVolume(volume ?? 1);
  };
  const setPlaybackRate = (playbackRate) => {
    audio.setPlaybackRate(playbackRate ?? 1);
  };
  const play = async (delay) => {
    if (!loaded.current) {
      shouldPlay.set(true);
      return;
    }
    if (audio.context.state !== "running") {
      await audio.context.resume();
      if (audioDestroyed) {
        return;
      }
    }
    return audio.play(delay);
  };
  const pause = () => {
    return audio.pause();
  };
  const stop = () => {
    if (!audio.source)
      return audio;
    return audio.stop();
  };
  const setAutoPlay = (value) => {
    autoplay.set(value ?? false);
  };
  const setDetune = (value) => {
    if (audio.source && audio.source.detune) {
      audio.setDetune(value ?? 0);
    }
  };
  const setLoop = (value) => {
    audio.setLoop(value ?? false);
  };
  watch([loaded, autoplay, shouldPlay], ([loaded2, autoplay2, shouldPlay2]) => {
    if (!loaded2) {
      if (audio.isPlaying)
        stop();
      return;
    }
    if (autoplay2 || shouldPlay2) {
      play();
    }
  });
  onDestroy(() => {
    try {
      audioDestroyed = true;
      stop();
    } catch (error) {
      console.warn("Error while destroying audio", error);
    }
  });
  return {
    setVolume,
    setSrc,
    setPlaybackRate,
    setAutoPlay,
    setDetune,
    setLoop,
    play,
    pause,
    stop
  };
};

// node_modules/@threlte/extras/dist/audio/Audio/Audio.svelte
var { Error: Error_16 } = globals;
var get_default_slot_changes27 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context27 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot31(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    get_default_slot_context27
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        65537)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              get_default_slot_changes27
            ),
            get_default_slot_context27
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot31.name,
    type: "slot",
    source: "(29:0) <T   is={ref}   {...$$restProps}   let:ref   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment40(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot31, ({ ref }) => ({ 0: ref }), ({ ref }) => ref ? 1 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[15](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      65537) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[15](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment40.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance40($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "src",
    "id",
    "volume",
    "playbackRate",
    "autoplay",
    "detune",
    "loop",
    "ref",
    "pause",
    "play",
    "stop"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Audio", slots, ["default"]);
  let { src } = $$props;
  let { id = void 0 } = $$props;
  let { volume = void 0 } = $$props;
  let { playbackRate = void 0 } = $$props;
  let { autoplay = void 0 } = $$props;
  let { detune = void 0 } = $$props;
  let { loop = void 0 } = $$props;
  const { getAudioListener } = useThrelteAudio();
  const listener = getAudioListener(id);
  if (!listener) {
    throw new Error(`No Audiolistener with id ${id} found.`);
  }
  const ref = new Audio(listener);
  const { pause, play, stop, setAutoPlay, setDetune, setLoop, setPlaybackRate, setSrc, setVolume } = useAudio(ref);
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  $$self.$$.on_mount.push(function() {
    if (src === void 0 && !("src" in $$props || $$self.$$.bound[$$self.$$.props["src"]])) {
      console.warn("<Audio> was created without expected prop 'src'");
    }
  });
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("src" in $$new_props) $$invalidate(4, src = $$new_props.src);
    if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
    if ("volume" in $$new_props) $$invalidate(6, volume = $$new_props.volume);
    if ("playbackRate" in $$new_props) $$invalidate(7, playbackRate = $$new_props.playbackRate);
    if ("autoplay" in $$new_props) $$invalidate(8, autoplay = $$new_props.autoplay);
    if ("detune" in $$new_props) $$invalidate(9, detune = $$new_props.detune);
    if ("loop" in $$new_props) $$invalidate(10, loop = $$new_props.loop);
    if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    ThreeAudio: Audio,
    useAudio,
    useThrelteAudio,
    src,
    id,
    volume,
    playbackRate,
    autoplay,
    detune,
    loop,
    getAudioListener,
    listener,
    ref,
    pause,
    play,
    stop,
    setAutoPlay,
    setDetune,
    setLoop,
    setPlaybackRate,
    setSrc,
    setVolume,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("src" in $$props) $$invalidate(4, src = $$new_props.src);
    if ("id" in $$props) $$invalidate(5, id = $$new_props.id);
    if ("volume" in $$props) $$invalidate(6, volume = $$new_props.volume);
    if ("playbackRate" in $$props) $$invalidate(7, playbackRate = $$new_props.playbackRate);
    if ("autoplay" in $$props) $$invalidate(8, autoplay = $$new_props.autoplay);
    if ("detune" in $$props) $$invalidate(9, detune = $$new_props.detune);
    if ("loop" in $$props) $$invalidate(10, loop = $$new_props.loop);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*autoplay*/
    256) {
      $: setAutoPlay(autoplay);
    }
    if ($$self.$$.dirty & /*src*/
    16) {
      $: setSrc(src);
    }
    if ($$self.$$.dirty & /*volume*/
    64) {
      $: setVolume(volume);
    }
    if ($$self.$$.dirty & /*playbackRate*/
    128) {
      $: setPlaybackRate(playbackRate);
    }
    if ($$self.$$.dirty & /*loop*/
    1024) {
      $: setLoop(loop);
    }
    if ($$self.$$.dirty & /*detune*/
    512) {
      $: setDetune(detune);
    }
  };
  return [
    ref,
    $component,
    component,
    $$restProps,
    src,
    id,
    volume,
    playbackRate,
    autoplay,
    detune,
    loop,
    pause,
    play,
    stop,
    slots,
    t_binding,
    $$scope
  ];
}
var Audio2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance40, create_fragment40, safe_not_equal, {
      src: 4,
      id: 5,
      volume: 6,
      playbackRate: 7,
      autoplay: 8,
      detune: 9,
      loop: 10,
      ref: 0,
      pause: 11,
      play: 12,
      stop: 13
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Audio",
      options,
      id: create_fragment40.name
    });
  }
  get src() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set src(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get volume() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set volume(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get playbackRate() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set playbackRate(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get autoplay() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoplay(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get detune() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set detune(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get loop() {
    throw new Error_16("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set loop(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pause() {
    return this.$$.ctx[11];
  }
  set pause(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get play() {
    return this.$$.ctx[12];
  }
  set play(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get stop() {
    return this.$$.ctx[13];
  }
  set stop(value) {
    throw new Error_16("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Audio_default = Audio2;

// node_modules/@threlte/extras/dist/audio/PositionalAudio/PositionalAudio.svelte
var { Error: Error_17 } = globals;
var get_default_slot_changes28 = (dirty) => ({ ref: dirty & /*ref*/
1 });
var get_default_slot_context28 = (ctx) => ({ ref: (
  /*ref*/
  ctx[0]
) });
function create_default_slot32(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[19].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[21],
    get_default_slot_context28
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, ref*/
        2097153)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[21],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[21]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[21],
              dirty,
              get_default_slot_changes28
            ),
            get_default_slot_context28
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot32.name,
    type: "slot",
    source: "(47:0) <T   is={ref}   {...$$restProps}   let:ref   bind:this={$component} >",
    ctx
  });
  return block;
}
function create_fragment41(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[3]
  ];
  let t_props = {
    $$slots: {
      default: [create_default_slot32, ({ ref }) => ({ 0: ref }), ({ ref }) => ref ? 1 : 0]
    },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  ctx[20](t);
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      9 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        8 && get_spread_object(
          /*$$restProps*/
          ctx2[3]
        )
      ]) : {};
      if (dirty & /*$$scope, ref*/
      2097153) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[20](null);
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment41.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance41($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "src",
    "id",
    "volume",
    "playbackRate",
    "autoplay",
    "detune",
    "loop",
    "directionalCone",
    "refDistance",
    "rolloffFactor",
    "distanceModel",
    "maxDistance",
    "ref",
    "pause",
    "play",
    "stop"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $component;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("PositionalAudio", slots, ["default"]);
  let { src } = $$props;
  let { id = void 0 } = $$props;
  let { volume = void 0 } = $$props;
  let { playbackRate = void 0 } = $$props;
  let { autoplay = void 0 } = $$props;
  let { detune = void 0 } = $$props;
  let { loop = void 0 } = $$props;
  let { directionalCone = void 0 } = $$props;
  let { refDistance = void 0 } = $$props;
  let { rolloffFactor = void 0 } = $$props;
  let { distanceModel = void 0 } = $$props;
  let { maxDistance = void 0 } = $$props;
  const { getAudioListener } = useThrelteAudio();
  const listener = getAudioListener(id);
  if (!listener) {
    throw new Error(`No Audiolistener with id ${id} found.`);
  }
  const ref = new PositionalAudio(listener);
  const { pause, play, stop, setAutoPlay, setDetune, setLoop, setPlaybackRate, setSrc: setSource, setVolume } = useAudio(ref);
  const component = forwardEventHandlers();
  validate_store(component, "component");
  component_subscribe($$self, component, (value) => $$invalidate(1, $component = value));
  $$self.$$.on_mount.push(function() {
    if (src === void 0 && !("src" in $$props || $$self.$$.bound[$$self.$$.props["src"]])) {
      console.warn("<PositionalAudio> was created without expected prop 'src'");
    }
  });
  function t_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $component = $$value;
      component.set($component);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("src" in $$new_props) $$invalidate(4, src = $$new_props.src);
    if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
    if ("volume" in $$new_props) $$invalidate(6, volume = $$new_props.volume);
    if ("playbackRate" in $$new_props) $$invalidate(7, playbackRate = $$new_props.playbackRate);
    if ("autoplay" in $$new_props) $$invalidate(8, autoplay = $$new_props.autoplay);
    if ("detune" in $$new_props) $$invalidate(9, detune = $$new_props.detune);
    if ("loop" in $$new_props) $$invalidate(10, loop = $$new_props.loop);
    if ("directionalCone" in $$new_props) $$invalidate(11, directionalCone = $$new_props.directionalCone);
    if ("refDistance" in $$new_props) $$invalidate(12, refDistance = $$new_props.refDistance);
    if ("rolloffFactor" in $$new_props) $$invalidate(13, rolloffFactor = $$new_props.rolloffFactor);
    if ("distanceModel" in $$new_props) $$invalidate(14, distanceModel = $$new_props.distanceModel);
    if ("maxDistance" in $$new_props) $$invalidate(15, maxDistance = $$new_props.maxDistance);
    if ("$$scope" in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    forwardEventHandlers,
    T,
    ThreePositionalAudio: PositionalAudio,
    useAudio,
    useThrelteAudio,
    src,
    id,
    volume,
    playbackRate,
    autoplay,
    detune,
    loop,
    directionalCone,
    refDistance,
    rolloffFactor,
    distanceModel,
    maxDistance,
    getAudioListener,
    listener,
    ref,
    pause,
    play,
    stop,
    setAutoPlay,
    setDetune,
    setLoop,
    setPlaybackRate,
    setSource,
    setVolume,
    component,
    $component
  });
  $$self.$inject_state = ($$new_props) => {
    if ("src" in $$props) $$invalidate(4, src = $$new_props.src);
    if ("id" in $$props) $$invalidate(5, id = $$new_props.id);
    if ("volume" in $$props) $$invalidate(6, volume = $$new_props.volume);
    if ("playbackRate" in $$props) $$invalidate(7, playbackRate = $$new_props.playbackRate);
    if ("autoplay" in $$props) $$invalidate(8, autoplay = $$new_props.autoplay);
    if ("detune" in $$props) $$invalidate(9, detune = $$new_props.detune);
    if ("loop" in $$props) $$invalidate(10, loop = $$new_props.loop);
    if ("directionalCone" in $$props) $$invalidate(11, directionalCone = $$new_props.directionalCone);
    if ("refDistance" in $$props) $$invalidate(12, refDistance = $$new_props.refDistance);
    if ("rolloffFactor" in $$props) $$invalidate(13, rolloffFactor = $$new_props.rolloffFactor);
    if ("distanceModel" in $$props) $$invalidate(14, distanceModel = $$new_props.distanceModel);
    if ("maxDistance" in $$props) $$invalidate(15, maxDistance = $$new_props.maxDistance);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*refDistance, rolloffFactor, distanceModel, maxDistance, directionalCone*/
    63488) {
      $: {
        if (refDistance !== void 0) ref.setRefDistance(refDistance);
        if (rolloffFactor !== void 0) ref.setRolloffFactor(rolloffFactor);
        if (distanceModel !== void 0) ref.setDistanceModel(distanceModel);
        if (maxDistance !== void 0) ref.setMaxDistance(maxDistance);
        if (directionalCone !== void 0) {
          ref.setDirectionalCone(directionalCone.coneInnerAngle, directionalCone.coneOuterAngle, directionalCone.coneOuterGain);
        }
      }
    }
    if ($$self.$$.dirty & /*autoplay*/
    256) {
      $: setAutoPlay(autoplay);
    }
    if ($$self.$$.dirty & /*src*/
    16) {
      $: setSource(src);
    }
    if ($$self.$$.dirty & /*volume*/
    64) {
      $: setVolume(volume);
    }
    if ($$self.$$.dirty & /*playbackRate*/
    128) {
      $: setPlaybackRate(playbackRate);
    }
    if ($$self.$$.dirty & /*loop*/
    1024) {
      $: setLoop(loop);
    }
    if ($$self.$$.dirty & /*detune*/
    512) {
      $: setDetune(detune);
    }
  };
  return [
    ref,
    $component,
    component,
    $$restProps,
    src,
    id,
    volume,
    playbackRate,
    autoplay,
    detune,
    loop,
    directionalCone,
    refDistance,
    rolloffFactor,
    distanceModel,
    maxDistance,
    pause,
    play,
    stop,
    slots,
    t_binding,
    $$scope
  ];
}
var PositionalAudio2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance41, create_fragment41, safe_not_equal, {
      src: 4,
      id: 5,
      volume: 6,
      playbackRate: 7,
      autoplay: 8,
      detune: 9,
      loop: 10,
      directionalCone: 11,
      refDistance: 12,
      rolloffFactor: 13,
      distanceModel: 14,
      maxDistance: 15,
      ref: 0,
      pause: 16,
      play: 17,
      stop: 18
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PositionalAudio",
      options,
      id: create_fragment41.name
    });
  }
  get src() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set src(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get volume() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set volume(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get playbackRate() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set playbackRate(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get autoplay() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoplay(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get detune() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set detune(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get loop() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set loop(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get directionalCone() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set directionalCone(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get refDistance() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set refDistance(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rolloffFactor() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rolloffFactor(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get distanceModel() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set distanceModel(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get maxDistance() {
    throw new Error_17("<PositionalAudio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set maxDistance(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    return this.$$.ctx[0];
  }
  set ref(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pause() {
    return this.$$.ctx[16];
  }
  set pause(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get play() {
    return this.$$.ctx[17];
  }
  set play(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get stop() {
    return this.$$.ctx[18];
  }
  set stop(value) {
    throw new Error_17("<PositionalAudio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var PositionalAudio_default = PositionalAudio2;

// node_modules/@threlte/extras/dist/audio/useAudioListener.js
function useAudioListener(callbackOrId, id) {
  const { getAudioListener } = useThrelteAudio();
  if (callbackOrId && typeof callbackOrId === "string") {
    const listener = getAudioListener(callbackOrId);
    if (!listener)
      throw new Error("No AudioListener found.");
    return {
      listener,
      context: listener.context
    };
  } else if (callbackOrId && typeof callbackOrId === "function") {
    const listener = getAudioListener(id);
    if (!listener)
      throw new Error("No AudioListener found.");
    return callbackOrId({
      listener,
      context: listener.context
    });
  } else {
    const listener = getAudioListener();
    if (!listener)
      throw new Error("No AudioListener found.");
    return {
      listener,
      context: listener.context
    };
  }
}

// node_modules/@threlte/extras/dist/interactivity/defaults.js
var getDefaultComputeFunction = (target) => {
  const { camera } = useThrelte();
  let width = target.current.clientWidth;
  let height = target.current.clientHeight;
  const resizeObserver = new ResizeObserver(([entry]) => {
    width = entry.contentRect.width;
    height = entry.contentRect.height;
  });
  watch(target, (target2) => {
    if (target2)
      resizeObserver.observe(target2);
    return () => {
      if (target2)
        resizeObserver.unobserve(target2);
    };
  });
  return (event, state) => {
    state.pointer.update((pointer) => {
      pointer.set(event.offsetX / width * 2 - 1, -(event.offsetY / height) * 2 + 1);
      return pointer;
    });
    state.raycaster.setFromCamera(state.pointer.current, camera.current);
  };
};

// node_modules/@threlte/extras/dist/interactivity/context.js
var contextKey = Symbol("interactivity-context");
var getInteractivityContext = () => {
  return getContext(contextKey);
};
var setInteractivityContext = (options) => {
  const target = currentWritable(options?.target ?? useThrelte().renderer.domElement);
  const context = {
    enabled: currentWritable(options?.enabled ?? true),
    pointer: currentWritable(new Vector2()),
    pointerOverTarget: currentWritable(false),
    lastEvent: void 0,
    raycaster: new Raycaster(),
    initialClick: [0, 0],
    initialHits: [],
    hovered: /* @__PURE__ */ new Map(),
    interactiveObjects: [],
    target,
    compute: options?.compute ?? getDefaultComputeFunction(target),
    filter: options?.filter
  };
  setContext(contextKey, context);
  return context;
};
var handlerContextKey = Symbol("interactivity-handler-context");
var getHandlerContext = () => {
  return getContext(handlerContextKey);
};
var setHandlerContext = () => {
  setContext(handlerContextKey, {
    dispatchers: /* @__PURE__ */ new WeakMap()
  });
};

// node_modules/@threlte/extras/dist/interactivity/hook.js
var useInteractivity = () => {
  const context = getInteractivityContext();
  const { dispatchers } = getHandlerContext();
  if (!context) {
    throw new Error("No interactivity context found. Did you forget to implement interactivity()?");
  }
  const eventDispatcher = createRawEventDispatcher();
  const addInteractiveObject = (object) => {
    if (context.interactiveObjects.indexOf(object) > -1) {
      return;
    }
    dispatchers.set(object, eventDispatcher);
    context.interactiveObjects.push(object);
  };
  const removeInteractiveObject = (object) => {
    const index = context.interactiveObjects.indexOf(object);
    context.interactiveObjects.splice(index, 1);
    dispatchers.delete(object);
  };
  return {
    ...context,
    addInteractiveObject,
    removeInteractiveObject
  };
};

// node_modules/@threlte/extras/dist/interactivity/useComponentHasEventHandlers.js
var useComponentHasEventHandlers = (eventNames) => {
  const component = get_current_component();
  const hasEventHandlers = writable(false);
  onMount(() => {
    hasEventHandlers.set(Object.keys(component.$$.callbacks).some((value) => eventNames.includes(value)));
  });
  return {
    hasEventHandlers
  };
};

// node_modules/@threlte/extras/dist/interactivity/plugin.js
var interactivityEventNames = [
  "click",
  "contextmenu",
  "dblclick",
  "wheel",
  "pointerup",
  "pointerdown",
  "pointerover",
  "pointerout",
  "pointerenter",
  "pointerleave",
  "pointermove",
  "pointermissed"
];
var injectInteractivityPlugin = () => {
  injectPlugin("interactivity", ({ ref }) => {
    if (!ref.isObject3D)
      return;
    const { addInteractiveObject, removeInteractiveObject } = useInteractivity();
    const refStore = writable(ref);
    const { hasEventHandlers } = useComponentHasEventHandlers(interactivityEventNames);
    watch([hasEventHandlers, refStore], ([hasEventHandlers2, ref2]) => {
      if (!hasEventHandlers2)
        return;
      addInteractiveObject(ref2);
      return () => removeInteractiveObject(ref2);
    });
    return {
      onRefChange(ref2) {
        refStore.set(ref2);
      }
    };
  });
};

// node_modules/@threlte/extras/dist/interactivity/setupInteractivity.js
function getIntersectionId(event) {
  return `${(event.eventObject || event.object).uuid}/${event.index}${event.instanceId}`;
}
var DOM_EVENTS = [
  ["click", false],
  ["contextmenu", false],
  ["dblclick", false],
  ["wheel", false],
  ["pointerdown", true],
  ["pointerup", true],
  ["pointerleave", true],
  ["pointerenter", true],
  ["pointermove", true],
  ["pointercancel", true]
];
var setupInteractivity = (context) => {
  const { dispatchers } = getHandlerContext();
  const calculateDistance = (event) => {
    const dx = event.offsetX - context.initialClick[0];
    const dy = event.offsetY - context.initialClick[1];
    return Math.round(Math.hypot(dx, dy));
  };
  const cancelPointer = (intersections) => {
    for (const hoveredObj of context.hovered.values()) {
      if (intersections.length === 0 || !intersections.some((hit) => {
        return hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId;
      })) {
        const { eventObject } = hoveredObj;
        context.hovered.delete(getIntersectionId(hoveredObj));
        const eventDispatcher = dispatchers.get(eventObject);
        if (eventDispatcher) {
          const data = { ...hoveredObj, intersections };
          eventDispatcher("pointerout", data);
          eventDispatcher("pointerleave", data);
        }
      }
    }
  };
  const enabled = memoize(context.enabled);
  const getHits = () => {
    if (!enabled.current)
      return [];
    const intersections = [];
    const hits = context.raycaster.intersectObjects(context.interactiveObjects, true);
    const filtered = context.filter === void 0 ? hits : context.filter(hits, context);
    for (const hit of filtered) {
      let eventObject = hit.object;
      while (eventObject) {
        if (dispatchers.has(eventObject))
          intersections.push({ ...hit, eventObject });
        eventObject = eventObject.parent;
      }
    }
    return intersections;
  };
  const pointerMissed = (event, objects) => {
    for (const object of objects) {
      dispatchers.get(object)?.("pointermissed", event);
    }
  };
  const getEventHandler = (name) => {
    if (name === "pointerleave" || name === "pointercancel") {
      return () => {
        context.pointerOverTarget.set(false);
        cancelPointer([]);
      };
    }
    if (name === "pointerenter") {
      return () => {
        context.pointerOverTarget.set(true);
      };
    }
    return (event) => {
      const isPointerMove = name === "pointermove";
      const isClickEvent = name === "click" || name === "contextmenu" || name === "dblclick";
      context.compute(event, context);
      const hits = getHits();
      const delta = isClickEvent ? calculateDistance(event) : 0;
      if (name === "pointerdown") {
        context.initialClick = [event.offsetX, event.offsetY];
        context.initialHits = hits.map((hit) => hit.eventObject);
      }
      if (isClickEvent && hits.length === 0) {
        if (delta <= 2) {
          pointerMissed(event, context.interactiveObjects);
        }
      }
      if (isPointerMove)
        cancelPointer(hits);
      let stopped = false;
      dispatchEvents: for (const hit of hits) {
        const intersectionEvent = {
          stopped,
          ...hit,
          intersections: hits,
          stopPropagation() {
            stopped = true;
            intersectionEvent.stopped = true;
            if (context.hovered.size > 0 && Array.from(context.hovered.values()).some((i) => i.eventObject === hit.eventObject)) {
              const higher = hits.slice(0, hits.indexOf(hit));
              cancelPointer([...higher, hit]);
            }
          },
          camera: context.raycaster.camera,
          delta,
          nativeEvent: event,
          pointer: context.pointer.current,
          ray: context.raycaster.ray
        };
        const eventDispatcher = dispatchers.get(hit.eventObject);
        if (!eventDispatcher)
          return;
        if (isPointerMove) {
          if (eventDispatcher.hasEventListener("pointerover") || eventDispatcher.hasEventListener("pointerenter") || eventDispatcher.hasEventListener("pointerout") || eventDispatcher.hasEventListener("pointerleave")) {
            const id = getIntersectionId(intersectionEvent);
            const hoveredItem = context.hovered.get(id);
            if (!hoveredItem) {
              context.hovered.set(id, intersectionEvent);
              eventDispatcher("pointerover", intersectionEvent);
              eventDispatcher("pointerenter", intersectionEvent);
            } else if (hoveredItem.stopped) {
              intersectionEvent.stopPropagation();
            }
          }
          eventDispatcher("pointermove", intersectionEvent);
        } else {
          const hasEventListener = eventDispatcher.hasEventListener(name);
          if (hasEventListener) {
            if (!isClickEvent || context.initialHits.includes(hit.eventObject)) {
              pointerMissed(event, context.interactiveObjects.filter((object) => !context.initialHits.includes(object)));
              eventDispatcher(name, intersectionEvent);
            }
          } else {
            if (isClickEvent && context.initialHits.includes(hit.eventObject)) {
              pointerMissed(event, context.interactiveObjects.filter((object) => !context.initialHits.includes(object)));
            }
          }
        }
        if (stopped)
          break dispatchEvents;
      }
    };
  };
  const disconnect = (target) => {
    DOM_EVENTS.forEach(([eventName]) => {
      target.removeEventListener(eventName, getEventHandler(eventName));
    });
  };
  const connect = (target) => {
    DOM_EVENTS.forEach(([eventName, passive]) => {
      target.addEventListener(eventName, getEventHandler(eventName), { passive });
    });
  };
  watch(context.target, (target) => {
    if (target)
      connect(target);
    return () => {
      if (target)
        disconnect(target);
    };
  });
};

// node_modules/@threlte/extras/dist/interactivity/index.js
var interactivity = (options) => {
  setHandlerContext();
  const context = setInteractivityContext(options);
  injectInteractivityPlugin();
  setupInteractivity(context);
  return context;
};

// node_modules/@threlte/extras/dist/transitions/transitions-plugin.js
var fragmentFunctions = {
  create: "c",
  claim: "l",
  hydrate: "h",
  mount: "m",
  update: "p",
  measure: "r",
  fix: "f",
  animate: "a",
  intro: "i",
  outro: "o",
  destroy: "d"
};
var appendToFragmentFunction = (component, fragmentFn, append) => {
  const fragment = component.$$.fragment;
  const fragmentFnShorthand = fragmentFunctions[fragmentFn];
  const original = fragment[fragmentFnShorthand];
  fragment[fragmentFnShorthand] = (...args) => {
    append(...args);
    original(...args);
  };
};
var transitions = () => {
  injectPlugin("transitions", ({ ref, props }) => {
    if (!props.in && !props.out && !props.transition)
      return;
    const { invalidate } = useThrelte();
    const dispatch = createRawEventDispatcher();
    let currentRef = ref;
    const el = {
      style: {},
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      dispatchEvent: (...args) => {
        const eventType = args[0].type;
        dispatch(eventType, ...args);
      }
    };
    const comp = get_current_component();
    const convertTransition = (transition) => {
      return (_node, _params, options) => {
        const t = transition(currentRef, {
          direction: options.direction
        });
        return {
          ...t,
          tick(...args) {
            invalidate();
            t?.tick?.(...args);
          }
        };
      };
    };
    if (props.transition) {
      let transition;
      onMount(() => {
        add_render_callback(() => {
          if (!transition) {
            if (!props.transition)
              return;
            transition = create_bidirectional_transition(el, convertTransition(props.transition), {}, true);
          }
          transition.run(1);
        });
        appendToFragmentFunction(comp, "intro", () => {
          add_render_callback(() => {
            if (!transition) {
              if (!props.transition)
                return;
              transition = create_bidirectional_transition(el, convertTransition(props.transition), {}, true);
            }
            transition.run(1);
          });
        });
        appendToFragmentFunction(comp, "outro", () => {
          if (!transition) {
            if (!props.transition)
              return;
            transition = create_bidirectional_transition(el, convertTransition(props.transition), {}, false);
          }
          transition.run(0);
        });
        appendToFragmentFunction(comp, "destroy", (...args) => {
          const detaching = args[0];
          if (detaching && transition)
            transition.end();
        });
      });
    } else {
      if (props.in) {
        let intro;
        onMount(() => {
          add_render_callback(() => {
            if (!props.in)
              return;
            intro = create_in_transition(el, convertTransition(props.in), {});
            intro.start();
          });
          appendToFragmentFunction(comp, "outro", () => {
            intro?.end();
          });
        });
      }
      if (props.out) {
        let outro;
        onMount(() => {
          appendToFragmentFunction(comp, "outro", () => {
            if (!props.out)
              return;
            outro = create_out_transition(el, convertTransition(props.out), {});
          });
          appendToFragmentFunction(comp, "intro", () => {
            outro?.end(1);
          });
          appendToFragmentFunction(comp, "destroy", (...args) => {
            const detaching = args[0];
            if (detaching && outro)
              outro.end(0);
          });
        });
      }
    }
    return {
      onRefChange(ref2) {
        currentRef = ref2;
      },
      pluginProps: ["in", "out", "transition"]
    };
  });
};

// node_modules/@threlte/extras/dist/transitions/createTransition.js
var createTransition = (transition) => transition;

// node_modules/@threlte/extras/dist/layers/plugin.js
var isObject3D2 = (ref) => {
  return ref.isObject3D;
};
var propIsThrelteLayers = (prop) => {
  return prop === "all" || prop === "none" || Array.isArray(prop) && prop.every((v) => typeof v === "number") || typeof prop === "number" && prop >= 0 && prop <= 31;
};
var injectLayersPlugin = () => {
  injectPlugin("layers", ({ ref, props }) => {
    if (!isObject3D2(ref))
      return;
    const local = writable(props.layers && propIsThrelteLayers(props.layers) ? props.layers : void 0);
    const ctx = getContext("threlte-layers-context");
    const merged = derived([local, ctx], ([prop, ctx2]) => prop ?? ctx2);
    setContext("threlte-layers-context", merged);
    const applyLayers = (ref2, layers2) => {
      if (layers2 === "all") {
        ref2.layers.enableAll();
      } else if (layers2 === "none") {
        ref2.layers.disableAll();
      } else if (Array.isArray(layers2)) {
        for (let index = 0; index < 32; index += 1) {
          const layerIndex = index;
          const enabled = layers2.includes(layerIndex);
          if (enabled) {
            ref2.layers.enable(index);
          } else {
            ref2.layers.disable(index);
          }
        }
      } else if (layers2 !== void 0) {
        ref2.layers.set(layers2);
      }
    };
    const refStore = writable(ref);
    watch([refStore, merged], ([ref2, layers2]) => {
      applyLayers(ref2, layers2);
    });
    return {
      onRestPropsChange(restProps) {
        local.set(restProps.layers && propIsThrelteLayers(restProps.layers) ? restProps.layers : void 0);
      },
      onRefChange(ref2) {
        if (!isObject3D2(ref2))
          return;
        refStore.set(ref2);
      },
      pluginProps: ["layers"]
    };
  });
};

// node_modules/@threlte/extras/dist/layers/index.js
var layers = (options) => {
  const local = writable(options?.defaultLayers ?? 0);
  setContext("threlte-layers-context", local);
  injectLayersPlugin();
};

// node_modules/@threlte/extras/dist/components/InstancedSprite/SpriteInstance.svelte
function create_fragment42(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment42.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance42($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SpriteInstance", slots, []);
  const spriteCtx = getContext("instanced-sprite-ctx");
  const { updatePosition, sprite } = spriteCtx;
  let { id = 0 } = $$props;
  let { position = [0, 0, 0] } = $$props;
  let { scale = [1, 1] } = $$props;
  let { animationName = void 0 } = $$props;
  let { playmode = void 0 } = $$props;
  let { billboarding = void 0 } = $$props;
  let { offset = void 0 } = $$props;
  let { loop = void 0 } = $$props;
  let { flipX = void 0 } = $$props;
  let { flipY = void 0 } = $$props;
  let { frameId = void 0 } = $$props;
  const writable_props = [
    "id",
    "position",
    "scale",
    "animationName",
    "playmode",
    "billboarding",
    "offset",
    "loop",
    "flipX",
    "flipY",
    "frameId"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<SpriteInstance> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2) $$invalidate(0, id = $$props2.id);
    if ("position" in $$props2) $$invalidate(1, position = $$props2.position);
    if ("scale" in $$props2) $$invalidate(2, scale = $$props2.scale);
    if ("animationName" in $$props2) $$invalidate(3, animationName = $$props2.animationName);
    if ("playmode" in $$props2) $$invalidate(4, playmode = $$props2.playmode);
    if ("billboarding" in $$props2) $$invalidate(5, billboarding = $$props2.billboarding);
    if ("offset" in $$props2) $$invalidate(6, offset = $$props2.offset);
    if ("loop" in $$props2) $$invalidate(7, loop = $$props2.loop);
    if ("flipX" in $$props2) $$invalidate(8, flipX = $$props2.flipX);
    if ("flipY" in $$props2) $$invalidate(9, flipY = $$props2.flipY);
    if ("frameId" in $$props2) $$invalidate(10, frameId = $$props2.frameId);
  };
  $$self.$capture_state = () => ({
    getContext,
    spriteCtx,
    updatePosition,
    sprite,
    id,
    position,
    scale,
    animationName,
    playmode,
    billboarding,
    offset,
    loop,
    flipX,
    flipY,
    frameId
  });
  $$self.$inject_state = ($$props2) => {
    if ("id" in $$props2) $$invalidate(0, id = $$props2.id);
    if ("position" in $$props2) $$invalidate(1, position = $$props2.position);
    if ("scale" in $$props2) $$invalidate(2, scale = $$props2.scale);
    if ("animationName" in $$props2) $$invalidate(3, animationName = $$props2.animationName);
    if ("playmode" in $$props2) $$invalidate(4, playmode = $$props2.playmode);
    if ("billboarding" in $$props2) $$invalidate(5, billboarding = $$props2.billboarding);
    if ("offset" in $$props2) $$invalidate(6, offset = $$props2.offset);
    if ("loop" in $$props2) $$invalidate(7, loop = $$props2.loop);
    if ("flipX" in $$props2) $$invalidate(8, flipX = $$props2.flipX);
    if ("flipY" in $$props2) $$invalidate(9, flipY = $$props2.flipY);
    if ("frameId" in $$props2) $$invalidate(10, frameId = $$props2.frameId);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*position, id, scale*/
    7) {
      $: position !== void 0 && updatePosition(id, position, scale);
    }
    if ($$self.$$.dirty & /*animationName, id*/
    9) {
      $: animationName !== void 0 && sprite.animation.setAt(id, animationName);
    }
    if ($$self.$$.dirty & /*playmode, id*/
    17) {
      $: playmode !== void 0 && sprite.playmode.setAt(id, playmode);
    }
    if ($$self.$$.dirty & /*billboarding, id*/
    33) {
      $: billboarding !== void 0 && sprite.billboarding.setAt(id, billboarding);
    }
    if ($$self.$$.dirty & /*offset, id*/
    65) {
      $: offset !== void 0 && sprite.offset.setAt(id, offset);
    }
    if ($$self.$$.dirty & /*loop, id*/
    129) {
      $: loop !== void 0 && sprite.loop.setAt(id, loop);
    }
    if ($$self.$$.dirty & /*flipX, id*/
    257) {
      $: flipX !== void 0 && sprite.flipX.setAt(id, flipX);
    }
    if ($$self.$$.dirty & /*flipY, id*/
    513) {
      $: flipY !== void 0 && sprite.flipY.setAt(id, flipY);
    }
    if ($$self.$$.dirty & /*frameId, id, animationName*/
    1033) {
      $: frameId !== void 0 && sprite.frame.setAt(id, frameId, animationName);
    }
  };
  return [
    id,
    position,
    scale,
    animationName,
    playmode,
    billboarding,
    offset,
    loop,
    flipX,
    flipY,
    frameId
  ];
}
var SpriteInstance = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance42, create_fragment42, safe_not_equal, {
      id: 0,
      position: 1,
      scale: 2,
      animationName: 3,
      playmode: 4,
      billboarding: 5,
      offset: 6,
      loop: 7,
      flipX: 8,
      flipY: 9,
      frameId: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SpriteInstance",
      options,
      id: create_fragment42.name
    });
  }
  get id() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get position() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set position(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scale() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scale(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animationName() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animationName(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get playmode() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set playmode(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get billboarding() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set billboarding(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get offset() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set offset(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get loop() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set loop(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get flipX() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set flipX(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get flipY() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set flipY(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get frameId() {
    throw new Error("<SpriteInstance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set frameId(value) {
    throw new Error("<SpriteInstance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SpriteInstance_default = SpriteInstance;

// node_modules/@threlte/extras/dist/components/InstancedSprite/InstancedSprite.svelte
var get_default_slot_changes29 = (dirty) => ({});
var get_default_slot_context29 = (ctx) => ({
  Instance: (
    /*proxySpritefileComponent*/
    ctx[3]
  )
});
function create_default_slot33(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[17],
    get_default_slot_context29
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        131072)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[17],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[17]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[17],
              dirty,
              get_default_slot_changes29
            ),
            get_default_slot_context29
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot33.name,
    type: "slot",
    source: "(115:0) <T   is={ref}   frustumCulled={false}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment43(ctx) {
  let t;
  let current;
  const t_spread_levels = [
    { is: (
      /*ref*/
      ctx[0]
    ) },
    { frustumCulled: false },
    /*$$restProps*/
    ctx[4]
  ];
  let t_props = {
    $$slots: { default: [create_default_slot33] },
    $$scope: { ctx }
  };
  for (let i = 0; i < t_spread_levels.length; i += 1) {
    t_props = assign(t_props, t_spread_levels[i]);
  }
  t = new T({ props: t_props, $$inline: true });
  const block = {
    c: function create() {
      create_component(t.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(t.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(t, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const t_changes = dirty & /*ref, $$restProps*/
      17 ? get_spread_update(t_spread_levels, [
        dirty & /*ref*/
        1 && { is: (
          /*ref*/
          ctx2[0]
        ) },
        t_spread_levels[1],
        dirty & /*$$restProps*/
        16 && get_spread_object(
          /*$$restProps*/
          ctx2[4]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      131072) {
        t_changes.$$scope = { dirty, ctx: ctx2 };
      }
      t.$set(t_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(t.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(t.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(t, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment43.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance43($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "autoUpdate",
    "baseMaterial",
    "fps",
    "billboarding",
    "playmode",
    "count",
    "alphaTest",
    "transparent",
    "hueShift",
    "randomPlaybackOffset",
    "spritesheet",
    "ref"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $playmodeStore;
  let $billboardingStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("InstancedSprite", slots, ["default"]);
  const g = new Mesh();
  g.material;
  let { autoUpdate = true } = $$props;
  let { baseMaterial = MeshBasicMaterial } = $$props;
  let { fps = 15 } = $$props;
  let { billboarding } = $$props;
  let { playmode = "FORWARD" } = $$props;
  let { count = 1e3 } = $$props;
  let { alphaTest = 0.1 } = $$props;
  let { transparent = true } = $$props;
  let { hueShift = void 0 } = $$props;
  let { randomPlaybackOffset = false } = $$props;
  let { spritesheet } = $$props;
  const spriteBaseMaterial = new baseMaterial({
    transparent,
    alphaTest,
    // needs to be double side for shading
    side: DoubleSide
  });
  const { renderer } = useThrelte();
  let { ref = new Kt(spriteBaseMaterial, count, renderer) } = $$props;
  const animationMap = writable(/* @__PURE__ */ new Map());
  const billboardingStore = writable(void 0);
  validate_store(billboardingStore, "billboardingStore");
  component_subscribe($$self, billboardingStore, (value) => $$invalidate(21, $billboardingStore = value));
  watch([billboardingStore], () => {
    if ($billboardingStore === void 0) {
      ref.billboarding.unsetAll();
      return;
    } else {
      ref.billboarding.setAll($billboardingStore);
    }
  });
  const playmodeStore = writable(void 0);
  validate_store(playmodeStore, "playmodeStore");
  component_subscribe($$self, playmodeStore, (value) => $$invalidate(20, $playmodeStore = value));
  watch([playmodeStore], () => {
    if ($playmodeStore === void 0) {
      ref.playmode.setAll("PAUSE");
      return;
    } else {
      ref.playmode.setAll($playmodeStore);
    }
  });
  const rndOffsetStore = writable(randomPlaybackOffset);
  let previousRndOffset = false;
  watch([rndOffsetStore], ([offset]) => {
    if (previousRndOffset === false && offset) {
      ref.offset.randomizeAll(offset === true ? 100 : offset);
    }
    if (previousRndOffset === true && !offset) {
      for (let i = 0; i < count; i++) {
        ref.offset.setAt(i, 0);
      }
    }
    previousRndOffset = offset ? true : false;
  });
  let instanceMatrixNeedsUpdate = false;
  const tempMatrix = new Matrix4();
  const updatePosition = (id, position, scale = [1, 1]) => {
    tempMatrix.makeScale(scale[0], scale[1], 1);
    tempMatrix.setPosition(...position);
    ref.setMatrixAt(id, tempMatrix);
    instanceMatrixNeedsUpdate = true;
  };
  setContext("instanced-sprite-ctx", {
    sprite: ref,
    count,
    animationMap,
    updatePosition
  });
  useTask(() => {
    if (autoUpdate) {
      ref.update();
    }
    if (instanceMatrixNeedsUpdate) {
      $$invalidate(0, ref.instanceMatrix.needsUpdate = true, ref);
      instanceMatrixNeedsUpdate = false;
    }
  });
  const proxySpritefileComponent = new Proxy(
    SpriteInstance_default,
    {
      construct(_target, [args]) {
        return new SpriteInstance_default(args);
      }
    }
  );
  $$self.$$.on_mount.push(function() {
    if (billboarding === void 0 && !("billboarding" in $$props || $$self.$$.bound[$$self.$$.props["billboarding"]])) {
      console.warn("<InstancedSprite> was created without expected prop 'billboarding'");
    }
    if (spritesheet === void 0 && !("spritesheet" in $$props || $$self.$$.bound[$$self.$$.props["spritesheet"]])) {
      console.warn("<InstancedSprite> was created without expected prop 'spritesheet'");
    }
  });
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("autoUpdate" in $$new_props) $$invalidate(5, autoUpdate = $$new_props.autoUpdate);
    if ("baseMaterial" in $$new_props) $$invalidate(6, baseMaterial = $$new_props.baseMaterial);
    if ("fps" in $$new_props) $$invalidate(7, fps = $$new_props.fps);
    if ("billboarding" in $$new_props) $$invalidate(8, billboarding = $$new_props.billboarding);
    if ("playmode" in $$new_props) $$invalidate(9, playmode = $$new_props.playmode);
    if ("count" in $$new_props) $$invalidate(10, count = $$new_props.count);
    if ("alphaTest" in $$new_props) $$invalidate(11, alphaTest = $$new_props.alphaTest);
    if ("transparent" in $$new_props) $$invalidate(12, transparent = $$new_props.transparent);
    if ("hueShift" in $$new_props) $$invalidate(13, hueShift = $$new_props.hueShift);
    if ("randomPlaybackOffset" in $$new_props) $$invalidate(14, randomPlaybackOffset = $$new_props.randomPlaybackOffset);
    if ("spritesheet" in $$new_props) $$invalidate(15, spritesheet = $$new_props.spritesheet);
    if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
    if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    InstancedSpriteMesh: Kt,
    PLAY_MODE: K,
    T,
    useTask,
    useThrelte,
    watch,
    DoubleSide,
    Matrix4,
    Mesh,
    MeshBasicMaterial,
    setContext,
    writable,
    SpriteInstance: SpriteInstance_default,
    g,
    autoUpdate,
    baseMaterial,
    fps,
    billboarding,
    playmode,
    count,
    alphaTest,
    transparent,
    hueShift,
    randomPlaybackOffset,
    spritesheet,
    spriteBaseMaterial,
    renderer,
    ref,
    animationMap,
    billboardingStore,
    playmodeStore,
    rndOffsetStore,
    previousRndOffset,
    instanceMatrixNeedsUpdate,
    tempMatrix,
    updatePosition,
    proxySpritefileComponent,
    $playmodeStore,
    $billboardingStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("autoUpdate" in $$props) $$invalidate(5, autoUpdate = $$new_props.autoUpdate);
    if ("baseMaterial" in $$props) $$invalidate(6, baseMaterial = $$new_props.baseMaterial);
    if ("fps" in $$props) $$invalidate(7, fps = $$new_props.fps);
    if ("billboarding" in $$props) $$invalidate(8, billboarding = $$new_props.billboarding);
    if ("playmode" in $$props) $$invalidate(9, playmode = $$new_props.playmode);
    if ("count" in $$props) $$invalidate(10, count = $$new_props.count);
    if ("alphaTest" in $$props) $$invalidate(11, alphaTest = $$new_props.alphaTest);
    if ("transparent" in $$props) $$invalidate(12, transparent = $$new_props.transparent);
    if ("hueShift" in $$props) $$invalidate(13, hueShift = $$new_props.hueShift);
    if ("randomPlaybackOffset" in $$props) $$invalidate(14, randomPlaybackOffset = $$new_props.randomPlaybackOffset);
    if ("spritesheet" in $$props) $$invalidate(15, spritesheet = $$new_props.spritesheet);
    if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
    if ("previousRndOffset" in $$props) previousRndOffset = $$new_props.previousRndOffset;
    if ("instanceMatrixNeedsUpdate" in $$props) instanceMatrixNeedsUpdate = $$new_props.instanceMatrixNeedsUpdate;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*spritesheet, ref*/
    32769) {
      $: {
        if (spritesheet) {
          $$invalidate(0, ref.spritesheet = spritesheet.spritesheet, ref);
          animationMap.set(ref.animationMap);
          $$invalidate(0, ref.material.map = spritesheet.texture, ref);
          $$invalidate(0, ref.material.needsUpdate = true, ref);
        }
      }
    }
    if ($$self.$$.dirty & /*alphaTest*/
    2048) {
      $: $$invalidate(0, ref.material.alphaTest = alphaTest, ref);
    }
    if ($$self.$$.dirty & /*transparent*/
    4096) {
      $: $$invalidate(0, ref.material.transparent = transparent, ref);
    }
    if ($$self.$$.dirty & /*fps*/
    128) {
      $: $$invalidate(0, ref.fps = fps, ref);
    }
    if ($$self.$$.dirty & /*ref, hueShift*/
    8193) {
      $: ref.hueShift.setGlobal(hueShift);
    }
    if ($$self.$$.dirty & /*billboarding*/
    256) {
      $: billboardingStore.set(billboarding);
    }
    if ($$self.$$.dirty & /*playmode*/
    512) {
      $: playmodeStore.set(playmode);
    }
    if ($$self.$$.dirty & /*randomPlaybackOffset*/
    16384) {
      $: rndOffsetStore.set(randomPlaybackOffset);
    }
  };
  return [
    ref,
    billboardingStore,
    playmodeStore,
    proxySpritefileComponent,
    $$restProps,
    autoUpdate,
    baseMaterial,
    fps,
    billboarding,
    playmode,
    count,
    alphaTest,
    transparent,
    hueShift,
    randomPlaybackOffset,
    spritesheet,
    slots,
    $$scope
  ];
}
var InstancedSprite = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance43, create_fragment43, safe_not_equal, {
      autoUpdate: 5,
      baseMaterial: 6,
      fps: 7,
      billboarding: 8,
      playmode: 9,
      count: 10,
      alphaTest: 11,
      transparent: 12,
      hueShift: 13,
      randomPlaybackOffset: 14,
      spritesheet: 15,
      ref: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "InstancedSprite",
      options,
      id: create_fragment43.name
    });
  }
  get autoUpdate() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autoUpdate(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get baseMaterial() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set baseMaterial(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fps() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fps(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get billboarding() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set billboarding(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get playmode() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set playmode(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get count() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set count(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get alphaTest() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set alphaTest(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get transparent() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transparent(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hueShift() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hueShift(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get randomPlaybackOffset() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set randomPlaybackOffset(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get spritesheet() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set spritesheet(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error("<InstancedSprite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error("<InstancedSprite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InstancedSprite_default = InstancedSprite;

// node_modules/@threlte/extras/dist/components/InstancedSprite/instancedSpriteUtils.js
var useInstancedSprite = () => {
  return getContext("instanced-sprite-ctx");
};
var from = (meta) => {
  const builder = jt();
  const animationsList = [];
  for (const { url, type, width, height, animations } of meta) {
    for (const animation of animations) {
      animationsList.push(animation.name);
    }
    builder.add(url, {
      type,
      width,
      height
    }, animations);
  }
  const spritesheet = builder.build();
  const typedHook = useInstancedSprite;
  return { spritesheet, useInstancedSprite: typedHook };
};
var fromAseprite = (asepriteDataUrl, spriteImageUrl) => {
  const texture = new TextureLoader().load(spriteImageUrl, (t) => {
    t.matrixAutoUpdate = false;
    t.generateMipmaps = false;
    t.premultiplyAlpha = false;
    t.wrapS = texture.wrapT = RepeatWrapping;
    t.magFilter = texture.minFilter = NearestFilter;
    t.colorSpace = SRGBColorSpace;
    t.needsUpdate = true;
  });
  const parse = async () => {
    const res = await fetch(asepriteDataUrl);
    const json = await res.json();
    return { spritesheet: Bt(json), texture };
  };
  return parse();
};
var buildSpritesheet = { from, fromAseprite };
export {
  Align_default as Align,
  AnimatedSpriteMaterial_default as AnimatedSpriteMaterial,
  Audio_default as Audio,
  AudioListener_default as AudioListener,
  Billboard_default as Billboard,
  CSM_default as CSM,
  ContactShadows_default as ContactShadows,
  Edges_default as Edges,
  Environment_default as Environment,
  FakeGlowMaterial_default as FakeGlowMaterial,
  Float_default as Float,
  GLTF_default as GLTF,
  Gizmo_default as Gizmo,
  Grid_default as Grid,
  HTML_default as HTML,
  ImageMaterial_default as ImageMaterial,
  Instance_default as Instance,
  InstancedMesh_default as InstancedMesh,
  InstancedMeshes_default as InstancedMeshes,
  InstancedSprite_default as InstancedSprite,
  Mask_default as Mask,
  MeshLineGeometry_default as MeshLineGeometry,
  MeshLineMaterial_default as MeshLineMaterial,
  MeshRefractionMaterial_default as MeshRefractionMaterial,
  OrbitControls_default as OrbitControls,
  Outlines_default as Outlines,
  PerfMonitor_default as PerfMonitor,
  Portal_default as Portal,
  PortalTarget_default as PortalTarget,
  PositionalAudio_default as PositionalAudio,
  RoundedBoxGeometry_default as RoundedBoxGeometry,
  Sky_default as Sky,
  SoftShadows_default as SoftShadows,
  Stars_default as Stars,
  Suspense_default as Suspense,
  Text_default as Text,
  Text3DGeometry_default as Text3DGeometry,
  TrackballControls_default as TrackballControls,
  TransformControls_default as TransformControls,
  buildSpritesheet,
  createTransition,
  interactivity,
  layers,
  onReveal,
  onSuspend,
  transitions,
  useAudioListener,
  useCursor,
  useFBO,
  useGamepad,
  useGltf,
  useGltfAnimations,
  useInstancedSprite,
  useInteractivity,
  useMask,
  useProgress,
  useSuspense,
  useTexture,
  useThrelteAudio
};
//# sourceMappingURL=@threlte_extras.js.map
